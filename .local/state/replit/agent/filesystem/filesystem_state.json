{"file_contents":{"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupAuth } from \"./auth\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { createServer } from \"http\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = createServer(app);\n  \n  await setupAuth(app);\n  registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2181},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n        orange: {\n          DEFAULT: \"hsl(var(--chart-2) / <alpha-value>)\",\n          light: \"hsl(25 95% 65% / <alpha-value>)\",\n          dark: \"hsl(25 95% 45% / <alpha-value>)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4240},"client/src/pages/content.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Check, X, Calendar, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { ContentPost, Client, InsertContentPost } from \"@shared/schema\";\nimport { insertContentPostSchema } from \"@shared/schema\";\nimport { startOfWeek, endOfWeek, eachDayOfInterval, format, isSameDay, addWeeks, subWeeks, startOfDay } from \"date-fns\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\n// Form schema extending the insert schema\nconst formSchema = insertContentPostSchema.extend({\n  scheduledFor: z.string().optional(),\n}).omit({\n  approvalStatus: true,\n  approvedBy: true,\n  publishedAt: true,\n  mediaUrl: true,\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nexport default function Content() {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [currentWeekStart, setCurrentWeekStart] = useState(startOfWeek(new Date(), { weekStartsOn: 0 }));\n  const [selectedClient, setSelectedClient] = useState<string>(\"all\");\n  const { toast } = useToast();\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      clientId: \"\",\n      platform: \"\",\n      caption: \"\",\n      scheduledFor: \"\",\n    },\n  });\n\n  const { data: posts, isLoading } = useQuery<ContentPost[]>({\n    queryKey: [\"/api/content-posts\"],\n  });\n\n  const { data: clients } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\"],\n  });\n\n  const createPostMutation = useMutation({\n    mutationFn: async (data: InsertContentPost) => {\n      return await apiRequest(\"POST\", \"/api/content-posts\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/content-posts\"] });\n      setDialogOpen(false);\n      form.reset();\n      toast({ title: \"Content post created successfully\" });\n    },\n    onError: (error: any) => {\n      const errorMessage = error?.message || \"Failed to create post\";\n      toast({ title: errorMessage, variant: \"destructive\" });\n    },\n  });\n\n  const updateApprovalMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      return await apiRequest(\"PATCH\", `/api/content-posts/${id}/approval`, { approvalStatus: status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/content-posts\"] });\n      toast({ title: \"Approval status updated\" });\n    },\n  });\n\n  const handleCreatePost = (values: FormValues) => {\n    const postData: InsertContentPost = {\n      clientId: values.clientId,\n      platform: values.platform,\n      caption: values.caption || \"\",\n      scheduledFor: values.scheduledFor ? new Date(values.scheduledFor) : null,\n    };\n\n    createPostMutation.mutate(postData);\n  };\n\n  const getStatusGradient = (status: string) => {\n    switch (status) {\n      case \"approved\": return \"from-emerald-500 to-teal-500\";\n      case \"pending\": return \"from-amber-500 to-orange-500\";\n      case \"rejected\": return \"from-red-500 to-pink-500\";\n      case \"published\": return \"from-purple-500 to-indigo-500\";\n      case \"draft\": return \"from-slate-400 to-slate-500\";\n      default: return \"from-slate-400 to-slate-500\";\n    }\n  };\n\n  const getPlatformColor = (platform: string) => {\n    switch (platform) {\n      case \"facebook\": return \"bg-[#1877F2]/10 text-[#1877F2] border-[#1877F2]/20\";\n      case \"instagram\": return \"bg-[#E4405F]/10 text-[#E4405F] border-[#E4405F]/20\";\n      case \"twitter\": return \"bg-[#1DA1F2]/10 text-[#1DA1F2] border-[#1DA1F2]/20\";\n      case \"linkedin\": return \"bg-[#0A66C2]/10 text-[#0A66C2] border-[#0A66C2]/20\";\n      default: return \"bg-secondary text-secondary-foreground\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"approved\": return \"bg-emerald-500/10 text-emerald-700 dark:text-emerald-400\";\n      case \"pending\": return \"bg-amber-500/10 text-amber-700 dark:text-amber-400\";\n      case \"rejected\": return \"bg-red-500/10 text-red-700 dark:text-red-400\";\n      case \"published\": return \"bg-purple-500/10 text-purple-700 dark:text-purple-400\";\n      case \"draft\": return \"bg-slate-500/10 text-slate-700 dark:text-slate-400\";\n      default: return \"bg-slate-500/10 text-slate-700 dark:text-slate-400\";\n    }\n  };\n\n  // Get week days for calendar\n  const weekDays = useMemo(() => {\n    const weekEnd = endOfWeek(currentWeekStart, { weekStartsOn: 0 });\n    return eachDayOfInterval({ start: currentWeekStart, end: weekEnd });\n  }, [currentWeekStart]);\n\n  // Filter and organize posts by day\n  const filteredPosts = useMemo(() => {\n    if (!posts) return [];\n    if (selectedClient === \"all\") return posts;\n    return posts.filter(post => post.clientId === selectedClient);\n  }, [posts, selectedClient]);\n\n  const getPostsForDay = (day: Date) => {\n    return filteredPosts.filter(post => {\n      if (!post.scheduledFor) return false;\n      return isSameDay(new Date(post.scheduledFor), day);\n    });\n  };\n\n  const getClientName = (clientId: string) => {\n    return clients?.find(c => c.id === clientId)?.name || \"Unknown Client\";\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-full gradient-mesh\">\n        <div className=\"p-6 lg:p-8 xl:p-12\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <Card key={i} className=\"p-6 border-0 shadow-lg\">\n                <div className=\"space-y-3\">\n                  <div className=\"h-4 bg-muted/50 rounded w-3/4 shimmer\"></div>\n                  <div className=\"h-20 bg-muted/50 rounded shimmer\"></div>\n                  <div className=\"h-4 bg-muted/50 rounded w-1/2 shimmer\"></div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-full gradient-mesh\">\n      <div className=\"p-6 lg:p-8 xl:p-12 space-y-8\">\n        <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n          <div className=\"space-y-2\">\n            <h1 className=\"text-4xl font-bold tracking-tight text-gradient-purple\" data-testid=\"text-page-title\">Content Calendar</h1>\n            <p className=\"text-lg text-muted-foreground\">Schedule and manage social media content for all clients</p>\n          </div>\n          <div className=\"flex items-center gap-3 flex-wrap\">\n            <Select value={selectedClient} onValueChange={setSelectedClient}>\n              <SelectTrigger className=\"w-[200px]\" data-testid=\"select-filter-client\">\n                <SelectValue placeholder=\"Filter by client\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Clients</SelectItem>\n                {clients?.map((client) => (\n                  <SelectItem key={client.id} value={client.id}>\n                    {client.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Dialog open={dialogOpen} onOpenChange={(open) => {\n              setDialogOpen(open);\n              if (!open) form.reset();\n            }}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-add-post\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  New Post\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl glass-strong\">\n                <DialogHeader>\n                  <DialogTitle className=\"text-2xl\">Create Content Post</DialogTitle>\n                  <DialogDescription>Schedule a new social media post for your client</DialogDescription>\n                </DialogHeader>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(handleCreatePost)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"clientId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Client *</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-post-client\">\n                                <SelectValue placeholder=\"Select client\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {clients?.map((client) => (\n                                <SelectItem key={client.id} value={client.id}>\n                                  {client.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"platform\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Platform *</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-platform\">\n                                <SelectValue placeholder=\"Select platform\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"facebook\">Facebook</SelectItem>\n                              <SelectItem value=\"instagram\">Instagram</SelectItem>\n                              <SelectItem value=\"twitter\">Twitter</SelectItem>\n                              <SelectItem value=\"linkedin\">LinkedIn</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"caption\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Caption *</FormLabel>\n                          <FormControl>\n                            <Textarea {...field} rows={4} data-testid=\"input-caption\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"scheduledFor\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Schedule For</FormLabel>\n                          <FormControl>\n                            <Input {...field} type=\"datetime-local\" data-testid=\"input-scheduled-for\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"flex justify-end gap-2\">\n                      <Button type=\"button\" variant=\"outline\" onClick={() => setDialogOpen(false)}>\n                        Cancel\n                      </Button>\n                      <Button type=\"submit\" disabled={createPostMutation.isPending} data-testid=\"button-submit-post\">\n                        {createPostMutation.isPending ? \"Creating...\" : \"Create Post\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        {/* Week Navigation */}\n        <div className=\"flex items-center justify-between gap-4\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setCurrentWeekStart(subWeeks(currentWeekStart, 1))}\n            data-testid=\"button-previous-week\"\n          >\n            <ChevronLeft className=\"w-4 h-4 mr-1\" />\n            Previous Week\n          </Button>\n          <h2 className=\"text-lg font-semibold\" data-testid=\"text-week-range\">\n            {format(currentWeekStart, 'MMM d')} - {format(endOfWeek(currentWeekStart, { weekStartsOn: 0 }), 'MMM d, yyyy')}\n          </h2>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setCurrentWeekStart(addWeeks(currentWeekStart, 1))}\n            data-testid=\"button-next-week\"\n          >\n            Next Week\n            <ChevronRight className=\"w-4 h-4 ml-1\" />\n          </Button>\n        </div>\n\n        {/* Calendar Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-7 gap-4\">\n          {weekDays.map((day) => {\n            const dayPosts = getPostsForDay(day);\n            const isToday = isSameDay(day, new Date());\n\n            return (\n              <Card key={day.toISOString()} className={`${isToday ? 'ring-2 ring-primary' : ''}`} data-testid={`calendar-day-${format(day, 'yyyy-MM-dd')}`}>\n                <CardHeader className=\"p-3 pb-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-xs text-muted-foreground\">{format(day, 'EEE')}</p>\n                      <p className={`text-lg font-semibold ${isToday ? 'text-primary' : ''}`}>{format(day, 'd')}</p>\n                    </div>\n                    {dayPosts.length > 0 && (\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {dayPosts.length}\n                      </Badge>\n                    )}\n                  </div>\n                </CardHeader>\n                <CardContent className=\"p-3 pt-0 space-y-2\">\n                  {dayPosts.map((post) => (\n                    <Card key={post.id} className=\"hover-elevate border-0 bg-card/50\" data-testid={`card-post-${post.id}`}>\n                      <CardContent className=\"p-3 space-y-2\">\n                        <div className=\"flex items-start justify-between gap-1\">\n                          <Badge className={`${getPlatformColor(post.platform)} border text-[10px] px-1`} variant=\"outline\">\n                            {post.platform}\n                          </Badge>\n                          <Badge className={`${getStatusColor(post.approvalStatus)} text-[10px] px-1`} variant=\"secondary\">\n                            {post.approvalStatus}\n                          </Badge>\n                        </div>\n                        \n                        <p className=\"text-xs font-medium text-muted-foreground\">{getClientName(post.clientId)}</p>\n                        <p className=\"text-xs line-clamp-2\">{post.caption}</p>\n                        \n                        {post.scheduledFor && (\n                          <p className=\"text-[10px] text-muted-foreground\">\n                            {format(new Date(post.scheduledFor), 'h:mm a')}\n                          </p>\n                        )}\n\n                        {post.approvalStatus === \"pending\" && (\n                          <div className=\"flex gap-1 pt-1\">\n                            <Button\n                              size=\"sm\"\n                              className=\"flex-1 h-6 text-xs\"\n                              onClick={() => updateApprovalMutation.mutate({ id: post.id, status: \"approved\" })}\n                              data-testid={`button-approve-${post.id}`}\n                            >\n                              <Check className=\"w-3 h-3\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"destructive\"\n                              className=\"flex-1 h-6 text-xs\"\n                              onClick={() => updateApprovalMutation.mutate({ id: post.id, status: \"rejected\" })}\n                              data-testid={`button-reject-${post.id}`}\n                            >\n                              <X className=\"w-3 h-3\" />\n                            </Button>\n                          </div>\n                        )}\n                      </CardContent>\n                    </Card>\n                  ))}\n                  {dayPosts.length === 0 && (\n                    <p className=\"text-xs text-center text-muted-foreground py-4\">No posts</p>\n                  )}\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {filteredPosts.length === 0 && (\n          <div className=\"text-center py-12\">\n            <Calendar className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n            <p className=\"text-muted-foreground\">No content posts scheduled yet</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":17819},"client/src/components/GlobalSearch.tsx":{"content":"import { useState, useEffect, useCallback } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Command, CommandDialog, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from \"@/components/ui/command\";\nimport { Search, Building2, Megaphone, Users, FileText, DollarSign, Ticket } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface SearchResults {\n  clients: Array<{ id: string; name: string; company?: string; email?: string }>;\n  campaigns: Array<{ id: string; name: string; description?: string }>;\n  leads: Array<{ id: string; name: string; email?: string; company?: string }>;\n  contentPosts: Array<{ id: string; title: string; channel?: string }>;\n  invoices: Array<{ id: string; invoiceNumber: string; amount: number }>;\n  tickets: Array<{ id: string; subject: string; priority?: string }>;\n}\n\nexport function GlobalSearch() {\n  const [open, setOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [, setLocation] = useLocation();\n\n  const { data: results } = useQuery<SearchResults>({\n    queryKey: [\"/api/search\", searchQuery],\n    queryFn: async () => {\n      const res = await fetch(`/api/search?q=${encodeURIComponent(searchQuery)}`, {\n        credentials: \"include\",\n      });\n      if (!res.ok) {\n        throw new Error(\"Search failed\");\n      }\n      return res.json();\n    },\n    enabled: searchQuery.length >= 2,\n  });\n\n  useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === \"k\" && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault();\n        setOpen((open) => !open);\n      }\n    };\n    document.addEventListener(\"keydown\", down);\n    return () => document.removeEventListener(\"keydown\", down);\n  }, []);\n\n  const handleSelect = useCallback((path: string) => {\n    setOpen(false);\n    setSearchQuery(\"\");\n    setLocation(path);\n  }, [setLocation]);\n\n  const hasResults = results && (\n    results.clients.length > 0 ||\n    results.campaigns.length > 0 ||\n    results.leads.length > 0 ||\n    results.contentPosts.length > 0 ||\n    results.invoices.length > 0 ||\n    results.tickets.length > 0\n  );\n\n  return (\n    <>\n      <Button\n        variant=\"outline\"\n        className=\"relative w-full justify-start text-sm text-muted-foreground sm:pr-12 md:w-40 lg:w-64\"\n        onClick={() => setOpen(true)}\n        data-testid=\"button-global-search\"\n      >\n        <Search className=\"mr-2 h-4 w-4\" />\n        <span className=\"hidden lg:inline-flex\">Search...</span>\n        <span className=\"inline-flex lg:hidden\">Search</span>\n        <kbd className=\"pointer-events-none absolute right-1.5 top-1.5 hidden h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium opacity-100 sm:flex\">\n          <span className=\"text-xs\">âŒ˜</span>K\n        </kbd>\n      </Button>\n\n      <CommandDialog open={open} onOpenChange={setOpen}>\n        <CommandInput \n          placeholder=\"Search clients, campaigns, leads, content, invoices, tickets...\" \n          value={searchQuery}\n          onValueChange={setSearchQuery}\n          data-testid=\"input-search-query\"\n        />\n        <CommandList>\n          <CommandEmpty>No results found.</CommandEmpty>\n\n          {results?.clients && results.clients.length > 0 && (\n            <CommandGroup heading=\"Clients\">\n              {results.clients.map((client) => (\n                <CommandItem\n                  key={client.id}\n                  value={`client-${client.id}`}\n                  onSelect={() => handleSelect(`/clients`)}\n                  data-testid={`search-result-client-${client.id}`}\n                >\n                  <Building2 className=\"mr-2 h-4 w-4\" />\n                  <div className=\"flex flex-col\">\n                    <span>{client.name}</span>\n                    {client.company && (\n                      <span className=\"text-xs text-muted-foreground\">{client.company}</span>\n                    )}\n                  </div>\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          )}\n\n          {results?.campaigns && results.campaigns.length > 0 && (\n            <CommandGroup heading=\"Campaigns\">\n              {results.campaigns.map((campaign) => (\n                <CommandItem\n                  key={campaign.id}\n                  value={`campaign-${campaign.id}`}\n                  onSelect={() => handleSelect(`/campaigns`)}\n                  data-testid={`search-result-campaign-${campaign.id}`}\n                >\n                  <Megaphone className=\"mr-2 h-4 w-4\" />\n                  <div className=\"flex flex-col\">\n                    <span>{campaign.name}</span>\n                    {campaign.description && (\n                      <span className=\"text-xs text-muted-foreground line-clamp-1\">{campaign.description}</span>\n                    )}\n                  </div>\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          )}\n\n          {results?.leads && results.leads.length > 0 && (\n            <CommandGroup heading=\"Leads\">\n              {results.leads.map((lead) => (\n                <CommandItem\n                  key={lead.id}\n                  value={`lead-${lead.id}`}\n                  onSelect={() => handleSelect(`/pipeline`)}\n                  data-testid={`search-result-lead-${lead.id}`}\n                >\n                  <Users className=\"mr-2 h-4 w-4\" />\n                  <div className=\"flex flex-col\">\n                    <span>{lead.name}</span>\n                    {lead.company && (\n                      <span className=\"text-xs text-muted-foreground\">{lead.company}</span>\n                    )}\n                  </div>\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          )}\n\n          {results?.contentPosts && results.contentPosts.length > 0 && (\n            <CommandGroup heading=\"Content\">\n              {results.contentPosts.map((post) => (\n                <CommandItem\n                  key={post.id}\n                  value={`content-${post.id}`}\n                  onSelect={() => handleSelect(`/content`)}\n                  data-testid={`search-result-content-${post.id}`}\n                >\n                  <FileText className=\"mr-2 h-4 w-4\" />\n                  <div className=\"flex flex-col\">\n                    <span>{post.title}</span>\n                    {post.channel && (\n                      <span className=\"text-xs text-muted-foreground capitalize\">{post.channel}</span>\n                    )}\n                  </div>\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          )}\n\n          {results?.invoices && results.invoices.length > 0 && (\n            <CommandGroup heading=\"Invoices\">\n              {results.invoices.map((invoice) => (\n                <CommandItem\n                  key={invoice.id}\n                  value={`invoice-${invoice.id}`}\n                  onSelect={() => handleSelect(`/invoices`)}\n                  data-testid={`search-result-invoice-${invoice.id}`}\n                >\n                  <DollarSign className=\"mr-2 h-4 w-4\" />\n                  <div className=\"flex flex-col\">\n                    <span>{invoice.invoiceNumber}</span>\n                    <span className=\"text-xs text-muted-foreground\">${invoice.amount.toLocaleString()}</span>\n                  </div>\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          )}\n\n          {results?.tickets && results.tickets.length > 0 && (\n            <CommandGroup heading=\"Tickets\">\n              {results.tickets.map((ticket) => (\n                <CommandItem\n                  key={ticket.id}\n                  value={`ticket-${ticket.id}`}\n                  onSelect={() => handleSelect(`/tickets`)}\n                  data-testid={`search-result-ticket-${ticket.id}`}\n                >\n                  <Ticket className=\"mr-2 h-4 w-4\" />\n                  <div className=\"flex flex-col\">\n                    <span>{ticket.subject}</span>\n                    {ticket.priority && (\n                      <span className=\"text-xs text-muted-foreground capitalize\">{ticket.priority}</span>\n                    )}\n                  </div>\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          )}\n        </CommandList>\n      </CommandDialog>\n    </>\n  );\n}\n","size_bytes":8395},"server/rbac.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport { storage } from \"./storage\";\n\nexport enum UserRole {\n  ADMIN = \"admin\",\n  STAFF = \"staff\",\n  CLIENT = \"client\",\n}\n\nexport interface RolePermissions {\n  canManageUsers: boolean;\n  canManageClients: boolean;\n  canManageCampaigns: boolean;\n  canManageLeads: boolean;\n  canManageContent: boolean;\n  canManageInvoices: boolean;\n  canManageTickets: boolean;\n  canViewReports: boolean;\n  canManageSettings: boolean;\n}\n\nexport const rolePermissions: Record<UserRole, RolePermissions> = {\n  [UserRole.ADMIN]: {\n    canManageUsers: true,\n    canManageClients: true,\n    canManageCampaigns: true,\n    canManageLeads: true,\n    canManageContent: true,\n    canManageInvoices: true,\n    canManageTickets: true,\n    canViewReports: true,\n    canManageSettings: true,\n  },\n  [UserRole.STAFF]: {\n    canManageUsers: false,\n    canManageClients: true,\n    canManageCampaigns: true,\n    canManageLeads: true,\n    canManageContent: true,\n    canManageInvoices: true,\n    canManageTickets: true,\n    canViewReports: true,\n    canManageSettings: false,\n  },\n  [UserRole.CLIENT]: {\n    canManageUsers: false,\n    canManageClients: false,\n    canManageCampaigns: false,\n    canManageLeads: false,\n    canManageContent: false,\n    canManageInvoices: false,\n    canManageTickets: true, // Clients can create/view their own tickets\n    canViewReports: false,\n    canManageSettings: false,\n  },\n};\n\nexport function hasPermission(role: UserRole, permission: keyof RolePermissions): boolean {\n  return rolePermissions[role]?.[permission] ?? false;\n}\n\nexport function requireRole(...allowedRoles: UserRole[]) {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    const user = req.user as any;\n    \n    if (!user?.claims?.sub) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    const dbUser = await storage.getUser(user.claims.sub);\n    \n    if (!dbUser) {\n      return res.status(401).json({ message: \"User not found\" });\n    }\n\n    if (!allowedRoles.includes(dbUser.role as UserRole)) {\n      return res.status(403).json({ \n        message: \"Forbidden: Insufficient permissions\",\n        requiredRoles: allowedRoles,\n        userRole: dbUser.role,\n      });\n    }\n\n    // Attach user role to request for later use\n    (req as any).userRole = dbUser.role;\n    (req as any).userId = dbUser.id;\n\n    next();\n  };\n}\n\nexport function requirePermission(permission: keyof RolePermissions) {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    const user = req.user as any;\n    \n    if (!user?.claims?.sub) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    const dbUser = await storage.getUser(user.claims.sub);\n    \n    if (!dbUser) {\n      return res.status(401).json({ message: \"User not found\" });\n    }\n\n    if (!hasPermission(dbUser.role as UserRole, permission)) {\n      return res.status(403).json({ \n        message: `Forbidden: Missing permission '${permission}'`,\n        userRole: dbUser.role,\n      });\n    }\n\n    (req as any).userRole = dbUser.role;\n    (req as any).userId = dbUser.id;\n\n    next();\n  };\n}\n","size_bytes":3147},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport \"@uppy/core/dist/style.min.css\";\nimport \"@uppy/dashboard/dist/style.min.css\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760,\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n        setShowModal(false);\n      })\n  );\n\n  return (\n    <div>\n      <Button onClick={() => setShowModal(true)} className={buttonClassName} data-testid=\"button-upload-document\">\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}\n","size_bytes":1672},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\nexport enum ObjectAccessGroupType {}\n\nexport interface ObjectAccessGroup {\n  type: ObjectAccessGroupType;\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n  return granted === ObjectPermission.WRITE;\n}\n\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  if (!userId) {\n    return false;\n  }\n\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","size_bytes":2707},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/pages/invoices.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, DollarSign, Calendar, FileText, CreditCard } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Invoice, Client } from \"@shared/schema\";\n\nexport default function Invoices() {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: invoices, isLoading } = useQuery<Invoice[]>({\n    queryKey: [\"/api/invoices\"],\n  });\n\n  const { data: clients } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\"],\n  });\n\n  const { data: stripeData } = useQuery({\n    queryKey: [\"/api/stripe/subscriptions\"],\n    retry: false,\n    meta: { returnNull: true },\n  });\n\n  const createInvoiceMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/invoices\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n      setDialogOpen(false);\n      toast({ title: \"Invoice created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create invoice\", variant: \"destructive\" });\n    },\n  });\n\n  const handleCreateInvoice = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n\n    createInvoiceMutation.mutate({\n      clientId: formData.get(\"clientId\"),\n      invoiceNumber: formData.get(\"invoiceNumber\"),\n      amount: parseInt(formData.get(\"amount\") as string),\n      dueDate: formData.get(\"dueDate\") ? new Date(formData.get(\"dueDate\") as string) : null,\n      description: formData.get(\"description\"),\n    });\n  };\n\n  const getStatusGradient = (status: string) => {\n    switch (status) {\n      case \"paid\": return \"from-emerald-500 to-teal-500\";\n      case \"sent\": return \"from-blue-500 to-cyan-500\";\n      case \"overdue\": return \"from-red-500 to-orange-500\";\n      case \"draft\": return \"from-slate-400 to-slate-500\";\n      default: return \"from-slate-400 to-slate-500\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"paid\": return \"bg-emerald-500/10 text-emerald-700 dark:text-emerald-400\";\n      case \"sent\": return \"bg-blue-500/10 text-blue-700 dark:text-blue-400\";\n      case \"overdue\": return \"bg-red-500/10 text-red-700 dark:text-red-400\";\n      case \"draft\": return \"bg-slate-500/10 text-slate-700 dark:text-slate-400\";\n      default: return \"bg-slate-500/10 text-slate-700 dark:text-slate-400\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-full gradient-mesh\">\n        <div className=\"p-6 lg:p-8 xl:p-12\">\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <Card key={i} className=\"p-6 border-0 shadow-lg\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-2 flex-1\">\n                    <div className=\"h-5 bg-muted/50 rounded w-32 shimmer\"></div>\n                    <div className=\"h-4 bg-muted/50 rounded w-48 shimmer\"></div>\n                  </div>\n                  <div className=\"h-8 bg-muted/50 rounded w-24 shimmer\"></div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const totalRevenue = invoices?.filter(inv => inv.status === \"paid\").reduce((sum, inv) => sum + inv.amount, 0) || 0;\n  const pendingAmount = invoices?.filter(inv => inv.status === \"sent\").reduce((sum, inv) => sum + inv.amount, 0) || 0;\n\n  // Create a map of Stripe customer IDs to client names\n  const customerIdToClient = new Map();\n  clients?.forEach(client => {\n    if (client.stripeCustomerId) {\n      customerIdToClient.set(client.stripeCustomerId, client.name);\n    }\n  });\n\n  return (\n    <div className=\"min-h-full gradient-mesh\">\n      <div className=\"p-6 lg:p-8 xl:p-12 space-y-8\">\n        <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n          <div className=\"space-y-2\">\n            <h1 className=\"text-4xl font-bold tracking-tight text-gradient-purple\" data-testid=\"text-page-title\">Invoices & Billing</h1>\n            <p className=\"text-lg text-muted-foreground\">Manage invoices and track payments</p>\n          </div>\n          <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-invoice\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Invoice\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl glass-strong\">\n            <DialogHeader>\n              <DialogTitle className=\"text-2xl\">Create New Invoice</DialogTitle>\n              <DialogDescription>Generate a new invoice for your client</DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleCreateInvoice} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"clientId\">Client *</Label>\n                  <Select name=\"clientId\" required>\n                    <SelectTrigger data-testid=\"select-invoice-client\">\n                      <SelectValue placeholder=\"Select client\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {clients?.map((client) => (\n                        <SelectItem key={client.id} value={client.id}>\n                          {client.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"invoiceNumber\">Invoice Number *</Label>\n                  <Input id=\"invoiceNumber\" name=\"invoiceNumber\" placeholder=\"INV-001\" required data-testid=\"input-invoice-number\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"amount\">Amount ($) *</Label>\n                  <Input id=\"amount\" name=\"amount\" type=\"number\" required data-testid=\"input-amount\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"dueDate\">Due Date</Label>\n                  <Input id=\"dueDate\" name=\"dueDate\" type=\"date\" data-testid=\"input-due-date\" />\n                </div>\n                <div className=\"space-y-2 col-span-2\">\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea id=\"description\" name=\"description\" data-testid=\"input-description\" />\n                </div>\n              </div>\n              <div className=\"flex justify-end gap-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={createInvoiceMutation.isPending} data-testid=\"button-submit-invoice\">\n                  {createInvoiceMutation.isPending ? \"Creating...\" : \"Create Invoice\"}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-3 bg-chart-3/10 rounded-lg\">\n                <DollarSign className=\"w-6 h-6 text-chart-3\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Revenue</p>\n                <p className=\"text-2xl font-semibold\">${(totalRevenue / 100).toLocaleString()}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-3 bg-chart-1/10 rounded-lg\">\n                <DollarSign className=\"w-6 h-6 text-chart-1\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Pending Amount</p>\n                <p className=\"text-2xl font-semibold\">${(pendingAmount / 100).toLocaleString()}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-3 bg-chart-4/10 rounded-lg\">\n                <DollarSign className=\"w-6 h-6 text-chart-4\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Invoices</p>\n                <p className=\"text-2xl font-semibold\">{invoices?.length || 0}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Active Subscriptions Section */}\n      {stripeData && stripeData.activeSubscriptions > 0 && (\n        <Card className=\"glass-strong\">\n          <CardHeader className=\"border-b border-border/50\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 rounded-lg bg-gradient-to-br from-primary/20 to-purple-500/20 flex items-center justify-center\">\n                  <CreditCard className=\"w-5 h-5 text-primary\" />\n                </div>\n                <div>\n                  <CardTitle className=\"text-lg font-semibold\">Active Subscriptions</CardTitle>\n                  <p className=\"text-sm text-muted-foreground mt-0.5\">Recurring revenue from Stripe</p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-sm text-muted-foreground\">Monthly Recurring Revenue</p>\n                <p className=\"text-2xl font-bold text-primary\" data-testid=\"metric-subscription-mrr\">${stripeData.mrr.toFixed(2)}</p>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            <div className=\"space-y-3\">\n              {stripeData.subscriptions\n                .filter((sub: any) => sub.status === 'active')\n                .slice(0, 10)\n                .map((sub: any) => (\n                  <div key={sub.id} className=\"flex items-center justify-between p-3 rounded-lg hover-elevate transition-all\" data-testid={`subscription-${sub.id}`}>\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-2 h-2 rounded-full bg-emerald-500\"></div>\n                      <div>\n                        <p className=\"text-sm font-medium\">\n                          {customerIdToClient.get(sub.customerId) || sub.customerId.slice(0, 25) + '...'}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {sub.cancelAtPeriodEnd ? 'Canceling' : 'Active'} â€¢ Renews {new Date(sub.currentPeriodEnd * 1000).toLocaleDateString()}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-sm font-semibold\">${sub.amount.toFixed(2)}</p>\n                      <p className=\"text-xs text-muted-foreground\">/{sub.interval}</p>\n                    </div>\n                  </div>\n                ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      <div className=\"space-y-4\">\n        <h2 className=\"text-2xl font-semibold\">One-Time Invoices</h2>\n        {invoices?.map((invoice) => (\n          <Card key={invoice.id} className=\"hover-elevate transition-shadow\" data-testid={`card-invoice-${invoice.id}`}>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between gap-4\">\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center gap-3 mb-2\">\n                    <h3 className=\"font-semibold\">{invoice.invoiceNumber}</h3>\n                    <Badge className={getStatusColor(invoice.status)} variant=\"secondary\">\n                      {invoice.status}\n                    </Badge>\n                  </div>\n                  {invoice.description && (\n                    <p className=\"text-sm text-muted-foreground line-clamp-1\">{invoice.description}</p>\n                  )}\n                  {invoice.dueDate && (\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Due: {new Date(invoice.dueDate).toLocaleDateString()}\n                    </p>\n                  )}\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-2xl font-semibold\">${(invoice.amount / 100).toLocaleString()}</p>\n                  {invoice.paidAt && (\n                    <p className=\"text-xs text-muted-foreground\">\n                      Paid: {new Date(invoice.paidAt).toLocaleDateString()}\n                    </p>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {invoices?.length === 0 && (\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\">No invoices yet</p>\n        </div>\n      )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":13917},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { relations } from \"drizzle-orm\";\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)]\n);\n\n// User storage table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\").unique().notNull(),\n  password: varchar(\"password\").notNull(),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: varchar(\"role\").notNull().default(\"staff\"), // admin, staff, client\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const usersRelations = relations(users, ({ many }) => ({\n  assignedClients: many(clients),\n  assignedTasks: many(tasks),\n  messages: many(messages),\n  tickets: many(tickets),\n}));\n\n// Clients table\nexport const clients = pgTable(\"clients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  email: varchar(\"email\"),\n  phone: varchar(\"phone\"),\n  company: varchar(\"company\"),\n  website: varchar(\"website\"),\n  logoUrl: varchar(\"logo_url\"),\n  serviceTags: text(\"service_tags\").array(), // social media, lead gen, design, etc.\n  status: varchar(\"status\").notNull().default(\"active\"), // active, inactive, onboarding\n  assignedToId: varchar(\"assigned_to_id\").references(() => users.id),\n  notes: text(\"notes\"),\n  socialLinks: jsonb(\"social_links\"), // {twitter, facebook, instagram, linkedin}\n  stripeCustomerId: varchar(\"stripe_customer_id\"),\n  stripeSubscriptionId: varchar(\"stripe_subscription_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const clientsRelations = relations(clients, ({ one, many }) => ({\n  assignedTo: one(users, {\n    fields: [clients.assignedToId],\n    references: [users.id],\n  }),\n  campaigns: many(campaigns),\n  leads: many(leads),\n  invoices: many(invoices),\n  tickets: many(tickets),\n  contentPosts: many(contentPosts),\n  onboardingTasks: many(onboardingTasks),\n}));\n\n// Campaigns table\nexport const campaigns = pgTable(\"campaigns\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").references(() => clients.id).notNull(),\n  name: varchar(\"name\").notNull(),\n  type: varchar(\"type\").notNull(), // social, ads, content, email\n  status: varchar(\"status\").notNull().default(\"planning\"), // planning, active, paused, completed\n  startDate: timestamp(\"start_date\"),\n  endDate: timestamp(\"end_date\"),\n  budget: integer(\"budget\"),\n  description: text(\"description\"),\n  goals: text(\"goals\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const campaignsRelations = relations(campaigns, ({ one, many }) => ({\n  client: one(clients, {\n    fields: [campaigns.clientId],\n    references: [clients.id],\n  }),\n  tasks: many(tasks),\n}));\n\n// Tasks table\nexport const tasks = pgTable(\"tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  campaignId: varchar(\"campaign_id\").references(() => campaigns.id),\n  clientId: varchar(\"client_id\").references(() => clients.id),\n  assignedToId: varchar(\"assigned_to_id\").references(() => users.id),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  status: varchar(\"status\").notNull().default(\"todo\"), // todo, in_progress, review, completed\n  priority: varchar(\"priority\").notNull().default(\"normal\"), // low, normal, high, urgent\n  dueDate: timestamp(\"due_date\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const tasksRelations = relations(tasks, ({ one, many }) => ({\n  campaign: one(campaigns, {\n    fields: [tasks.campaignId],\n    references: [campaigns.id],\n  }),\n  client: one(clients, {\n    fields: [tasks.clientId],\n    references: [clients.id],\n  }),\n  assignedTo: one(users, {\n    fields: [tasks.assignedToId],\n    references: [users.id],\n  }),\n  comments: many(taskComments),\n}));\n\n// Task Comments table (for collaboration)\nexport const taskComments = pgTable(\"task_comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  taskId: varchar(\"task_id\").references(() => tasks.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  comment: text(\"comment\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const taskCommentsRelations = relations(taskComments, ({ one }) => ({\n  task: one(tasks, {\n    fields: [taskComments.taskId],\n    references: [tasks.id],\n  }),\n  user: one(users, {\n    fields: [taskComments.userId],\n    references: [users.id],\n  }),\n}));\n\n// Leads table (Sales Pipeline)\nexport const leads = pgTable(\"leads\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").references(() => clients.id),\n  assignedToId: varchar(\"assigned_to_id\").references(() => users.id),\n  name: varchar(\"name\").notNull(),\n  email: varchar(\"email\"),\n  phone: varchar(\"phone\"),\n  company: varchar(\"company\"),\n  stage: varchar(\"stage\").notNull().default(\"prospect\"), // prospect, qualified, proposal, closed_won, closed_lost\n  score: varchar(\"score\").notNull().default(\"warm\"), // hot, warm, cold\n  value: integer(\"value\"), // potential deal value in cents\n  source: varchar(\"source\").notNull().default(\"website\"), // website, ads, form, call, referral, social\n  sourceMetadata: jsonb(\"source_metadata\"), // {campaign_id, ad_id, form_name, etc.}\n  notes: text(\"notes\"),\n  nextFollowUp: timestamp(\"next_follow_up\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const leadsRelations = relations(leads, ({ one, many }) => ({\n  client: one(clients, {\n    fields: [leads.clientId],\n    references: [clients.id],\n  }),\n  assignedTo: one(users, {\n    fields: [leads.assignedToId],\n    references: [users.id],\n  }),\n  activities: many(leadActivities),\n  automations: many(leadAutomations),\n}));\n\n// Lead Activities table (Interaction History)\nexport const leadActivities = pgTable(\"lead_activities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  leadId: varchar(\"lead_id\").references(() => leads.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  type: varchar(\"type\").notNull(), // note, call, email, sms, meeting, stage_change\n  subject: varchar(\"subject\"),\n  description: text(\"description\"),\n  metadata: jsonb(\"metadata\"), // {duration, email_id, sms_id, previous_stage, new_stage}\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const leadActivitiesRelations = relations(leadActivities, ({ one }) => ({\n  lead: one(leads, {\n    fields: [leadActivities.leadId],\n    references: [leads.id],\n  }),\n  user: one(users, {\n    fields: [leadActivities.userId],\n    references: [users.id],\n  }),\n}));\n\n// Lead Automation Workflows table\nexport const leadAutomations = pgTable(\"lead_automations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  leadId: varchar(\"lead_id\").references(() => leads.id).notNull(),\n  type: varchar(\"type\").notNull(), // email, sms\n  trigger: varchar(\"trigger\").notNull(), // stage_change, time_delay, manual\n  triggerConditions: jsonb(\"trigger_conditions\"), // {stage: 'qualified', delay_days: 2}\n  actionType: varchar(\"action_type\").notNull(), // send_email, send_sms\n  actionData: jsonb(\"action_data\"), // {template_id, message, subject}\n  status: varchar(\"status\").notNull().default(\"pending\"), // pending, sent, failed\n  scheduledFor: timestamp(\"scheduled_for\"),\n  executedAt: timestamp(\"executed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const leadAutomationsRelations = relations(leadAutomations, ({ one }) => ({\n  lead: one(leads, {\n    fields: [leadAutomations.leadId],\n    references: [leads.id],\n  }),\n}));\n\n// Content Posts table (Content Calendar)\nexport const contentPosts = pgTable(\"content_posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").references(() => clients.id).notNull(),\n  platform: varchar(\"platform\").notNull(), // facebook, instagram, twitter, linkedin\n  caption: text(\"caption\"),\n  mediaUrl: varchar(\"media_url\"),\n  scheduledFor: timestamp(\"scheduled_for\"),\n  approvalStatus: varchar(\"approval_status\").notNull().default(\"draft\"), // draft, pending, approved, rejected, published\n  approvedBy: varchar(\"approved_by\"),\n  publishedAt: timestamp(\"published_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const contentPostsRelations = relations(contentPosts, ({ one }) => ({\n  client: one(clients, {\n    fields: [contentPosts.clientId],\n    references: [clients.id],\n  }),\n}));\n\n// Invoices table\nexport const invoices = pgTable(\"invoices\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").references(() => clients.id).notNull(),\n  invoiceNumber: varchar(\"invoice_number\").notNull().unique(),\n  amount: integer(\"amount\").notNull(),\n  status: varchar(\"status\").notNull().default(\"draft\"), // draft, sent, paid, overdue\n  dueDate: timestamp(\"due_date\"),\n  paidAt: timestamp(\"paid_at\"),\n  stripePaymentIntentId: varchar(\"stripe_payment_intent_id\"),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const invoicesRelations = relations(invoices, ({ one }) => ({\n  client: one(clients, {\n    fields: [invoices.clientId],\n    references: [clients.id],\n  }),\n}));\n\n// Support Tickets table\nexport const tickets = pgTable(\"tickets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").references(() => clients.id).notNull(),\n  assignedToId: varchar(\"assigned_to_id\").references(() => users.id),\n  subject: varchar(\"subject\").notNull(),\n  description: text(\"description\"),\n  priority: varchar(\"priority\").notNull().default(\"normal\"), // normal, urgent\n  status: varchar(\"status\").notNull().default(\"open\"), // open, in_progress, resolved, closed\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  resolvedAt: timestamp(\"resolved_at\"),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const ticketsRelations = relations(tickets, ({ one }) => ({\n  client: one(clients, {\n    fields: [tickets.clientId],\n    references: [clients.id],\n  }),\n  assignedTo: one(users, {\n    fields: [tickets.assignedToId],\n    references: [users.id],\n  }),\n}));\n\n// Messages table (Team Communication)\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").references(() => clients.id),\n  campaignId: varchar(\"campaign_id\").references(() => campaigns.id),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  content: text(\"content\").notNull(),\n  isInternal: boolean(\"is_internal\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const messagesRelations = relations(messages, ({ one }) => ({\n  client: one(clients, {\n    fields: [messages.clientId],\n    references: [clients.id],\n  }),\n  campaign: one(campaigns, {\n    fields: [messages.campaignId],\n    references: [campaigns.id],\n  }),\n  user: one(users, {\n    fields: [messages.userId],\n    references: [users.id],\n  }),\n}));\n\n// Onboarding Tasks table\nexport const onboardingTasks = pgTable(\"onboarding_tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").references(() => clients.id).notNull(),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  dueDay: integer(\"due_day\").notNull(), // day number in the 30-day onboarding\n  completed: boolean(\"completed\").notNull().default(false),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const onboardingTasksRelations = relations(onboardingTasks, ({ one }) => ({\n  client: one(clients, {\n    fields: [onboardingTasks.clientId],\n    references: [clients.id],\n  }),\n}));\n\n// Client Documents table\nexport const clientDocuments = pgTable(\"client_documents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").references(() => clients.id).notNull(),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  objectPath: varchar(\"object_path\").notNull(), // Path to object in storage\n  fileType: varchar(\"file_type\"), // pdf, doc, image, etc\n  fileSize: integer(\"file_size\"), // in bytes\n  uploadedBy: varchar(\"uploaded_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const clientDocumentsRelations = relations(clientDocuments, ({ one }) => ({\n  client: one(clients, {\n    fields: [clientDocuments.clientId],\n    references: [clients.id],\n  }),\n  uploader: one(users, {\n    fields: [clientDocuments.uploadedBy],\n    references: [users.id],\n  }),\n}));\n\n// Website Projects table (Development Tracker)\nexport const websiteProjects = pgTable(\"website_projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").references(() => clients.id).notNull(),\n  name: varchar(\"name\").notNull(),\n  stage: varchar(\"stage\").notNull().default(\"design\"), // design, dev, qa, launch\n  url: varchar(\"url\"),\n  domain: varchar(\"domain\"),\n  hostingProvider: varchar(\"hosting_provider\"),\n  hostingExpiry: timestamp(\"hosting_expiry\"),\n  sslStatus: varchar(\"ssl_status\").default(\"active\"), // active, expiring_soon, expired\n  sslExpiry: timestamp(\"ssl_expiry\"),\n  dnsStatus: varchar(\"dns_status\").default(\"verified\"), // verified, pending, failed\n  dnsLastChecked: timestamp(\"dns_last_checked\"),\n  progress: integer(\"progress\").default(0), // 0-100\n  launchDate: timestamp(\"launch_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const websiteProjectsRelations = relations(websiteProjects, ({ one, many }) => ({\n  client: one(clients, {\n    fields: [websiteProjects.clientId],\n    references: [clients.id],\n  }),\n  feedback: many(projectFeedback),\n}));\n\n// Project Feedback table (Client Feedback Log)\nexport const projectFeedback = pgTable(\"project_feedback\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").references(() => websiteProjects.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  type: varchar(\"type\").notNull().default(\"comment\"), // comment, revision, approval, deadline\n  subject: varchar(\"subject\"),\n  message: text(\"message\").notNull(),\n  priority: varchar(\"priority\").default(\"normal\"), // low, normal, high, urgent\n  status: varchar(\"status\").default(\"open\"), // open, in_progress, completed\n  deadline: timestamp(\"deadline\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const projectFeedbackRelations = relations(projectFeedback, ({ one }) => ({\n  project: one(websiteProjects, {\n    fields: [projectFeedback.projectId],\n    references: [websiteProjects.id],\n  }),\n  user: one(users, {\n    fields: [projectFeedback.userId],\n    references: [users.id],\n  }),\n}));\n\n// Analytics Metrics table (Social, Ads, Website Analytics)\nexport const analyticsMetrics = pgTable(\"analytics_metrics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").references(() => clients.id).notNull(),\n  campaignId: varchar(\"campaign_id\").references(() => campaigns.id),\n  metricType: varchar(\"metric_type\").notNull(), // social, ads, website\n  platform: varchar(\"platform\"), // facebook, instagram, google_ads, google_analytics\n  date: timestamp(\"date\").notNull(),\n  metrics: jsonb(\"metrics\").notNull(), // {followers, engagement_rate, reach, clicks, ctr, spend, roas, conversions, page_views, bounce_rate, etc}\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const analyticsMetricsRelations = relations(analyticsMetrics, ({ one }) => ({\n  client: one(clients, {\n    fields: [analyticsMetrics.clientId],\n    references: [clients.id],\n  }),\n  campaign: one(campaigns, {\n    fields: [analyticsMetrics.campaignId],\n    references: [campaigns.id],\n  }),\n}));\n\n// Zod schemas for validation\nexport const upsertUserSchema = createInsertSchema(users).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true, createdAt: true, updatedAt: true }).extend({\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\nexport const insertClientSchema = createInsertSchema(clients).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertCampaignSchema = createInsertSchema(campaigns).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertTaskSchema = createInsertSchema(tasks).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertLeadSchema = createInsertSchema(leads).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertContentPostSchema = createInsertSchema(contentPosts).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertInvoiceSchema = createInsertSchema(invoices).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertTicketSchema = createInsertSchema(tickets).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertMessageSchema = createInsertSchema(messages).omit({ id: true, createdAt: true });\nexport const insertOnboardingTaskSchema = createInsertSchema(onboardingTasks).omit({ id: true, createdAt: true });\nexport const insertClientDocumentSchema = createInsertSchema(clientDocuments).omit({ id: true, createdAt: true });\nexport const insertTaskCommentSchema = createInsertSchema(taskComments).omit({ id: true, createdAt: true });\nexport const insertLeadActivitySchema = createInsertSchema(leadActivities).omit({ id: true, createdAt: true });\nexport const insertLeadAutomationSchema = createInsertSchema(leadAutomations).omit({ id: true, createdAt: true });\nexport const insertWebsiteProjectSchema = createInsertSchema(websiteProjects).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertProjectFeedbackSchema = createInsertSchema(projectFeedback).omit({ id: true, createdAt: true });\nexport const insertAnalyticsMetricSchema = createInsertSchema(analyticsMetrics).omit({ id: true, createdAt: true });\n\n// TypeScript types\nexport type UpsertUser = z.infer<typeof upsertUserSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertClient = z.infer<typeof insertClientSchema>;\nexport type Client = typeof clients.$inferSelect;\n\nexport type InsertCampaign = z.infer<typeof insertCampaignSchema>;\nexport type Campaign = typeof campaigns.$inferSelect;\n\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\nexport type Task = typeof tasks.$inferSelect;\n\nexport type InsertLead = z.infer<typeof insertLeadSchema>;\nexport type Lead = typeof leads.$inferSelect;\n\nexport type InsertContentPost = z.infer<typeof insertContentPostSchema>;\nexport type ContentPost = typeof contentPosts.$inferSelect;\n\nexport type InsertInvoice = z.infer<typeof insertInvoiceSchema>;\nexport type Invoice = typeof invoices.$inferSelect;\n\nexport type InsertTicket = z.infer<typeof insertTicketSchema>;\nexport type Ticket = typeof tickets.$inferSelect;\n\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Message = typeof messages.$inferSelect;\n\nexport type InsertOnboardingTask = z.infer<typeof insertOnboardingTaskSchema>;\nexport type OnboardingTask = typeof onboardingTasks.$inferSelect;\n\nexport type InsertClientDocument = z.infer<typeof insertClientDocumentSchema>;\nexport type ClientDocument = typeof clientDocuments.$inferSelect;\n\nexport type InsertTaskComment = z.infer<typeof insertTaskCommentSchema>;\nexport type TaskComment = typeof taskComments.$inferSelect;\n\nexport type InsertLeadActivity = z.infer<typeof insertLeadActivitySchema>;\nexport type LeadActivity = typeof leadActivities.$inferSelect;\n\nexport type InsertLeadAutomation = z.infer<typeof insertLeadAutomationSchema>;\nexport type LeadAutomation = typeof leadAutomations.$inferSelect;\n\nexport type InsertWebsiteProject = z.infer<typeof insertWebsiteProjectSchema>;\nexport type WebsiteProject = typeof websiteProjects.$inferSelect;\n\nexport type InsertProjectFeedback = z.infer<typeof insertProjectFeedbackSchema>;\nexport type ProjectFeedback = typeof projectFeedback.$inferSelect;\n\nexport type InsertAnalyticsMetric = z.infer<typeof insertAnalyticsMetricSchema>;\nexport type AnalyticsMetric = typeof analyticsMetrics.$inferSelect;\n","size_bytes":21359},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 220 13% 18%;\n\n  --border: 220 13% 91%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 220 13% 18%;\n\n  --card-border: 220 13% 94%;\n\n  --sidebar: 220 13% 96%;\n\n  --sidebar-foreground: 220 13% 18%;\n\n  --sidebar-border: 220 13% 89%;\n\n  --sidebar-primary: 217 91% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 220 9% 88%;\n\n  --sidebar-accent-foreground: 220 13% 18%;\n\n  --sidebar-ring: 217 91% 60%;\n\n  --popover: 0 0% 99%;\n\n  --popover-foreground: 220 13% 18%;\n\n  --popover-border: 220 13% 92%;\n\n  --primary: 217 91% 60%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 220 13% 91%;\n\n  --secondary-foreground: 220 13% 18%;\n\n  --muted: 220 9% 93%;\n\n  --muted-foreground: 220 13% 35%;\n\n  --accent: 220 12% 90%;\n\n  --accent-foreground: 220 13% 18%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 220 13% 75%;\n  --ring: 217 91% 60%;\n  --chart-1: 217 91% 60%;\n  --chart-2: 25 95% 53%;\n  --chart-3: 142 71% 45%;\n  --chart-4: 38 92% 50%;\n  --chart-5: 199 89% 48%;\n\n  --font-sans: Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: \"SF Mono\", Monaco, \"Cascadia Code\", \"Roboto Mono\", Consolas, \"Courier New\", monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 13% 18% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 13% 18% / 0.08);\n  --shadow-sm: 0px 2px 4px 0px hsl(220 13% 18% / 0.06), 0px 1px 2px -1px hsl(220 13% 18% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(220 13% 18% / 0.08), 0px 2px 4px -2px hsl(220 13% 18% / 0.05);\n  --shadow-md: 0px 6px 12px -2px hsl(220 13% 18% / 0.10), 0px 3px 7px -3px hsl(220 13% 18% / 0.07);\n  --shadow-lg: 0px 10px 20px -4px hsl(220 13% 18% / 0.12), 0px 6px 12px -6px hsl(220 13% 18% / 0.08);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 13% 18% / 0.14), 0px 10px 15px -7px hsl(220 13% 18% / 0.10);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 13% 18% / 0.18);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Premium Visual Effects */\n  --orange: 25 95% 53%;\n  --purple: 250 70% 60%;\n  --glass-bg: rgba(255, 255, 255, 0.7);\n  --glass-border: rgba(255, 255, 255, 0.18);\n  --gradient-mesh: radial-gradient(at 0% 0%, hsl(217 91% 60% / 0.2) 0px, transparent 50%),\n                   radial-gradient(at 100% 100%, hsl(25 95% 53% / 0.15) 0px, transparent 50%);\n  --shimmer-gradient: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);\n}\n\n/* Floating Animation */\n@keyframes float {\n  0%, 100% {\n    transform: translateY(0px);\n  }\n  50% {\n    transform: translateY(-20px);\n  }\n}\n\n.animate-float {\n  animation: float 6s ease-in-out infinite;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 13% 18%;\n\n  --foreground: 0 0% 98%;\n\n  --border: 220 13% 28%;\n\n  --card: 220 13% 21%;\n\n  --card-foreground: 0 0% 98%;\n\n  --card-border: 220 13% 25%;\n\n  --sidebar: 220 13% 23%;\n\n  --sidebar-foreground: 0 0% 98%;\n\n  --sidebar-border: 220 13% 30%;\n\n  --sidebar-primary: 217 91% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 220 13% 28%;\n\n  --sidebar-accent-foreground: 0 0% 98%;\n\n  --sidebar-ring: 217 91% 60%;\n\n  --popover: 220 13% 25%;\n\n  --popover-foreground: 0 0% 98%;\n\n  --popover-border: 220 13% 32%;\n\n  --primary: 217 91% 60%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 220 13% 30%;\n\n  --secondary-foreground: 0 0% 98%;\n\n  --muted: 220 9% 27%;\n\n  --muted-foreground: 0 0% 75%;\n\n  --accent: 220 12% 29%;\n\n  --accent-foreground: 0 0% 98%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 220 13% 42%;\n  --ring: 217 91% 60%;\n  --chart-1: 217 91% 70%;\n  --chart-2: 25 95% 65%;\n  --chart-3: 142 71% 60%;\n  --chart-4: 38 92% 65%;\n  --chart-5: 199 89% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.25);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.22), 0px 1px 2px -1px hsl(0 0% 0% / 0.18);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.28), 0px 2px 4px -2px hsl(0 0% 0% / 0.20);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.32), 0px 3px 7px -3px hsl(0 0% 0% / 0.24);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.38), 0px 6px 12px -6px hsl(0 0% 0% / 0.28);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.42), 0px 10px 15px -7px hsl(0 0% 0% / 0.32);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.50);\n\n  /* Premium Visual Effects - Dark Mode */\n  --glass-bg: rgba(255, 255, 255, 0.05);\n  --glass-border: rgba(255, 255, 255, 0.1);\n  --gradient-mesh: radial-gradient(at 0% 0%, hsl(217 91% 70% / 0.15) 0px, transparent 50%),\n                   radial-gradient(at 100% 100%, hsl(25 95% 65% / 0.1) 0px, transparent 50%);\n  --shimmer-gradient: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  /* Premium Visual Utilities */\n  .glass {\n    background: var(--glass-bg);\n    border: 1px solid var(--glass-border);\n  }\n\n  /* Glass with blur - use sparingly for performance */\n  @media (min-width: 768px) {\n    .glass-strong {\n      background: var(--glass-bg);\n      backdrop-filter: blur(20px);\n      -webkit-backdrop-filter: blur(20px);\n      border: 1px solid var(--glass-border);\n    }\n  }\n\n  /* Mobile fallback - no blur for performance */\n  @media (max-width: 767px) {\n    .glass-strong {\n      background: hsl(var(--card));\n      border: 1px solid hsl(var(--border));\n    }\n  }\n\n  .gradient-mesh {\n    background-image: var(--gradient-mesh);\n  }\n\n  .shimmer {\n    position: relative;\n    overflow: hidden;\n  }\n\n  .shimmer::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: var(--shimmer-gradient);\n    animation: shimmer 2s infinite;\n  }\n\n  @keyframes shimmer {\n    0% { left: -100%; }\n    100% { left: 100%; }\n  }\n\n  .gradient-border {\n    position: relative;\n  }\n\n  .gradient-border::before {\n    content: '';\n    position: absolute;\n    inset: 0;\n    border-radius: inherit;\n    padding: 1px;\n    background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--orange)));\n    -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n    -webkit-mask-composite: xor;\n    mask-composite: exclude;\n    pointer-events: none;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n  }\n\n  .gradient-border:hover::before {\n    opacity: 1;\n  }\n\n  .text-gradient {\n    background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--orange)));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  .text-gradient-purple {\n    background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--purple)));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  .card-hover-lift {\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .card-hover-lift:hover {\n    transform: translateY(-4px);\n    box-shadow: \n      0 10px 20px -4px hsl(var(--primary) / 0.15),\n      0 6px 12px -6px hsl(var(--primary) / 0.1);\n  }\n\n  .gradient-bg-primary {\n    background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--purple)));\n  }\n\n  .gradient-bg-orange {\n    background: linear-gradient(135deg, hsl(var(--orange)), hsl(25 95% 63%));\n  }\n\n  .gradient-bg-success {\n    background: linear-gradient(135deg, hsl(var(--chart-3)), hsl(142 71% 55%));\n  }\n\n  .icon-gradient-bg {\n    background: linear-gradient(135deg, hsl(var(--primary) / 0.1), hsl(var(--purple) / 0.05));\n  }\n\n  /* Stagger animation for children */\n  .stagger-fade-in > * {\n    opacity: 0;\n    animation: fadeInUp 0.5s ease forwards;\n  }\n\n  .stagger-fade-in > *:nth-child(1) { animation-delay: 0.05s; }\n  .stagger-fade-in > *:nth-child(2) { animation-delay: 0.1s; }\n  .stagger-fade-in > *:nth-child(3) { animation-delay: 0.15s; }\n  .stagger-fade-in > *:nth-child(4) { animation-delay: 0.2s; }\n  .stagger-fade-in > *:nth-child(5) { animation-delay: 0.25s; }\n  .stagger-fade-in > *:nth-child(6) { animation-delay: 0.3s; }\n\n  @keyframes fadeInUp {\n    from {\n      opacity: 0;\n      transform: translateY(10px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  /* Pulse animation for important items */\n  .pulse-glow {\n    animation: pulseGlow 2s ease-in-out infinite;\n  }\n\n  @keyframes pulseGlow {\n    0%, 100% {\n      box-shadow: 0 0 0 0 hsl(var(--primary) / 0.4);\n    }\n    50% {\n      box-shadow: 0 0 20px 4px hsl(var(--primary) / 0.2);\n    }\n  }\n}","size_bytes":14650},"client/src/pages/tickets.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, AlertCircle, MessageSquare, Clock } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Ticket, Client } from \"@shared/schema\";\n\nexport default function Tickets() {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: tickets, isLoading } = useQuery<Ticket[]>({\n    queryKey: [\"/api/tickets\"],\n  });\n\n  const { data: clients } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\"],\n  });\n\n  const createTicketMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/tickets\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tickets\"] });\n      setDialogOpen(false);\n      toast({ title: \"Ticket created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create ticket\", variant: \"destructive\" });\n    },\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      return await apiRequest(\"PATCH\", `/api/tickets/${id}`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tickets\"] });\n      toast({ title: \"Ticket status updated\" });\n    },\n  });\n\n  const handleCreateTicket = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n\n    createTicketMutation.mutate({\n      clientId: formData.get(\"clientId\"),\n      subject: formData.get(\"subject\"),\n      description: formData.get(\"description\"),\n      priority: formData.get(\"priority\"),\n    });\n  };\n\n  const getStatusGradient = (status: string) => {\n    switch (status) {\n      case \"open\": return \"from-amber-500 to-orange-500\";\n      case \"in_progress\": return \"from-blue-500 to-cyan-500\";\n      case \"resolved\": return \"from-emerald-500 to-teal-500\";\n      case \"closed\": return \"from-slate-400 to-slate-500\";\n      default: return \"from-slate-400 to-slate-500\";\n    }\n  };\n\n  const getPriorityGradient = (priority: string) => {\n    return priority === \"urgent\" \n      ? \"from-red-500 to-orange-500\" \n      : \"from-blue-500 to-cyan-500\";\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-full gradient-mesh\">\n        <div className=\"p-6 lg:p-8 xl:p-12\">\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <Card key={i} className=\"p-6 border-0 shadow-lg\">\n                <div className=\"space-y-3\">\n                  <div className=\"h-5 bg-muted/50 rounded w-2/3 shimmer\"></div>\n                  <div className=\"h-4 bg-muted/50 rounded shimmer\"></div>\n                  <div className=\"h-4 bg-muted/50 rounded w-1/3 shimmer\"></div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-full gradient-mesh\">\n      <div className=\"p-6 lg:p-8 xl:p-12 space-y-8\">\n        <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n          <div className=\"space-y-2\">\n            <h1 className=\"text-4xl font-bold tracking-tight text-gradient-purple\" data-testid=\"text-page-title\">Support Tickets</h1>\n            <p className=\"text-lg text-muted-foreground\">Manage client support requests</p>\n          </div>\n          <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-ticket\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Ticket\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl glass-strong\">\n            <DialogHeader>\n              <DialogTitle className=\"text-2xl\">Create Support Ticket</DialogTitle>\n              <DialogDescription>Create a new support ticket for client assistance</DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleCreateTicket} className=\"space-y-4\">\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"clientId\">Client *</Label>\n                  <Select name=\"clientId\" required>\n                    <SelectTrigger data-testid=\"select-ticket-client\">\n                      <SelectValue placeholder=\"Select client\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {clients?.map((client) => (\n                        <SelectItem key={client.id} value={client.id}>\n                          {client.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"subject\">Subject *</Label>\n                  <Input id=\"subject\" name=\"subject\" required data-testid=\"input-subject\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"priority\">Priority *</Label>\n                  <Select name=\"priority\" defaultValue=\"normal\">\n                    <SelectTrigger data-testid=\"select-priority\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"normal\">Normal</SelectItem>\n                      <SelectItem value=\"urgent\">Urgent</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea id=\"description\" name=\"description\" rows={5} data-testid=\"input-description\" />\n                </div>\n              </div>\n              <div className=\"flex justify-end gap-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={createTicketMutation.isPending} data-testid=\"button-submit-ticket\">\n                  {createTicketMutation.isPending ? \"Creating...\" : \"Create Ticket\"}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"space-y-4\">\n        {tickets?.map((ticket) => (\n          <Card key={ticket.id} className=\"hover-elevate transition-shadow\" data-testid={`card-ticket-${ticket.id}`}>\n            <CardContent className=\"pt-6\">\n              <div className=\"space-y-3\">\n                <div className=\"flex items-start justify-between gap-4\">\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center gap-3 mb-2\">\n                      {ticket.priority === \"urgent\" && (\n                        <AlertCircle className=\"w-4 h-4 text-destructive flex-shrink-0\" />\n                      )}\n                      <h3 className=\"font-semibold truncate\">{ticket.subject}</h3>\n                    </div>\n                    {ticket.description && (\n                      <p className=\"text-sm text-muted-foreground line-clamp-2\">{ticket.description}</p>\n                    )}\n                  </div>\n                  <div className=\"flex flex-col gap-2 items-end\">\n                    <Badge className={getStatusColor(ticket.status)} variant=\"secondary\">\n                      {ticket.status.replace(\"_\", \" \")}\n                    </Badge>\n                    {ticket.priority === \"urgent\" && (\n                      <Badge className={getPriorityColor(ticket.priority)} variant=\"secondary\">\n                        {ticket.priority}\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <p className=\"text-xs text-muted-foreground\">\n                    Created {new Date(ticket.createdAt).toLocaleDateString()}\n                  </p>\n                  {ticket.status === \"open\" && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => updateStatusMutation.mutate({ id: ticket.id, status: \"in_progress\" })}\n                      data-testid={`button-start-${ticket.id}`}\n                    >\n                      Start Working\n                    </Button>\n                  )}\n                  {ticket.status === \"in_progress\" && (\n                    <Button\n                      size=\"sm\"\n                      onClick={() => updateStatusMutation.mutate({ id: ticket.id, status: \"resolved\" })}\n                      data-testid={`button-resolve-${ticket.id}`}\n                    >\n                      Mark Resolved\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {tickets?.length === 0 && (\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\">No support tickets</p>\n        </div>\n      )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":9840},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/pages/campaigns.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Calendar, DollarSign, Target } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Campaign, Client } from \"@shared/schema\";\n\nexport default function Campaigns() {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: campaigns, isLoading } = useQuery<Campaign[]>({\n    queryKey: [\"/api/campaigns\"],\n  });\n\n  const { data: clients } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\"],\n  });\n\n  const createCampaignMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/campaigns\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\"] });\n      setDialogOpen(false);\n      toast({ title: \"Campaign created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create campaign\", variant: \"destructive\" });\n    },\n  });\n\n  const handleCreateCampaign = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n\n    createCampaignMutation.mutate({\n      clientId: formData.get(\"clientId\"),\n      name: formData.get(\"name\"),\n      type: formData.get(\"type\"),\n      status: formData.get(\"status\"),\n      budget: formData.get(\"budget\") ? parseInt(formData.get(\"budget\") as string) : null,\n      description: formData.get(\"description\"),\n      goals: formData.get(\"goals\"),\n      startDate: formData.get(\"startDate\") ? new Date(formData.get(\"startDate\") as string) : null,\n      endDate: formData.get(\"endDate\") ? new Date(formData.get(\"endDate\") as string) : null,\n    });\n  };\n\n  const getStatusGradient = (status: string) => {\n    switch (status) {\n      case \"active\": return \"from-emerald-500 to-teal-500\";\n      case \"planning\": return \"from-blue-500 to-cyan-500\";\n      case \"paused\": return \"from-amber-500 to-orange-500\";\n      case \"completed\": return \"from-slate-400 to-slate-500\";\n      default: return \"from-slate-400 to-slate-500\";\n    }\n  };\n\n  const getTypeGradient = (type: string) => {\n    switch (type) {\n      case \"social\": return \"from-blue-500/20 to-cyan-500/20\";\n      case \"ads\": return \"from-orange-500/20 to-pink-500/20\";\n      case \"content\": return \"from-emerald-500/20 to-teal-500/20\";\n      case \"email\": return \"from-violet-500/20 to-purple-500/20\";\n      default: return \"from-slate-400/20 to-slate-500/20\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-full gradient-mesh\">\n        <div className=\"max-w-7xl mx-auto p-6 lg:p-8 xl:p-12\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <Card key={i} className=\"glass\">\n                <CardHeader>\n                  <div className=\"h-6 bg-muted/50 rounded w-3/4 shimmer\"></div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-4 bg-muted/50 rounded shimmer\"></div>\n                    <div className=\"h-4 bg-muted/50 rounded w-5/6 shimmer\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-full gradient-mesh\">\n      <div className=\"max-w-7xl mx-auto p-6 lg:p-8 xl:p-12 space-y-8\">\n        <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n          <div className=\"space-y-2\">\n            <h1 className=\"text-4xl font-bold tracking-tight text-gradient-purple\" data-testid=\"text-page-title\">Campaigns</h1>\n            <p className=\"text-lg text-muted-foreground\">Manage your marketing campaigns</p>\n          </div>\n        <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n          <DialogTrigger asChild>\n            <Button size=\"lg\" className=\"shadow-lg hover:shadow-xl transition-all\" data-testid=\"button-add-campaign\">\n              <Plus className=\"w-5 h-5 mr-2\" />\n              New Campaign\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl glass-strong\">\n            <DialogHeader>\n              <DialogTitle className=\"text-2xl\">Create New Campaign</DialogTitle>\n              <DialogDescription>Set up a new marketing campaign for your client</DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleCreateCampaign} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2 col-span-2\">\n                  <Label htmlFor=\"clientId\">Client *</Label>\n                  <Select name=\"clientId\" required>\n                    <SelectTrigger data-testid=\"select-campaign-client\" className=\"glass\">\n                      <SelectValue placeholder=\"Select client\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {clients?.map((client) => (\n                        <SelectItem key={client.id} value={client.id}>\n                          {client.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2 col-span-2\">\n                  <Label htmlFor=\"name\">Campaign Name *</Label>\n                  <Input id=\"name\" name=\"name\" required data-testid=\"input-campaign-name\" className=\"glass\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"type\">Type *</Label>\n                  <Select name=\"type\" required>\n                    <SelectTrigger data-testid=\"select-campaign-type\" className=\"glass\">\n                      <SelectValue placeholder=\"Select type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"social\">Social Media</SelectItem>\n                      <SelectItem value=\"ads\">Ads</SelectItem>\n                      <SelectItem value=\"content\">Content</SelectItem>\n                      <SelectItem value=\"email\">Email</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"status\">Status *</Label>\n                  <Select name=\"status\" defaultValue=\"planning\">\n                    <SelectTrigger data-testid=\"select-campaign-status\" className=\"glass\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"planning\">Planning</SelectItem>\n                      <SelectItem value=\"active\">Active</SelectItem>\n                      <SelectItem value=\"paused\">Paused</SelectItem>\n                      <SelectItem value=\"completed\">Completed</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"startDate\">Start Date</Label>\n                  <Input id=\"startDate\" name=\"startDate\" type=\"date\" data-testid=\"input-start-date\" className=\"glass\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"endDate\">End Date</Label>\n                  <Input id=\"endDate\" name=\"endDate\" type=\"date\" data-testid=\"input-end-date\" className=\"glass\" />\n                </div>\n                <div className=\"space-y-2 col-span-2\">\n                  <Label htmlFor=\"budget\">Budget ($)</Label>\n                  <Input id=\"budget\" name=\"budget\" type=\"number\" data-testid=\"input-budget\" className=\"glass\" />\n                </div>\n                <div className=\"space-y-2 col-span-2\">\n                  <Label htmlFor=\"goals\">Goals</Label>\n                  <Textarea id=\"goals\" name=\"goals\" data-testid=\"input-goals\" className=\"glass\" />\n                </div>\n                <div className=\"space-y-2 col-span-2\">\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea id=\"description\" name=\"description\" data-testid=\"input-description\" className=\"glass\" />\n                </div>\n              </div>\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={createCampaignMutation.isPending} data-testid=\"button-submit-campaign\" className=\"shadow-md\">\n                  {createCampaignMutation.isPending ? \"Creating...\" : \"Create Campaign\"}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 stagger-fade-in\">\n        {campaigns?.map((campaign) => (\n          <Card \n            key={campaign.id} \n            className=\"group relative overflow-hidden border-0 shadow-lg hover:shadow-2xl transition-all duration-300 card-hover-lift gradient-border\"\n            data-testid={`card-campaign-${campaign.id}`}\n          >\n            {/* Gradient Overlay */}\n            <div className={`absolute inset-0 bg-gradient-to-br ${getTypeGradient(campaign.type)} opacity-0 group-hover:opacity-100 transition-opacity duration-300`}></div>\n            \n            <CardHeader className=\"relative\">\n              <div className=\"flex items-start justify-between gap-2 mb-3\">\n                <CardTitle className=\"text-xl font-bold group-hover:text-primary transition-colors\">\n                  {campaign.name}\n                </CardTitle>\n                <Badge className={`bg-gradient-to-r ${getStatusGradient(campaign.status)} text-white shadow-md`}>\n                  {campaign.status}\n                </Badge>\n              </div>\n              <Badge className={`bg-gradient-to-r ${getTypeGradient(campaign.type)} border-0 w-fit shadow-sm`} variant=\"outline\">\n                {campaign.type}\n              </Badge>\n            </CardHeader>\n            <CardContent className=\"relative space-y-4\">\n              {campaign.description && (\n                <p className=\"text-sm text-muted-foreground line-clamp-2 leading-relaxed\">\n                  {campaign.description}\n                </p>\n              )}\n              \n              <div className=\"space-y-2\">\n                {campaign.budget && (\n                  <div className=\"flex items-center gap-2 p-2 rounded-lg hover-elevate transition-all\">\n                    <div className=\"w-8 h-8 rounded-lg bg-emerald-500/10 flex items-center justify-center flex-shrink-0\">\n                      <DollarSign className=\"w-4 h-4 text-emerald-600 dark:text-emerald-400\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-xs text-muted-foreground\">Budget</p>\n                      <p className=\"text-sm font-semibold font-mono\">${campaign.budget.toLocaleString()}</p>\n                    </div>\n                  </div>\n                )}\n                \n                {campaign.startDate && campaign.endDate && (\n                  <div className=\"flex items-center gap-2 p-2 rounded-lg hover-elevate transition-all\">\n                    <div className=\"w-8 h-8 rounded-lg bg-blue-500/10 flex items-center justify-center flex-shrink-0\">\n                      <Calendar className=\"w-4 h-4 text-blue-600 dark:text-blue-400\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-xs text-muted-foreground\">Duration</p>\n                      <p className=\"text-sm font-medium\">\n                        {new Date(campaign.startDate).toLocaleDateString()} - {new Date(campaign.endDate).toLocaleDateString()}\n                      </p>\n                    </div>\n                  </div>\n                )}\n\n                {campaign.goals && (\n                  <div className=\"flex items-center gap-2 p-2 rounded-lg hover-elevate transition-all\">\n                    <div className=\"w-8 h-8 rounded-lg bg-purple-500/10 flex items-center justify-center flex-shrink-0\">\n                      <Target className=\"w-4 h-4 text-purple-600 dark:text-purple-400\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-xs text-muted-foreground\">Goals</p>\n                      <p className=\"text-sm line-clamp-1\">{campaign.goals}</p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {campaigns?.length === 0 && (\n        <Card className=\"border-dashed border-2 glass-strong\">\n          <CardContent className=\"flex flex-col items-center justify-center py-16 px-6 text-center\">\n            <div className=\"w-20 h-20 rounded-full bg-gradient-to-br from-primary/20 to-purple-500/20 flex items-center justify-center mb-6 shadow-lg\">\n              <Target className=\"w-10 h-10 text-primary\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2\">No Campaigns Yet</h3>\n            <p className=\"text-muted-foreground max-w-md mb-6\">\n              Get started by creating your first marketing campaign\n            </p>\n            <Button onClick={() => setDialogOpen(true)} size=\"lg\" className=\"shadow-lg\">\n              <Plus className=\"w-5 h-5 mr-2\" />\n              Create Your First Campaign\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":14336},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/pages/dashboard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Users, Megaphone, TrendingUp, DollarSign, ArrowUpRight, ArrowDownRight, Activity, Calendar, CreditCard, CheckCircle2, ListTodo, Eye } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\n\nexport default function Dashboard() {\n  const { data: stats, isLoading } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const { data: stripeData } = useQuery({\n    queryKey: [\"/api/stripe/subscriptions\"],\n    retry: false,\n    meta: { returnNull: true }, // Don't throw error if Stripe not configured\n  });\n\n  const metrics = [\n    {\n      title: \"Total Clients\",\n      value: stats?.totalClients || 0,\n      change: \"+12%\",\n      changeType: \"positive\" as const,\n      icon: Users,\n      gradientFrom: \"from-blue-500\",\n      gradientTo: \"to-cyan-500\",\n      iconBg: \"from-blue-500/20 to-cyan-500/20\",\n    },\n    {\n      title: \"Active Campaigns\",\n      value: stats?.activeCampaigns || 0,\n      change: \"+8%\",\n      changeType: \"positive\" as const,\n      icon: Megaphone,\n      gradientFrom: \"from-orange-500\",\n      gradientTo: \"to-pink-500\",\n      iconBg: \"from-orange-500/20 to-pink-500/20\",\n    },\n    {\n      title: \"Pipeline Value\",\n      value: `$${((stats?.pipelineValue || 0) / 1000).toFixed(1)}k`,\n      change: \"+23%\",\n      changeType: \"positive\" as const,\n      icon: TrendingUp,\n      gradientFrom: \"from-emerald-500\",\n      gradientTo: \"to-teal-500\",\n      iconBg: \"from-emerald-500/20 to-teal-500/20\",\n    },\n    {\n      title: \"Revenue (MTD)\",\n      value: `$${((stats?.monthlyRevenue || 0) / 1000).toFixed(1)}k`,\n      change: \"-5%\",\n      changeType: \"negative\" as const,\n      icon: DollarSign,\n      gradientFrom: \"from-violet-500\",\n      gradientTo: \"to-purple-500\",\n      iconBg: \"from-violet-500/20 to-purple-500/20\",\n    },\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-full gradient-mesh\">\n        <div className=\"max-w-7xl mx-auto p-6 lg:p-8 xl:p-12\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {[...Array(4)].map((_, i) => (\n              <Card key={i} className=\"glass\">\n                <CardHeader className=\"pb-2\">\n                  <div className=\"h-4 bg-muted/50 rounded w-24 shimmer\"></div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-8 bg-muted/50 rounded w-16 shimmer\"></div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-full gradient-mesh\">\n      <div className=\"max-w-7xl mx-auto p-6 lg:p-8 xl:p-12 space-y-8\">\n        {/* Premium Header */}\n        <div className=\"space-y-2\">\n          <h1 className=\"text-4xl font-bold tracking-tight text-gradient-purple\" data-testid=\"text-page-title\">\n            Dashboard\n          </h1>\n          <p className=\"text-lg text-muted-foreground\">Welcome back! Here's your agency overview</p>\n        </div>\n\n        {/* Premium Metric Cards with Stagger Animation */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 stagger-fade-in\">\n          {metrics.map((metric) => (\n            <Card \n              key={metric.title} \n              className=\"group relative overflow-hidden border-0 shadow-lg hover:shadow-xl transition-all duration-300 card-hover-lift gradient-border\"\n              data-testid={`card-metric-${metric.title.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              {/* Gradient Background Overlay */}\n              <div className={`absolute inset-0 bg-gradient-to-br ${metric.iconBg} opacity-0 group-hover:opacity-100 transition-opacity duration-300`}></div>\n              \n              <CardHeader className=\"relative flex flex-row items-center justify-between gap-2 pb-3\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                  {metric.title}\n                </CardTitle>\n                <div className={`w-12 h-12 rounded-xl bg-gradient-to-br ${metric.gradientFrom} ${metric.gradientTo} flex items-center justify-center shadow-md group-hover:scale-110 transition-transform duration-300`}>\n                  <metric.icon className=\"w-6 h-6 text-white\" />\n                </div>\n              </CardHeader>\n              <CardContent className=\"relative\">\n                <div className=\"flex items-end justify-between\">\n                  <div className=\"text-4xl font-bold tracking-tight font-mono\" data-testid={`metric-${metric.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n                    {metric.value}\n                  </div>\n                  <div className={`flex items-center gap-0.5 text-sm font-semibold px-2.5 py-1 rounded-full ${\n                    metric.changeType === 'positive' \n                      ? 'bg-emerald-500/10 text-emerald-600 dark:text-emerald-400' \n                      : 'bg-rose-500/10 text-rose-600 dark:text-rose-400'\n                  }`}>\n                    {metric.changeType === 'positive' ? (\n                      <ArrowUpRight className=\"w-4 h-4\" />\n                    ) : (\n                      <ArrowDownRight className=\"w-4 h-4\" />\n                    )}\n                    <span>{metric.change}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Task Progress Section */}\n        {stats?.taskMetrics && (\n          <Card className=\"glass-strong border-0 shadow-xl overflow-hidden\">\n            <CardHeader className=\"border-b border-border/50 bg-gradient-to-r from-blue-500/5 via-transparent to-transparent\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-10 h-10 rounded-lg bg-gradient-to-br from-blue-500/20 to-cyan-500/20 flex items-center justify-center\">\n                    <ListTodo className=\"w-5 h-5 text-blue-500\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-xl font-semibold\">Task Progress</CardTitle>\n                    <p className=\"text-sm text-muted-foreground mt-0.5\">Daily work completion tracking</p>\n                  </div>\n                </div>\n                <Badge variant=\"secondary\" className=\"text-sm\">\n                  {stats.taskMetrics.completionPercentage}% Complete\n                </Badge>\n              </div>\n            </CardHeader>\n            <CardContent className=\"p-6\">\n              <div className=\"space-y-6\">\n                {/* Progress Bar */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Overall Progress</span>\n                    <span className=\"font-semibold\">\n                      {stats.taskMetrics.completed} / {stats.taskMetrics.total} Tasks\n                    </span>\n                  </div>\n                  <Progress \n                    value={stats.taskMetrics.completionPercentage} \n                    className=\"h-3\"\n                    data-testid=\"progress-task-completion\"\n                  />\n                </div>\n\n                {/* Task Stats Grid */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 pt-2\">\n                  <div className=\"flex items-center gap-3 p-3 rounded-lg bg-emerald-500/5 border border-emerald-500/10\">\n                    <div className=\"w-10 h-10 rounded-lg bg-emerald-500/20 flex items-center justify-center\">\n                      <CheckCircle2 className=\"w-5 h-5 text-emerald-600 dark:text-emerald-400\" />\n                    </div>\n                    <div>\n                      <p className=\"text-2xl font-bold text-emerald-600 dark:text-emerald-400\" data-testid=\"metric-completed-tasks\">\n                        {stats.taskMetrics.completed}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">Completed</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center gap-3 p-3 rounded-lg bg-blue-500/5 border border-blue-500/10\">\n                    <div className=\"w-10 h-10 rounded-lg bg-blue-500/20 flex items-center justify-center\">\n                      <Activity className=\"w-5 h-5 text-blue-600 dark:text-blue-400\" />\n                    </div>\n                    <div>\n                      <p className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\" data-testid=\"metric-inprogress-tasks\">\n                        {stats.taskMetrics.inProgress}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">In Progress</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center gap-3 p-3 rounded-lg bg-violet-500/5 border border-violet-500/10\">\n                    <div className=\"w-10 h-10 rounded-lg bg-violet-500/20 flex items-center justify-center\">\n                      <Eye className=\"w-5 h-5 text-violet-600 dark:text-violet-400\" />\n                    </div>\n                    <div>\n                      <p className=\"text-2xl font-bold text-violet-600 dark:text-violet-400\" data-testid=\"metric-review-tasks\">\n                        {stats.taskMetrics.review}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">In Review</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center gap-3 p-3 rounded-lg bg-amber-500/5 border border-amber-500/10\">\n                    <div className=\"w-10 h-10 rounded-lg bg-amber-500/20 flex items-center justify-center\">\n                      <ListTodo className=\"w-5 h-5 text-amber-600 dark:text-amber-400\" />\n                    </div>\n                    <div>\n                      <p className=\"text-2xl font-bold text-amber-600 dark:text-amber-400\" data-testid=\"metric-pending-tasks\">\n                        {stats.taskMetrics.pending}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">Pending</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Stripe Subscription Metrics */}\n        {stripeData && (\n          <Card className=\"glass-strong border-0 shadow-xl overflow-hidden\">\n            <CardHeader className=\"border-b border-border/50 bg-gradient-to-r from-primary/5 via-transparent to-transparent\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-10 h-10 rounded-lg bg-gradient-to-br from-primary/20 to-purple-500/20 flex items-center justify-center\">\n                    <CreditCard className=\"w-5 h-5 text-primary\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-xl font-semibold\">Subscription Overview</CardTitle>\n                    <p className=\"text-sm text-muted-foreground mt-0.5\">Active customer subscriptions from Stripe</p>\n                  </div>\n                </div>\n                <Badge variant=\"secondary\" className=\"text-sm\">\n                  {stripeData.activeSubscriptions} Active\n                </Badge>\n              </div>\n            </CardHeader>\n            <CardContent className=\"p-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm text-muted-foreground\">Total Subscriptions</p>\n                  <p className=\"text-3xl font-bold\" data-testid=\"metric-total-subscriptions\">{stripeData.totalSubscriptions}</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm text-muted-foreground\">Active Subscriptions</p>\n                  <p className=\"text-3xl font-bold text-emerald-600 dark:text-emerald-400\" data-testid=\"metric-active-subscriptions\">{stripeData.activeSubscriptions}</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm text-muted-foreground\">Monthly Recurring Revenue</p>\n                  <p className=\"text-3xl font-bold text-primary\" data-testid=\"metric-mrr\">${stripeData.mrr.toFixed(2)}</p>\n                </div>\n              </div>\n\n              {stripeData.subscriptions && stripeData.subscriptions.length > 0 && (\n                <div className=\"space-y-3\">\n                  <h4 className=\"text-sm font-medium text-muted-foreground\">Recent Subscriptions</h4>\n                  {stripeData.subscriptions.slice(0, 5).map((sub: any) => (\n                    <div key={sub.id} className=\"flex items-center justify-between p-3 rounded-lg hover-elevate transition-all\" data-testid={`subscription-${sub.id}`}>\n                      <div className=\"flex items-center gap-3\">\n                        <div className={`w-2 h-2 rounded-full ${\n                          sub.status === 'active' ? 'bg-emerald-500' : \n                          sub.status === 'canceled' ? 'bg-rose-500' : 'bg-amber-500'\n                        }`}></div>\n                        <div>\n                          <p className=\"text-sm font-medium\">{typeof sub.customerId === 'string' ? sub.customerId.slice(0, 20) : 'Customer'}</p>\n                          <p className=\"text-xs text-muted-foreground capitalize\">{sub.status}</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-sm font-semibold\">${sub.amount.toFixed(2)}</p>\n                        <p className=\"text-xs text-muted-foreground\">/{sub.interval}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Activity Sections with Premium Design */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Recent Activity */}\n          <Card className=\"glass-strong border-0 shadow-xl overflow-hidden\">\n            <CardHeader className=\"border-b border-border/50 bg-gradient-to-r from-primary/5 via-transparent to-transparent\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 rounded-lg bg-gradient-to-br from-primary/20 to-purple-500/20 flex items-center justify-center\">\n                  <Activity className=\"w-5 h-5 text-primary\" />\n                </div>\n                <CardTitle className=\"text-xl font-semibold\">Recent Activity</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent className=\"p-6\">\n              {stats?.recentActivity?.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {stats.recentActivity.map((activity: any, idx: number) => (\n                    <div key={idx} className=\"flex items-start gap-3 p-3 rounded-lg hover-elevate transition-all\">\n                      <div className={`w-2 h-2 rounded-full mt-2 ${\n                        activity.type === 'success' ? 'bg-emerald-500' : \n                        activity.type === 'warning' ? 'bg-amber-500' : 'bg-primary'\n                      }`}></div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-medium\">{activity.title}</p>\n                        <p className=\"text-xs text-muted-foreground mt-1\">{activity.time}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"py-12 text-center\">\n                  <div className=\"w-16 h-16 rounded-full bg-gradient-to-br from-primary/10 to-purple-500/10 flex items-center justify-center mx-auto mb-4\">\n                    <Activity className=\"w-8 h-8 text-primary/50\" />\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">No recent activity</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Upcoming Deadlines */}\n          <Card className=\"glass-strong border-0 shadow-xl overflow-hidden\">\n            <CardHeader className=\"border-b border-border/50 bg-gradient-to-r from-orange-500/5 via-transparent to-transparent\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 rounded-lg bg-gradient-to-br from-orange-500/20 to-pink-500/20 flex items-center justify-center\">\n                  <Calendar className=\"w-5 h-5 text-orange-500\" />\n                </div>\n                <CardTitle className=\"text-xl font-semibold\">Upcoming Deadlines</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent className=\"p-6\">\n              {stats?.upcomingDeadlines?.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {stats.upcomingDeadlines.map((deadline: any, idx: number) => (\n                    <div key={idx} className=\"flex items-start gap-3 p-3 rounded-lg hover-elevate transition-all\">\n                      <div className={`w-2 h-2 rounded-full mt-2 ${\n                        deadline.urgent ? 'bg-rose-500 pulse-glow' : 'bg-amber-500'\n                      }`}></div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-medium\">{deadline.title}</p>\n                        <p className=\"text-xs text-muted-foreground mt-1\">{deadline.date}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"py-12 text-center\">\n                  <div className=\"w-16 h-16 rounded-full bg-gradient-to-br from-orange-500/10 to-pink-500/10 flex items-center justify-center mx-auto mb-4\">\n                    <Calendar className=\"w-8 h-8 text-orange-500/50\" />\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">No upcoming deadlines</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":18382},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/pages/pipeline.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Lead, InsertLead } from \"@shared/schema\";\nimport { insertLeadSchema } from \"@shared/schema\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\nconst STAGES = [\n  { id: \"prospect\", label: \"Prospect\", gradient: \"from-blue-500 to-cyan-500\" },\n  { id: \"qualified\", label: \"Qualified\", gradient: \"from-purple-500 to-pink-500\" },\n  { id: \"proposal\", label: \"Proposal\", gradient: \"from-amber-500 to-orange-500\" },\n  { id: \"closed_won\", label: \"Closed Won\", gradient: \"from-emerald-500 to-teal-500\" },\n  { id: \"closed_lost\", label: \"Closed Lost\", gradient: \"from-slate-400 to-slate-500\" },\n];\n\nconst SOURCES = [\n  { id: \"website\", label: \"Website\" },\n  { id: \"ads\", label: \"Paid Ads\" },\n  { id: \"form\", label: \"Lead Form\" },\n  { id: \"call\", label: \"Phone Call\" },\n  { id: \"referral\", label: \"Referral\" },\n  { id: \"social\", label: \"Social Media\" },\n];\n\nconst formSchema = insertLeadSchema.extend({\n  value: z.string().optional(),\n}).omit({\n  nextFollowUp: true,\n  clientId: true,\n  assignedToId: true,\n  sourceMetadata: true,\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nexport default function Pipeline() {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      company: \"\",\n      stage: \"prospect\",\n      score: \"warm\",\n      value: \"\",\n      source: \"website\",\n      notes: \"\",\n    },\n  });\n\n  const { data: leads, isLoading } = useQuery<Lead[]>({\n    queryKey: [\"/api/leads\"],\n  });\n\n  const createLeadMutation = useMutation({\n    mutationFn: async (data: InsertLead) => {\n      return await apiRequest(\"POST\", \"/api/leads\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      setDialogOpen(false);\n      form.reset();\n      toast({ title: \"Lead created successfully\" });\n    },\n    onError: (error: any) => {\n      const errorMessage = error?.message || \"Failed to create lead\";\n      toast({ title: errorMessage, variant: \"destructive\" });\n    },\n  });\n\n  const updateLeadStageMutation = useMutation({\n    mutationFn: async ({ id, stage }: { id: string; stage: string }) => {\n      return await apiRequest(\"PATCH\", `/api/leads/${id}`, { stage });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      toast({ title: \"Lead stage updated\" });\n    },\n  });\n\n  const handleCreateLead = (values: FormValues) => {\n    const leadData: InsertLead = {\n      name: values.name,\n      email: values.email || null,\n      phone: values.phone || null,\n      company: values.company || null,\n      stage: values.stage,\n      score: values.score,\n      value: values.value ? parseInt(values.value) * 100 : null, // Convert to cents\n      source: values.source,\n      notes: values.notes || null,\n    };\n\n    createLeadMutation.mutate(leadData);\n  };\n\n  const getScoreGradient = (score: string) => {\n    switch (score) {\n      case \"hot\": return \"from-red-500 to-orange-500\";\n      case \"warm\": return \"from-amber-500 to-yellow-500\";\n      case \"cold\": return \"from-blue-500 to-cyan-500\";\n      default: return \"from-slate-400 to-slate-500\";\n    }\n  };\n\n  const leadsByStage = STAGES.map(stage => ({\n    ...stage,\n    leads: leads?.filter(lead => lead.stage === stage.id) || [],\n  }));\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-full gradient-mesh\">\n        <div className=\"p-6 lg:p-8\">\n          <div className=\"flex gap-4 overflow-x-auto pb-4\">\n            {STAGES.map(stage => (\n              <div key={stage.id} className=\"flex-shrink-0 w-80\">\n                <Card className=\"border-0 shadow-lg\">\n                  <CardHeader>\n                    <div className=\"h-6 bg-muted/50 rounded w-24 shimmer\"></div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {[...Array(2)].map((_, i) => (\n                        <div key={i} className=\"h-24 bg-muted/50 rounded shimmer\"></div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-full gradient-mesh\">\n      <div className=\"p-6 lg:p-8 xl:p-12 space-y-8\">\n        <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n          <div className=\"space-y-2\">\n            <h1 className=\"text-4xl font-bold tracking-tight text-gradient-purple\" data-testid=\"text-page-title\">Sales Pipeline</h1>\n            <p className=\"text-lg text-muted-foreground\">Track leads through your sales process</p>\n          </div>\n          <Dialog open={dialogOpen} onOpenChange={(open) => {\n            setDialogOpen(open);\n            if (!open) form.reset();\n          }}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-lead\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Lead\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl glass-strong\">\n            <DialogHeader>\n              <DialogTitle className=\"text-2xl\">Create New Lead</DialogTitle>\n              <DialogDescription>Add a new lead to your sales pipeline</DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(handleCreateLead)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Lead Name *</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-lead-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"company\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Company</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value ?? \"\"} data-testid=\"input-company\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value ?? \"\"} type=\"email\" data-testid=\"input-email\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value ?? \"\"} data-testid=\"input-phone\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"stage\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Stage *</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-stage\">\n                              <SelectValue />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {STAGES.map(stage => (\n                              <SelectItem key={stage.id} value={stage.id}>{stage.label}</SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"score\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Score *</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-score\">\n                              <SelectValue />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"hot\">Hot</SelectItem>\n                            <SelectItem value=\"warm\">Warm</SelectItem>\n                            <SelectItem value=\"cold\">Cold</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"value\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Deal Value ($)</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"number\" placeholder=\"0\" data-testid=\"input-value\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"source\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Source *</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-source\">\n                              <SelectValue />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {SOURCES.map(source => (\n                              <SelectItem key={source.id} value={source.id}>{source.label}</SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"notes\"\n                    render={({ field }) => (\n                      <FormItem className=\"col-span-2\">\n                        <FormLabel>Notes</FormLabel>\n                        <FormControl>\n                          <Textarea {...field} value={field.value ?? \"\"} data-testid=\"input-notes\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"flex justify-end gap-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setDialogOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createLeadMutation.isPending} data-testid=\"button-submit-lead\">\n                    {createLeadMutation.isPending ? \"Creating...\" : \"Create Lead\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"flex gap-4 overflow-x-auto pb-4\">\n        {leadsByStage.map((stage) => (\n          <div key={stage.id} className=\"flex-shrink-0 w-80\">\n            <Card className=\"border-0 shadow-lg\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className={`w-3 h-3 rounded-full bg-gradient-to-r ${stage.gradient} shadow-md`}></div>\n                    <CardTitle className=\"text-base font-semibold\">{stage.label}</CardTitle>\n                  </div>\n                  <Badge variant=\"secondary\" className=\"font-mono\">\n                    {stage.leads.length}\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {stage.leads.map((lead) => (\n                  <Card\n                    key={lead.id}\n                    className=\"p-4 hover-elevate cursor-pointer transition-all border-0 bg-card/50\"\n                    data-testid={`card-lead-${lead.id}`}\n                  >\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-start justify-between gap-2\">\n                        <h4 className=\"font-medium text-sm\">{lead.name}</h4>\n                        <Badge className={`bg-gradient-to-r ${getScoreGradient(lead.score)} text-white shadow-md`}>\n                          {lead.score}\n                        </Badge>\n                      </div>\n                      {lead.company && (\n                        <p className=\"text-xs text-muted-foreground\">{lead.company}</p>\n                      )}\n                      {lead.value && (\n                        <p className=\"text-sm font-semibold text-primary\">\n                          ${lead.value.toLocaleString()}\n                        </p>\n                      )}\n                      {lead.email && (\n                        <p className=\"text-xs text-muted-foreground truncate\">{lead.email}</p>\n                      )}\n                    </div>\n                  </Card>\n                ))}\n                {stage.leads.length === 0 && (\n                  <p className=\"text-sm text-muted-foreground text-center py-8\">\n                    No leads in this stage\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        ))}\n      </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/pages/landing.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { ArrowRight, CheckCircle, Star, TrendingUp, Globe, Smartphone, Palette, Brain, CreditCard, Lightbulb, Users, Target, Zap } from \"lucide-react\";\nimport mtaLogoBlue from \"@assets/mta-logo-blue.png\";\nimport heroImage from \"@assets/stock_images/marketing_analytics__1be1259a.jpg\";\nimport resultsImage from \"@assets/stock_images/woman_working_on_lap_e8e31683.jpg\";\n\nexport default function LandingPage() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b sticky top-0 z-50 bg-background/95 backdrop-blur\">\n        <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <img src={mtaLogoBlue} alt=\"Marketing Team App\" className=\"h-12 w-auto\" data-testid=\"img-logo\" />\n            <span className=\"text-xl font-bold\">Marketing Team</span>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <Link href=\"/login\">\n              <Button variant=\"ghost\" data-testid=\"button-login-header\">Login</Button>\n            </Link>\n            <Link href=\"/login\">\n              <Button className=\"gap-2 bg-orange-500 hover:bg-orange-600 text-white\" data-testid=\"button-get-started-header\">\n                Get Started\n                <ArrowRight className=\"w-4 h-4\" />\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"relative py-20 px-4 overflow-hidden bg-gradient-to-br from-blue-600 via-blue-700 to-blue-800\">\n        <div className=\"absolute inset-0 bg-[radial-gradient(circle_at_30%_50%,rgba(59,130,246,0.3),transparent_50%)]\"></div>\n        <div className=\"container mx-auto relative z-10\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <div className=\"text-white space-y-6\">\n              <Badge className=\"bg-orange-500 hover:bg-orange-600 text-white border-0 animate-pulse\">\n                Wolfpaq Marketing\n              </Badge>\n              <h1 className=\"text-5xl md:text-6xl font-bold leading-tight\">\n                Your Remote <br />\n                Digital Marketing <br />\n                <span className=\"text-green-400\">Team</span>\n              </h1>\n              <p className=\"text-lg text-blue-100\">\n                The best solution for your business and scale up to success in digital business.\n              </p>\n              <div className=\"flex gap-4 flex-wrap\">\n                <Link href=\"/login\">\n                  <Button size=\"lg\" className=\"gap-2 bg-orange-500 hover:bg-orange-600 text-white border-0\" data-testid=\"button-get-started-hero\">\n                    Discover more\n                    <ArrowRight className=\"w-5 h-5\" />\n                  </Button>\n                </Link>\n                <Link href=\"/login\">\n                  <Button size=\"lg\" variant=\"outline\" className=\"bg-white/10 border-white/20 text-white hover:bg-white/20\" data-testid=\"button-login-hero\">\n                    Client Login\n                  </Button>\n                </Link>\n              </div>\n            </div>\n            <div className=\"hidden lg:block relative\">\n              <div className=\"relative animate-float\">\n                <div className=\"absolute top-10 right-10 w-48 h-48 bg-blue-400/20 rounded-full blur-3xl\"></div>\n                <div className=\"absolute bottom-10 left-10 w-64 h-64 bg-purple-400/20 rounded-full blur-3xl\"></div>\n                <img \n                  src={heroImage} \n                  alt=\"Marketing Dashboard Analytics\" \n                  className=\"relative z-10 w-full h-auto rounded-lg shadow-2xl transform hover:scale-105 transition-transform duration-500\"\n                  data-testid=\"img-hero-dashboard\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Services Grid */}\n      <section className=\"py-16 px-4 -mt-16 relative z-20\">\n        <div className=\"container mx-auto\">\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card className=\"p-6 bg-white hover-elevate transition-all duration-300 transform hover:-translate-y-1\">\n              <div className=\"w-16 h-16 rounded-full bg-red-50 flex items-center justify-center mb-4\">\n                <TrendingUp className=\"w-8 h-8 text-red-500\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">Digital Marketing</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Ignite your brand's digital presence with our savvy digital marketing strategies.\n              </p>\n            </Card>\n            <Card className=\"p-6 bg-white hover-elevate transition-all duration-300 transform hover:-translate-y-1\">\n              <div className=\"w-16 h-16 rounded-full bg-orange-50 flex items-center justify-center mb-4\">\n                <Globe className=\"w-8 h-8 text-orange-500\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">Web Development</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Embark on a digital journey with our web wizards, crafting visually stunning websites.\n              </p>\n            </Card>\n            <Card className=\"p-6 bg-white hover-elevate transition-all duration-300 transform hover:-translate-y-1\">\n              <div className=\"w-16 h-16 rounded-full bg-blue-50 flex items-center justify-center mb-4\">\n                <Smartphone className=\"w-8 h-8 text-blue-500\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">Mobile App</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Transform your dreams into app reality with sleek, user-friendly mobile applications.\n              </p>\n            </Card>\n            <Card className=\"p-6 bg-white hover-elevate transition-all duration-300 transform hover:-translate-y-1\">\n              <div className=\"w-16 h-16 rounded-full bg-green-50 flex items-center justify-center mb-4\">\n                <Palette className=\"w-8 h-8 text-green-500\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">Graphics Design</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Unleash the power of visual storytelling with eye-catching designs.\n              </p>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* About Section */}\n      <section className=\"py-20 px-4\">\n        <div className=\"container mx-auto max-w-6xl\">\n          <div className=\"text-center mb-12\">\n            <p className=\"text-sm font-semibold text-red-500 uppercase tracking-wider mb-2\">About Us</p>\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">\n              Navigate the digital landscape with Marketing Team App,<br />\n              the epitome of sophistication in digital marketing services.\n            </h2>\n            <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\">\n              At Marketing Team App, we orchestrate strategies that seamlessly integrate innovation and financial impact, \n              ensuring your business stands at the forefront of digital success.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8 mt-16\">\n            <Card className=\"p-8 text-center border-2 hover-elevate transition-all\">\n              <div className=\"text-5xl font-bold text-blue-600 mb-2\">4.9+</div>\n              <div className=\"flex justify-center gap-1 mb-2\">\n                {[1, 2, 3, 4, 5].map((i) => (\n                  <Star key={i} className=\"w-4 h-4 fill-orange-500 text-orange-500\" />\n                ))}\n              </div>\n              <p className=\"text-sm font-semibold mb-1\">Customer Review</p>\n              <p className=\"text-xs text-muted-foreground\">Trusted by over 1000 clients</p>\n            </Card>\n\n            <Card className=\"p-8 text-center border-2 hover-elevate transition-all\">\n              <div className=\"text-5xl font-bold text-blue-600 mb-2\">A+</div>\n              <div className=\"flex justify-center gap-1 mb-2\">\n                {[1, 2, 3, 4, 5].map((i) => (\n                  <Star key={i} className=\"w-4 h-4 fill-orange-500 text-orange-500\" />\n                ))}\n              </div>\n              <p className=\"text-sm font-semibold mb-1\">Business Class</p>\n              <p className=\"text-xs text-muted-foreground\">Partnering with over 1,000 enterprises</p>\n            </Card>\n\n            <Card className=\"p-8 text-center border-2 hover-elevate transition-all\">\n              <div className=\"text-5xl font-bold text-blue-600 mb-2\">15+</div>\n              <p className=\"text-sm font-semibold mb-1\">Years Experience</p>\n              <p className=\"text-xs text-muted-foreground\">Industry expertise</p>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Amplify Section - Blue Background */}\n      <section className=\"py-20 px-4 bg-gradient-to-br from-blue-600 to-blue-800 text-white\">\n        <div className=\"container mx-auto max-w-6xl\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-8 text-center\">Amplify Your Brand's Impact</h2>\n          <p className=\"text-lg text-blue-100 text-center max-w-3xl mx-auto mb-12\">\n            Let's give your brand a digital makeover! At Marketing Team App, we use smart strategies in Digital Marketing, \n            cool designs in Web Development and Graphics, and user-friendly Mobile Apps to make your brand shine online.\n          </p>\n\n          <div className=\"grid md:grid-cols-4 gap-8 mb-16\">\n            <div className=\"text-center\">\n              <div className=\"text-5xl font-bold mb-2\">60%+</div>\n              <p className=\"text-blue-100\">Hours of Expertise</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-5xl font-bold mb-2\">90%+</div>\n              <p className=\"text-blue-100\">Retention Rate</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-5xl font-bold mb-2\">31%+</div>\n              <p className=\"text-blue-100\">Average Traffic Increase</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-5xl font-bold mb-2\">7M+</div>\n              <p className=\"text-blue-100\">Calls Generated</p>\n            </div>\n          </div>\n\n          <Card className=\"p-12 bg-white text-foreground\">\n            <div className=\"text-center\">\n              <h3 className=\"text-3xl font-bold mb-4\">Your vision, our platform</h3>\n              <p className=\"text-muted-foreground mb-8 max-w-2xl mx-auto\">\n                Join us in transforming ideas into digital excellence, and together, we'll rock the online world.\n              </p>\n              <Link href=\"/login\">\n                <Button size=\"lg\" className=\"gap-2 bg-blue-600 hover:bg-blue-700 text-white\">\n                  Get Started\n                  <ArrowRight className=\"w-5 h-5\" />\n                </Button>\n              </Link>\n            </div>\n          </Card>\n        </div>\n      </section>\n\n      {/* Services Detailed */}\n      <section className=\"py-20 px-4\">\n        <div className=\"container mx-auto max-w-6xl\">\n          <div className=\"text-center mb-12\">\n            <p className=\"text-sm font-semibold text-red-500 uppercase tracking-wider mb-2\">What We Offer</p>\n            <h2 className=\"text-3xl md:text-4xl font-bold\">\n              Helping you deliver a better customer experience\n            </h2>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[\n              { icon: TrendingUp, title: \"Digital Marketing\", desc: \"Elevate your online presence with strategic and result-driven solutions.\", color: \"red\" },\n              { icon: Globe, title: \"Web Design & Development\", desc: \"Craft visually appealing and functional websites that resonate with your brand.\", color: \"orange\" },\n              { icon: Smartphone, title: \"Mobile App Development\", desc: \"Transform ideas into reality with user-friendly and innovative mobile apps.\", color: \"blue\" },\n              { icon: Palette, title: \"Graphic Design\", desc: \"Bring your brand to life with captivating visual elements and designs.\", color: \"green\" },\n              { icon: Brain, title: \"AI Automation\", desc: \"Harness AI to streamline processes and enhance efficiency.\", color: \"purple\" },\n              { icon: CreditCard, title: \"Payment Solution\", desc: \"Comprehensive payment solutions tailored to your business needs.\", color: \"indigo\" },\n            ].map((service, idx) => (\n              <Card key={idx} className=\"p-6 hover-elevate transition-all duration-300 transform hover:-translate-y-1\">\n                <div className={`w-12 h-12 rounded-full bg-${service.color}-100 flex items-center justify-center mb-4`}>\n                  <service.icon className={`w-6 h-6 text-${service.color}-600`} />\n                </div>\n                <h3 className=\"text-lg font-semibold mb-2\">{service.title}</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">{service.desc}</p>\n                <Link href=\"/login\">\n                  <Button variant=\"ghost\" size=\"sm\" className=\"gap-2 text-blue-600\" data-testid={`button-learn-more-${idx}`}>\n                    Learn more\n                    <ArrowRight className=\"w-4 h-4\" />\n                  </Button>\n                </Link>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Getting Real Results */}\n      <section className=\"py-20 px-4\">\n        <div className=\"container mx-auto max-w-6xl\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <div className=\"relative\">\n              <img \n                src={resultsImage} \n                alt=\"Remote Team Digital Marketing\" \n                className=\"w-full h-auto rounded-lg shadow-xl\"\n                data-testid=\"img-results-illustration\"\n              />\n            </div>\n            <div className=\"space-y-6\">\n              <h2 className=\"text-3xl md:text-4xl font-bold\">Getting you those real results</h2>\n              <p className=\"text-muted-foreground\">\n                Skyrocketing your results through expert Digital Marketing, cutting-edge Web Development, \n                innovative Mobile Apps, and striking Graphics Design. Let's bring your vision to life!\n              </p>\n              <div className=\"space-y-4\">\n                {[\n                  { icon: Lightbulb, title: \"Proven Expertise\", desc: \"Choose Marketing Team App for seasoned professionals delivering tangible results in digital marketing, showcasing a commitment to excellence and navigating diverse trends.\" },\n                  { icon: Users, title: \"Comprehensive Services\", desc: \"Opt for Marketing Team App's one-stop solution, providing Digital Marketing, Web Development, Mobile App, and Graphic Design services for a cohesive and impactful brand identity.\" },\n                  { icon: Target, title: \"Client-Centric Approach\", desc: \"Partner with Marketing Team App for a client-centric philosophy, tailoring strategies to align with your specific business objectives and fostering long-term partnerships built on trust and transparency.\" },\n                  { icon: Zap, title: \"Innovation and Adaptability\", desc: \"Select Marketing Team App for a commitment to innovation and adaptability in the ever-evolving digital landscape, ensuring your business stays ahead in the competitive online environment.\" },\n                ].map((item, idx) => (\n                  <div key={idx} className=\"flex gap-4\">\n                    <div className=\"w-10 h-10 rounded-full bg-green-100 flex items-center justify-center flex-shrink-0\">\n                      <item.icon className=\"w-5 h-5 text-green-600\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold mb-1\">{item.title}</h3>\n                      <p className=\"text-sm text-muted-foreground\">{item.desc}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials */}\n      <section className=\"py-20 px-4 bg-muted/30\">\n        <div className=\"container mx-auto max-w-6xl\">\n          <div className=\"text-center mb-12\">\n            <p className=\"text-sm font-semibold text-red-500 uppercase tracking-wider mb-2\">Testimonial</p>\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">What our customers say about us</h2>\n            <div className=\"flex items-center justify-center gap-2\">\n              <span className=\"text-lg font-semibold\">4.7 (Client Reviews)</span>\n              <div className=\"flex gap-1\">\n                {[1, 2, 3, 4, 5].map((i) => (\n                  <Star key={i} className=\"w-5 h-5 fill-orange-500 text-orange-500\" />\n                ))}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            {[\n              {\n                quote: \"Marketing Team App turned my small business into an online sensation! Their digital marketing strategies were spot-on, and the website they developed perfectly encapsulated our brand. Grateful for their expertise!\",\n                name: \"John D.\",\n                role: \"Small Business Owner\",\n                initial: \"JD\"\n              },\n              {\n                quote: \"Choosing Marketing Team App for my startup's digital needs was a game-changer. The personalized support and user-friendly mobile app they crafted exceeded my expectations. Highly recommended!\",\n                name: \"Emily M.\",\n                role: \"Startup Enthusiast\",\n                initial: \"EM\"\n              },\n              {\n                quote: \"Marketing Team App took my e-commerce venture to new heights! Their comprehensive digital marketing strategies significantly boosted sales, and the sleek web development work transformed our online store. Truly impressed!\",\n                name: \"Sarah L.\",\n                role: \"E-commerce Entrepreneur\",\n                initial: \"SL\"\n              },\n              {\n                quote: \"Impressed by Marketing Team App's professionalism! Their personalized approach to digital marketing significantly boosted our online visibility. The mobile app they developed is user-friendly and innovative. Highly satisfied!\",\n                name: \"Michael R.\",\n                role: \"Tech Startup Founder\",\n                initial: \"MR\"\n              },\n            ].map((testimonial, idx) => (\n              <Card key={idx} className=\"p-6 hover-elevate transition-all\">\n                <p className=\"text-muted-foreground mb-6 italic\">\"{testimonial.quote}\"</p>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-12 h-12 rounded-full bg-blue-100 flex items-center justify-center\">\n                    <span className=\"font-semibold text-blue-600\">{testimonial.initial}</span>\n                  </div>\n                  <div>\n                    <p className=\"font-semibold\">{testimonial.name}</p>\n                    <p className=\"text-sm text-muted-foreground\">{testimonial.role}</p>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 px-4 bg-gradient-to-br from-blue-600 to-blue-800 text-white\">\n        <div className=\"container mx-auto text-center max-w-3xl\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-6\">Share Your Project Details!</h2>\n          <p className=\"text-lg mb-8 text-blue-100\">\n            Initiate a conversation about your vision and goals with Marketing Team App, where our experts \n            are eager to discuss your project and tailor a strategy that aligns with your business objectives.\n          </p>\n          <Link href=\"/login\">\n            <Button size=\"lg\" className=\"gap-2 bg-orange-500 hover:bg-orange-600 text-white border-0\" data-testid=\"button-cta-get-started\">\n              Get Started\n              <ArrowRight className=\"w-5 h-5\" />\n            </Button>\n          </Link>\n        </div>\n      </section>\n\n      {/* Newsletter Section */}\n      <section className=\"py-16 px-4 bg-gradient-to-br from-blue-600 to-blue-800 text-white\">\n        <div className=\"container mx-auto max-w-4xl\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-2xl md:text-3xl font-bold mb-2\">\n              Subscribe to our newsletter to get latest news on your inbox.\n            </h2>\n          </div>\n          <div className=\"flex gap-4 max-w-md mx-auto\">\n            <Input \n              type=\"text\" \n              placeholder=\"Name\" \n              className=\"bg-white text-foreground\"\n              data-testid=\"input-newsletter-name\"\n            />\n            <Input \n              type=\"email\" \n              placeholder=\"Email\" \n              className=\"bg-white text-foreground\"\n              data-testid=\"input-newsletter-email\"\n            />\n            <Button className=\"bg-orange-500 hover:bg-orange-600 text-white border-0 whitespace-nowrap\" data-testid=\"button-newsletter-submit\">\n              Submit\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"border-t py-12 px-4 bg-background\">\n        <div className=\"container mx-auto max-w-6xl\">\n          <div className=\"grid md:grid-cols-4 gap-8 mb-8\">\n            <div>\n              <img src={mtaLogoBlue} alt=\"Marketing Team App\" className=\"h-12 w-auto mb-4\" />\n              <p className=\"text-sm text-muted-foreground\">\n                Navigate the digital landscape with Marketing Team App, the epitome of sophistication in digital marketing services.\n              </p>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-4\">Services</h3>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li className=\"hover:text-primary transition-colors cursor-pointer\">Digital Marketing</li>\n                <li className=\"hover:text-primary transition-colors cursor-pointer\">Web Development</li>\n                <li className=\"hover:text-primary transition-colors cursor-pointer\">Mobile App Development</li>\n                <li className=\"hover:text-primary transition-colors cursor-pointer\">Graphic Design</li>\n                <li className=\"hover:text-primary transition-colors cursor-pointer\">AI Automation</li>\n              </ul>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-4\">Quick Links</h3>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li><Link href=\"/login\" className=\"hover:text-primary transition-colors\">Login</Link></li>\n                <li className=\"hover:text-primary transition-colors cursor-pointer\">About Us</li>\n                <li className=\"hover:text-primary transition-colors cursor-pointer\">Contact Us</li>\n                <li className=\"hover:text-primary transition-colors cursor-pointer\">Privacy Policy</li>\n              </ul>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-4\">Company</h3>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li className=\"hover:text-primary transition-colors cursor-pointer\">About us</li>\n                <li className=\"hover:text-primary transition-colors cursor-pointer\">Leadership</li>\n                <li className=\"hover:text-primary transition-colors cursor-pointer\">Careers</li>\n                <li className=\"hover:text-primary transition-colors cursor-pointer\">Legal Notice</li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"border-t pt-8 text-center text-sm text-muted-foreground\">\n            Copyright Â© 2025 Marketing Team App, All rights reserved.\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":24336},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { storage } from \"./storage\";\nimport { isAuthenticated } from \"./auth\";\nimport { ObjectStorageService } from \"./objectStorage\";\nimport { requireRole, requirePermission, UserRole, rolePermissions } from \"./rbac\";\nimport {\n  insertClientSchema,\n  insertCampaignSchema,\n  insertTaskSchema,\n  insertTaskCommentSchema,\n  insertLeadSchema,\n  insertContentPostSchema,\n  insertInvoiceSchema,\n  insertTicketSchema,\n  insertMessageSchema,\n  insertClientDocumentSchema,\n  insertWebsiteProjectSchema,\n  insertProjectFeedbackSchema,\n  insertAnalyticsMetricSchema,\n  insertLeadActivitySchema,\n  insertLeadAutomationSchema,\n} from \"@shared/schema\";\nimport { z, ZodError } from \"zod\";\nimport Stripe from \"stripe\";\n\nconst objectStorageService = new ObjectStorageService();\n\n// Initialize Stripe if keys are present\nlet stripe: Stripe | null = null;\nif (process.env.STRIPE_SECRET_KEY) {\n  stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n    apiVersion: \"2024-11-20.acacia\",\n  });\n}\n\nfunction handleValidationError(error: unknown, res: Response) {\n  if (error instanceof ZodError) {\n    return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n  }\n  console.error(error);\n  return res.status(500).json({ message: \"Internal server error\" });\n}\n\nexport function registerRoutes(app: Express) {\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", isAuthenticated, async (_req: Request, res: Response) => {\n    try {\n      // Batch all data fetches in parallel for performance\n      const [clients, campaigns, leads, invoices, tasks, tickets, contentPosts, websiteProjects] = await Promise.all([\n        storage.getClients(),\n        storage.getCampaigns(),\n        storage.getLeads(),\n        storage.getInvoices(),\n        storage.getTasks(),\n        storage.getTickets(),\n        storage.getContentPosts(),\n        storage.getWebsiteProjects(),\n      ]);\n\n      const activeCampaigns = campaigns.filter((c) => c.status === \"active\").length;\n      const pipelineValue = leads.reduce((sum, lead) => sum + (lead.value || 0), 0);\n      const monthlyRevenue = invoices\n        .filter((inv) => inv.status === \"paid\")\n        .reduce((sum, inv) => sum + inv.amount, 0);\n\n      // Task metrics\n      const totalTasks = tasks.length;\n      const completedTasks = tasks.filter((t) => t.status === \"completed\").length;\n      const pendingTasks = tasks.filter((t) => t.status === \"todo\").length;\n      const inProgressTasks = tasks.filter((t) => t.status === \"in_progress\").length;\n      const reviewTasks = tasks.filter((t) => t.status === \"review\").length;\n      const completionPercentage = totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0;\n\n      // Recent Activity Feed - collect activities from all sources\n      const recentActivity: any[] = [];\n\n      // Client activities (sort by timestamp, then take most recent)\n      [...clients]\n        .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n        .slice(0, 5)\n        .forEach(client => {\n          recentActivity.push({\n            type: 'success',\n            title: `New client added: ${client.name}`,\n            time: formatActivityTime(client.createdAt),\n            timestamp: client.createdAt,\n          });\n        });\n\n      // Campaign activities\n      [...campaigns]\n        .sort((a, b) => new Date(b.updatedAt || b.createdAt).getTime() - new Date(a.updatedAt || a.createdAt).getTime())\n        .slice(0, 5)\n        .forEach(campaign => {\n          const client = clients.find(c => c.id === campaign.clientId);\n          recentActivity.push({\n            type: 'info',\n            title: `Campaign ${campaign.status}: ${campaign.name}${client ? ` for ${client.name}` : ''}`,\n            time: formatActivityTime(campaign.updatedAt || campaign.createdAt),\n            timestamp: campaign.updatedAt || campaign.createdAt,\n          });\n        });\n\n      // Task activities (completed tasks)\n      [...tasks]\n        .filter(t => t.status === 'completed')\n        .sort((a, b) => new Date(b.completedAt || b.updatedAt).getTime() - new Date(a.completedAt || a.updatedAt).getTime())\n        .slice(0, 5)\n        .forEach(task => {\n          recentActivity.push({\n            type: 'success',\n            title: `Task completed: ${task.title}`,\n            time: formatActivityTime(task.completedAt || task.updatedAt),\n            timestamp: task.completedAt || task.updatedAt,\n          });\n        });\n\n      // Lead activities\n      [...leads]\n        .sort((a, b) => new Date(b.updatedAt || b.createdAt).getTime() - new Date(a.updatedAt || a.createdAt).getTime())\n        .slice(0, 5)\n        .forEach(lead => {\n          const statusColors: any = { 'prospect': 'info', 'qualified': 'warning', 'proposal': 'warning', 'closed': 'success', 'lost': 'error' };\n          recentActivity.push({\n            type: statusColors[lead.stage] || 'info',\n            title: `Lead ${lead.stage}: ${lead.name} - $${lead.value || 0}`,\n            time: formatActivityTime(lead.updatedAt || lead.createdAt),\n            timestamp: lead.updatedAt || lead.createdAt,\n          });\n        });\n\n      // Invoice activities\n      [...invoices]\n        .filter(inv => inv.status === 'paid')\n        .sort((a, b) => new Date(b.updatedAt || b.createdAt).getTime() - new Date(a.updatedAt || a.createdAt).getTime())\n        .slice(0, 3)\n        .forEach(invoice => {\n          const client = clients.find(c => c.id === invoice.clientId);\n          recentActivity.push({\n            type: 'success',\n            title: `Invoice paid: $${invoice.amount}${client ? ` from ${client.name}` : ''}`,\n            time: formatActivityTime(invoice.updatedAt || invoice.createdAt),\n            timestamp: invoice.updatedAt || invoice.createdAt,\n          });\n        });\n\n      // Ticket activities\n      [...tickets]\n        .sort((a, b) => new Date(b.updatedAt || b.createdAt).getTime() - new Date(a.updatedAt || a.createdAt).getTime())\n        .slice(0, 5)\n        .forEach(ticket => {\n          const statusColors: any = { 'open': 'warning', 'in_progress': 'info', 'resolved': 'success', 'closed': 'info' };\n          recentActivity.push({\n            type: statusColors[ticket.status] || 'info',\n            title: `Support ticket ${ticket.status}: ${ticket.subject}`,\n            time: formatActivityTime(ticket.updatedAt || ticket.createdAt),\n            timestamp: ticket.updatedAt || ticket.createdAt,\n          });\n        });\n\n      // Content activities\n      [...contentPosts]\n        .sort((a, b) => new Date(b.updatedAt || b.createdAt).getTime() - new Date(a.updatedAt || a.createdAt).getTime())\n        .slice(0, 3)\n        .forEach(post => {\n          const statusColors: any = { 'draft': 'info', 'pending': 'warning', 'approved': 'success', 'published': 'success', 'rejected': 'error' };\n          recentActivity.push({\n            type: statusColors[post.status] || 'info',\n            title: `Content ${post.status}: ${post.title}`,\n            time: formatActivityTime(post.updatedAt || post.createdAt),\n            timestamp: post.updatedAt || post.createdAt,\n          });\n        });\n\n      // Website project activities\n      [...websiteProjects]\n        .sort((a, b) => new Date(b.updatedAt || b.createdAt).getTime() - new Date(a.updatedAt || a.createdAt).getTime())\n        .slice(0, 3)\n        .forEach(project => {\n          const client = clients.find(c => c.id === project.clientId);\n          recentActivity.push({\n            type: 'info',\n            title: `Website project ${project.stage}: ${project.name}${client ? ` for ${client.name}` : ''}`,\n            time: formatActivityTime(project.updatedAt || project.createdAt),\n            timestamp: project.updatedAt || project.createdAt,\n          });\n        });\n\n      // Sort by timestamp (most recent first) and limit to 10\n      const sortedActivity = recentActivity\n        .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n        .slice(0, 10);\n\n      // Upcoming Deadlines\n      const upcomingDeadlines: any[] = [];\n      \n      // Tasks with due dates\n      tasks\n        .filter(t => t.dueDate && t.status !== 'completed')\n        .forEach(task => {\n          const daysUntil = Math.floor((new Date(task.dueDate).getTime() - Date.now()) / (1000 * 60 * 60 * 24));\n          upcomingDeadlines.push({\n            title: task.title,\n            date: formatDeadlineDate(task.dueDate),\n            urgent: daysUntil <= 3,\n            timestamp: task.dueDate,\n          });\n        });\n\n      // Sort deadlines by date and limit to 5\n      const sortedDeadlines = upcomingDeadlines\n        .sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime())\n        .slice(0, 5);\n\n      res.json({\n        totalClients: clients.length,\n        activeCampaigns,\n        pipelineValue,\n        monthlyRevenue,\n        recentActivity: sortedActivity,\n        upcomingDeadlines: sortedDeadlines,\n        taskMetrics: {\n          total: totalTasks,\n          completed: completedTasks,\n          pending: pendingTasks,\n          inProgress: inProgressTasks,\n          review: reviewTasks,\n          completionPercentage,\n        },\n      });\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Helper functions for formatting\n  function formatActivityTime(date: Date | null | undefined): string {\n    if (!date) return 'Just now';\n    const now = new Date();\n    const activityDate = new Date(date);\n    const diffMs = now.getTime() - activityDate.getTime();\n    const diffMins = Math.floor(diffMs / 60000);\n    const diffHours = Math.floor(diffMs / 3600000);\n    const diffDays = Math.floor(diffMs / 86400000);\n\n    if (diffMins < 1) return 'Just now';\n    if (diffMins < 60) return `${diffMins} minute${diffMins !== 1 ? 's' : ''} ago`;\n    if (diffHours < 24) return `${diffHours} hour${diffHours !== 1 ? 's' : ''} ago`;\n    if (diffDays < 7) return `${diffDays} day${diffDays !== 1 ? 's' : ''} ago`;\n    return activityDate.toLocaleDateString();\n  }\n\n  function formatDeadlineDate(date: Date | null | undefined): string {\n    if (!date) return '';\n    const deadline = new Date(date);\n    const now = new Date();\n    const diffDays = Math.floor((deadline.getTime() - now.getTime()) / 86400000);\n\n    if (diffDays < 0) return `Overdue by ${Math.abs(diffDays)} day${Math.abs(diffDays) !== 1 ? 's' : ''}`;\n    if (diffDays === 0) return 'Due today';\n    if (diffDays === 1) return 'Due tomorrow';\n    if (diffDays < 7) return `Due in ${diffDays} days`;\n    return `Due ${deadline.toLocaleDateString()}`;\n  }\n\n  // Stripe subscription stats\n  app.get(\"/api/stripe/subscriptions\", isAuthenticated, requireRole(UserRole.ADMIN, UserRole.STAFF), async (_req: Request, res: Response) => {\n    try {\n      if (!stripe) {\n        return res.status(503).json({ message: \"Stripe is not configured\" });\n      }\n\n      // Fetch all subscriptions from Stripe (without expanding to avoid PII leaks)\n      const subscriptions = await stripe.subscriptions.list({\n        limit: 100,\n      });\n\n      // Calculate metrics\n      const activeSubscriptions = subscriptions.data.filter(sub => sub.status === 'active');\n      \n      // Calculate MRR properly: sum all items, account for quantity and interval\n      const mrr = activeSubscriptions.reduce((sum, sub) => {\n        const subscriptionMrr = sub.items.data.reduce((itemSum, item) => {\n          const unitAmount = (item.price.unit_amount || 0) / 100;\n          const quantity = item.quantity || 1;\n          const interval = item.price.recurring?.interval;\n          \n          // Convert to monthly\n          let monthlyAmount = unitAmount * quantity;\n          if (interval === 'year') {\n            monthlyAmount = monthlyAmount / 12;\n          } else if (interval !== 'month') {\n            monthlyAmount = 0; // Ignore non-monthly/yearly intervals\n          }\n          \n          return itemSum + monthlyAmount;\n        }, 0);\n        \n        return sum + subscriptionMrr;\n      }, 0);\n\n      res.json({\n        totalSubscriptions: subscriptions.data.length,\n        activeSubscriptions: activeSubscriptions.length,\n        mrr,\n        subscriptions: subscriptions.data.map(sub => {\n          const firstItem = sub.items.data[0];\n          return {\n            id: sub.id,\n            customerId: typeof sub.customer === 'string' ? sub.customer : sub.customer?.id || '',\n            status: sub.status,\n            amount: (firstItem?.price?.unit_amount || 0) / 100,\n            interval: firstItem?.price?.recurring?.interval,\n            currentPeriodEnd: sub.current_period_end,\n            cancelAtPeriodEnd: sub.cancel_at_period_end,\n          };\n        }),\n      });\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to fetch Stripe subscriptions\" });\n    }\n  });\n\n  // Get subscription for a specific client\n  app.get(\"/api/stripe/client/:clientId/subscription\", isAuthenticated, requirePermission(\"canManageInvoices\"), async (req: Request, res: Response) => {\n    try {\n      if (!stripe) {\n        return res.status(503).json({ message: \"Stripe is not configured\" });\n      }\n\n      const client = await storage.getClient(req.params.clientId);\n      if (!client) {\n        return res.status(404).json({ message: \"Client not found\" });\n      }\n\n      if (!client.stripeSubscriptionId) {\n        return res.json({ subscription: null });\n      }\n\n      const subscription = await stripe.subscriptions.retrieve(client.stripeSubscriptionId, {\n        expand: ['customer', 'latest_invoice'],\n      });\n\n      res.json({\n        subscription: {\n          id: subscription.id,\n          status: subscription.status,\n          amount: (subscription.items.data[0]?.price?.unit_amount || 0) / 100,\n          interval: subscription.items.data[0]?.price?.recurring?.interval,\n          currentPeriodEnd: subscription.current_period_end,\n          cancelAtPeriodEnd: subscription.cancel_at_period_end,\n          customer: subscription.customer,\n        },\n      });\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to fetch client subscription\" });\n    }\n  });\n\n  // Client routes\n  app.get(\"/api/clients\", isAuthenticated, requirePermission(\"canManageClients\"), async (_req: Request, res: Response) => {\n    try {\n      const clients = await storage.getClients();\n      res.json(clients);\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to fetch clients\" });\n    }\n  });\n\n  app.get(\"/api/clients/:id\", isAuthenticated, requirePermission(\"canManageClients\"), async (req: Request, res: Response) => {\n    try {\n      const client = await storage.getClient(req.params.id);\n      if (!client) {\n        return res.status(404).json({ message: \"Client not found\" });\n      }\n      res.json(client);\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to fetch client\" });\n    }\n  });\n\n  app.post(\"/api/clients\", isAuthenticated, requirePermission(\"canManageClients\"), async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertClientSchema.parse(req.body);\n      const client = await storage.createClient(validatedData);\n      res.status(201).json(client);\n    } catch (error) {\n      handleValidationError(error, res);\n    }\n  });\n\n  app.patch(\"/api/clients/:id\", isAuthenticated, requirePermission(\"canManageClients\"), async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertClientSchema.partial().strip().parse(req.body);\n      const client = await storage.updateClient(req.params.id, validatedData);\n      res.json(client);\n    } catch (error: any) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      if (error.message?.includes(\"not found\")) {\n        return res.status(404).json({ message: error.message });\n      }\n      console.error(error);\n      res.status(500).json({ message: \"Failed to update client\" });\n    }\n  });\n\n  app.delete(\"/api/clients/:id\", isAuthenticated, requirePermission(\"canManageClients\"), async (req: Request, res: Response) => {\n    try {\n      await storage.deleteClient(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to delete client\" });\n    }\n  });\n\n  // Campaign routes\n  app.get(\"/api/campaigns\", isAuthenticated, requirePermission(\"canManageCampaigns\"), async (_req: Request, res: Response) => {\n    try {\n      const campaigns = await storage.getCampaigns();\n      res.json(campaigns);\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to fetch campaigns\" });\n    }\n  });\n\n  app.post(\"/api/campaigns\", isAuthenticated, requirePermission(\"canManageCampaigns\"), async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertCampaignSchema.parse(req.body);\n      const campaign = await storage.createCampaign(validatedData);\n      res.status(201).json(campaign);\n    } catch (error) {\n      handleValidationError(error, res);\n    }\n  });\n\n  app.patch(\"/api/campaigns/:id\", isAuthenticated, requirePermission(\"canManageCampaigns\"), async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertCampaignSchema.partial().strip().parse(req.body);\n      const campaign = await storage.updateCampaign(req.params.id, validatedData);\n      res.json(campaign);\n    } catch (error: any) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      if (error.message?.includes(\"not found\")) {\n        return res.status(404).json({ message: error.message });\n      }\n      console.error(error);\n      res.status(500).json({ message: \"Failed to update campaign\" });\n    }\n  });\n\n  app.delete(\"/api/campaigns/:id\", isAuthenticated, requirePermission(\"canManageCampaigns\"), async (req: Request, res: Response) => {\n    try {\n      await storage.deleteCampaign(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to delete campaign\" });\n    }\n  });\n\n  // Task routes (admin and staff only)\n  app.get(\"/api/tasks\", isAuthenticated, requireRole(UserRole.ADMIN, UserRole.STAFF), async (_req: Request, res: Response) => {\n    try {\n      const tasks = await storage.getTasks();\n      res.json(tasks);\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.post(\"/api/tasks\", isAuthenticated, requireRole(UserRole.ADMIN, UserRole.STAFF), async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertTaskSchema.parse(req.body);\n      const task = await storage.createTask(validatedData);\n      res.status(201).json(task);\n    } catch (error) {\n      handleValidationError(error, res);\n    }\n  });\n\n  app.patch(\"/api/tasks/:id\", isAuthenticated, requireRole(UserRole.ADMIN, UserRole.STAFF), async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertTaskSchema.partial().strip().parse(req.body);\n      const task = await storage.updateTask(req.params.id, validatedData);\n      res.json(task);\n    } catch (error: any) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      if (error.message?.includes(\"not found\")) {\n        return res.status(404).json({ message: error.message });\n      }\n      console.error(error);\n      res.status(500).json({ message: \"Failed to update task\" });\n    }\n  });\n\n  app.delete(\"/api/tasks/:id\", isAuthenticated, requireRole(UserRole.ADMIN, UserRole.STAFF), async (req: Request, res: Response) => {\n    try {\n      await storage.deleteTask(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to delete task\" });\n    }\n  });\n\n  // Task comment routes\n  app.get(\"/api/tasks/:taskId/comments\", isAuthenticated, async (req: Request, res: Response) => {\n    try {\n      const comments = await storage.getTaskComments(req.params.taskId);\n      res.json(comments);\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to fetch task comments\" });\n    }\n  });\n\n  app.post(\"/api/tasks/:taskId/comments\", isAuthenticated, async (req: Request, res: Response) => {\n    try {\n      const user = req.user as any;\n      const validatedData = insertTaskCommentSchema.parse({\n        ...req.body,\n        taskId: req.params.taskId,\n        userId: user.claims.sub,\n      });\n      const comment = await storage.createTaskComment(validatedData);\n      res.status(201).json(comment);\n    } catch (error) {\n      handleValidationError(error, res);\n    }\n  });\n\n  // Lead routes\n  app.get(\"/api/leads\", isAuthenticated, requirePermission(\"canManageLeads\"), async (_req: Request, res: Response) => {\n    try {\n      const leads = await storage.getLeads();\n      res.json(leads);\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to fetch leads\" });\n    }\n  });\n\n  app.post(\"/api/leads\", isAuthenticated, requirePermission(\"canManageLeads\"), async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertLeadSchema.parse(req.body);\n      const lead = await storage.createLead(validatedData);\n      res.status(201).json(lead);\n    } catch (error) {\n      handleValidationError(error, res);\n    }\n  });\n\n  app.patch(\"/api/leads/:id\", isAuthenticated, requirePermission(\"canManageLeads\"), async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertLeadSchema.partial().strip().parse(req.body);\n      const lead = await storage.updateLead(req.params.id, validatedData);\n      res.json(lead);\n    } catch (error: any) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      if (error.message?.includes(\"not found\")) {\n        return res.status(404).json({ message: error.message });\n      }\n      console.error(error);\n      res.status(500).json({ message: \"Failed to update lead\" });\n    }\n  });\n\n  app.delete(\"/api/leads/:id\", isAuthenticated, requirePermission(\"canManageLeads\"), async (req: Request, res: Response) => {\n    try {\n      await storage.deleteLead(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to delete lead\" });\n    }\n  });\n\n  // Lead activity routes\n  app.get(\"/api/leads/:leadId/activities\", isAuthenticated, requirePermission(\"canManageLeads\"), async (req: Request, res: Response) => {\n    try {\n      const activities = await storage.getLeadActivities(req.params.leadId);\n      res.json(activities);\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to fetch lead activities\" });\n    }\n  });\n\n  app.post(\"/api/leads/:leadId/activities\", isAuthenticated, requirePermission(\"canManageLeads\"), async (req: Request, res: Response) => {\n    try {\n      const { insertLeadActivitySchema } = await import(\"@shared/schema\");\n      const validatedData = insertLeadActivitySchema.parse({\n        ...req.body,\n        leadId: req.params.leadId,\n      });\n      const activity = await storage.createLeadActivity(validatedData);\n      res.status(201).json(activity);\n    } catch (error) {\n      handleValidationError(error, res);\n    }\n  });\n\n  // Lead automation routes\n  app.get(\"/api/leads/:leadId/automations\", isAuthenticated, requirePermission(\"canManageLeads\"), async (req: Request, res: Response) => {\n    try {\n      const automations = await storage.getLeadAutomations(req.params.leadId);\n      res.json(automations);\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to fetch lead automations\" });\n    }\n  });\n\n  app.post(\"/api/leads/:leadId/automations\", isAuthenticated, requirePermission(\"canManageLeads\"), async (req: Request, res: Response) => {\n    try {\n      const { insertLeadAutomationSchema } = await import(\"@shared/schema\");\n      const validatedData = insertLeadAutomationSchema.parse({\n        ...req.body,\n        leadId: req.params.leadId,\n      });\n      const automation = await storage.createLeadAutomation(validatedData);\n      res.status(201).json(automation);\n    } catch (error) {\n      handleValidationError(error, res);\n    }\n  });\n\n  app.patch(\"/api/automations/:id\", isAuthenticated, requirePermission(\"canManageLeads\"), async (req: Request, res: Response) => {\n    try {\n      const { insertLeadAutomationSchema } = await import(\"@shared/schema\");\n      const validatedData = insertLeadAutomationSchema.partial().strip().parse(req.body);\n      const automation = await storage.updateLeadAutomation(req.params.id, validatedData);\n      res.json(automation);\n    } catch (error: any) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      if (error.message?.includes(\"not found\")) {\n        return res.status(404).json({ message: error.message });\n      }\n      console.error(error);\n      res.status(500).json({ message: \"Failed to update automation\" });\n    }\n  });\n\n  app.delete(\"/api/automations/:id\", isAuthenticated, requirePermission(\"canManageLeads\"), async (req: Request, res: Response) => {\n    try {\n      await storage.deleteLeadAutomation(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to delete automation\" });\n    }\n  });\n\n  // Content post routes\n  app.get(\"/api/content-posts\", isAuthenticated, requirePermission(\"canManageContent\"), async (_req: Request, res: Response) => {\n    try {\n      const posts = await storage.getContentPosts();\n      res.json(posts);\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to fetch content posts\" });\n    }\n  });\n\n  app.post(\"/api/content-posts\", isAuthenticated, requirePermission(\"canManageContent\"), async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertContentPostSchema.parse(req.body);\n      const post = await storage.createContentPost(validatedData);\n      res.status(201).json(post);\n    } catch (error) {\n      handleValidationError(error, res);\n    }\n  });\n\n  app.patch(\"/api/content-posts/:id\", isAuthenticated, requirePermission(\"canManageContent\"), async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertContentPostSchema.partial().strip().parse(req.body);\n      const post = await storage.updateContentPost(req.params.id, validatedData);\n      res.json(post);\n    } catch (error: any) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      if (error.message?.includes(\"not found\")) {\n        return res.status(404).json({ message: error.message });\n      }\n      console.error(error);\n      res.status(500).json({ message: \"Failed to update content post\" });\n    }\n  });\n\n  app.patch(\"/api/content-posts/:id/approval\", isAuthenticated, requirePermission(\"canManageContent\"), async (req: Request, res: Response) => {\n    try {\n      const approvalSchema = z.object({\n        approvalStatus: z.enum([\"pending\", \"approved\", \"rejected\"])\n      });\n      const validatedData = approvalSchema.parse(req.body);\n      const post = await storage.updateContentPost(req.params.id, validatedData);\n      res.json(post);\n    } catch (error: any) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      if (error.message?.includes(\"not found\")) {\n        return res.status(404).json({ message: error.message });\n      }\n      console.error(error);\n      res.status(500).json({ message: \"Failed to update approval status\" });\n    }\n  });\n\n  app.delete(\"/api/content-posts/:id\", isAuthenticated, requirePermission(\"canManageContent\"), async (req: Request, res: Response) => {\n    try {\n      await storage.deleteContentPost(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to delete content post\" });\n    }\n  });\n\n  // Invoice routes\n  app.get(\"/api/invoices\", isAuthenticated, requirePermission(\"canManageInvoices\"), async (_req: Request, res: Response) => {\n    try {\n      const invoices = await storage.getInvoices();\n      res.json(invoices);\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to fetch invoices\" });\n    }\n  });\n\n  app.post(\"/api/invoices\", isAuthenticated, requirePermission(\"canManageInvoices\"), async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertInvoiceSchema.parse(req.body);\n      const invoice = await storage.createInvoice(validatedData);\n      res.status(201).json(invoice);\n    } catch (error) {\n      handleValidationError(error, res);\n    }\n  });\n\n  app.patch(\"/api/invoices/:id\", isAuthenticated, requirePermission(\"canManageInvoices\"), async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertInvoiceSchema.partial().strip().parse(req.body);\n      const invoice = await storage.updateInvoice(req.params.id, validatedData);\n      res.json(invoice);\n    } catch (error: any) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      if (error.message?.includes(\"not found\")) {\n        return res.status(404).json({ message: error.message });\n      }\n      console.error(error);\n      res.status(500).json({ message: \"Failed to update invoice\" });\n    }\n  });\n\n  app.delete(\"/api/invoices/:id\", isAuthenticated, requirePermission(\"canManageInvoices\"), async (req: Request, res: Response) => {\n    try {\n      await storage.deleteInvoice(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to delete invoice\" });\n    }\n  });\n\n  // Ticket routes\n  app.get(\"/api/tickets\", isAuthenticated, requirePermission(\"canManageTickets\"), async (req: Request, res: Response) => {\n    try {\n      const tickets = await storage.getTickets();\n      const userRole = (req as any).userRole;\n      const userId = (req as any).userId;\n      \n      // Clients can only see their own tickets\n      if (userRole === \"client\") {\n        const filteredTickets = tickets.filter(t => t.createdBy === userId);\n        return res.json(filteredTickets);\n      }\n      \n      res.json(tickets);\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to fetch tickets\" });\n    }\n  });\n\n  app.post(\"/api/tickets\", isAuthenticated, requirePermission(\"canManageTickets\"), async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertTicketSchema.parse(req.body);\n      const userId = (req as any).userId;\n      const userRole = (req as any).userRole;\n      \n      // For clients: ensure they can only create tickets with their own clientId\n      let ticketData = { ...validatedData, createdBy: userId };\n      \n      if (userRole === \"client\") {\n        // Clients cannot set arbitrary clientId or assignedTo\n        delete (ticketData as any).assignedTo;\n        // Note: In production, you'd link user to their client record to set clientId correctly\n      }\n      \n      const ticket = await storage.createTicket(ticketData);\n      res.status(201).json(ticket);\n    } catch (error) {\n      handleValidationError(error, res);\n    }\n  });\n\n  app.patch(\"/api/tickets/:id\", isAuthenticated, requirePermission(\"canManageTickets\"), async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertTicketSchema.partial().strip().parse(req.body);\n      const userRole = (req as any).userRole;\n      const userId = (req as any).userId;\n      \n      // Clients can only update their own tickets\n      if (userRole === \"client\") {\n        const tickets = await storage.getTickets();\n        const ticket = tickets.find(t => t.id === req.params.id);\n        if (!ticket || ticket.createdBy !== userId) {\n          return res.status(403).json({ message: \"Cannot update tickets created by others\" });\n        }\n      }\n      \n      const ticket = await storage.updateTicket(req.params.id, validatedData);\n      res.json(ticket);\n    } catch (error: any) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      if (error.message?.includes(\"not found\")) {\n        return res.status(404).json({ message: error.message });\n      }\n      console.error(error);\n      res.status(500).json({ message: \"Failed to update ticket\" });\n    }\n  });\n\n  app.delete(\"/api/tickets/:id\", isAuthenticated, requirePermission(\"canManageTickets\"), async (req: Request, res: Response) => {\n    try {\n      const userRole = (req as any).userRole;\n      const userId = (req as any).userId;\n      \n      // Clients can only delete their own tickets\n      if (userRole === \"client\") {\n        const tickets = await storage.getTickets();\n        const ticket = tickets.find(t => t.id === req.params.id);\n        if (!ticket || ticket.createdBy !== userId) {\n          return res.status(403).json({ message: \"Cannot delete tickets created by others\" });\n        }\n      }\n      \n      await storage.deleteTicket(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to delete ticket\" });\n    }\n  });\n\n  // Message routes (all authenticated users)\n  app.get(\"/api/messages\", isAuthenticated, requireRole(UserRole.ADMIN, UserRole.STAFF), async (req: Request, res: Response) => {\n    try {\n      const clientId = req.query.clientId as string | undefined;\n      const messages = await storage.getMessages(clientId);\n      res.json(messages);\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  app.post(\"/api/messages\", isAuthenticated, requireRole(UserRole.ADMIN, UserRole.STAFF), async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertMessageSchema.parse(req.body);\n      const message = await storage.createMessage(validatedData);\n      res.status(201).json(message);\n    } catch (error) {\n      handleValidationError(error, res);\n    }\n  });\n\n  app.patch(\"/api/messages/:id\", isAuthenticated, requireRole(UserRole.ADMIN, UserRole.STAFF), async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertMessageSchema.partial().strip().parse(req.body);\n      const message = await storage.updateMessage(req.params.id, validatedData);\n      res.json(message);\n    } catch (error: any) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      if (error.message?.includes(\"not found\")) {\n        return res.status(404).json({ message: error.message });\n      }\n      console.error(error);\n      res.status(500).json({ message: \"Failed to update message\" });\n    }\n  });\n\n  app.delete(\"/api/messages/:id\", isAuthenticated, requireRole(UserRole.ADMIN, UserRole.STAFF), async (req: Request, res: Response) => {\n    try {\n      await storage.deleteMessage(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to delete message\" });\n    }\n  });\n\n  // Onboarding task routes (admin and staff only)\n  app.get(\"/api/onboarding-tasks\", isAuthenticated, requireRole(UserRole.ADMIN, UserRole.STAFF), async (_req: Request, res: Response) => {\n    try {\n      const tasks = await storage.getOnboardingTasks();\n      res.json(tasks);\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to fetch onboarding tasks\" });\n    }\n  });\n\n  // User management routes (staff and admin only)\n  app.get(\"/api/users\", isAuthenticated, requireRole(UserRole.ADMIN, UserRole.STAFF), async (_req: Request, res: Response) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.patch(\"/api/users/:id/role\", isAuthenticated, requireRole(UserRole.ADMIN), async (req: Request, res: Response) => {\n    try {\n      const roleSchema = z.object({\n        role: z.enum([\"admin\", \"staff\", \"client\"])\n      });\n      const { role } = roleSchema.parse(req.body);\n      const user = await storage.updateUserRole(req.params.id, role);\n      res.json(user);\n    } catch (error: any) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      if (error.message?.includes(\"not found\")) {\n        return res.status(404).json({ message: error.message });\n      }\n      console.error(error);\n      res.status(500).json({ message: \"Failed to update user role\" });\n    }\n  });\n\n  // Global search route\n  app.get(\"/api/search\", isAuthenticated, async (req: Request, res: Response) => {\n    try {\n      const query = req.query.q as string;\n      if (!query || query.trim().length < 2) {\n        return res.json({\n          clients: [],\n          campaigns: [],\n          leads: [],\n          contentPosts: [],\n          invoices: [],\n          tickets: [],\n        });\n      }\n      const results = await storage.globalSearch(query.trim());\n      res.json(results);\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Search failed\" });\n    }\n  });\n\n  // Client Document routes\n  app.get(\"/api/clients/:clientId/documents\", isAuthenticated, requirePermission(\"canManageClients\"), async (req: Request, res: Response) => {\n    try {\n      const documents = await storage.getClientDocuments(req.params.clientId);\n      res.json(documents);\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to fetch documents\" });\n    }\n  });\n\n  app.post(\"/api/clients/:clientId/documents\", isAuthenticated, requirePermission(\"canManageClients\"), async (req: Request, res: Response) => {\n    try {\n      const userId = (req as any).userId;\n      \n      const requestSchema = insertClientDocumentSchema.omit({ \n        id: true, \n        createdAt: true, \n        objectPath: true, \n        uploadedBy: true,\n        clientId: true,\n      }).extend({\n        uploadUrl: z.string(),\n      });\n      \n      const validatedData = requestSchema.parse(req.body);\n      \n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        validatedData.uploadUrl,\n        {\n          owner: userId,\n          visibility: \"private\",\n        }\n      );\n\n      const documentData = insertClientDocumentSchema.parse({\n        clientId: req.params.clientId,\n        name: validatedData.name,\n        description: validatedData.description,\n        objectPath: objectPath,\n        fileType: validatedData.fileType,\n        fileSize: validatedData.fileSize,\n        uploadedBy: userId,\n      });\n\n      const document = await storage.createClientDocument(documentData);\n      res.status(201).json(document);\n    } catch (error) {\n      handleValidationError(error, res);\n    }\n  });\n\n  app.delete(\"/api/clients/:clientId/documents/:documentId\", isAuthenticated, requirePermission(\"canManageClients\"), async (req: Request, res: Response) => {\n    try {\n      await storage.deleteClientDocument(req.params.documentId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to delete document\" });\n    }\n  });\n\n  // Website project routes\n  app.get(\"/api/website-projects\", isAuthenticated, async (_req: Request, res: Response) => {\n    try {\n      const projects = await storage.getWebsiteProjects();\n      res.json(projects);\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to fetch website projects\" });\n    }\n  });\n\n  app.get(\"/api/website-projects/:id\", isAuthenticated, async (req: Request, res: Response) => {\n    try {\n      const project = await storage.getWebsiteProject(req.params.id);\n      if (!project) {\n        return res.status(404).json({ message: \"Website project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to fetch website project\" });\n    }\n  });\n\n  app.post(\"/api/website-projects\", isAuthenticated, requirePermission(\"canManageClients\"), async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertWebsiteProjectSchema.parse(req.body);\n      const project = await storage.createWebsiteProject(validatedData);\n      res.status(201).json(project);\n    } catch (error) {\n      handleValidationError(error, res);\n    }\n  });\n\n  app.patch(\"/api/website-projects/:id\", isAuthenticated, requirePermission(\"canManageClients\"), async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertWebsiteProjectSchema.partial().parse(req.body);\n      const project = await storage.updateWebsiteProject(req.params.id, validatedData);\n      res.json(project);\n    } catch (error) {\n      if (error instanceof Error && error.message === \"Website project not found\") {\n        return res.status(404).json({ message: error.message });\n      }\n      handleValidationError(error, res);\n    }\n  });\n\n  app.delete(\"/api/website-projects/:id\", isAuthenticated, requirePermission(\"canManageClients\"), async (req: Request, res: Response) => {\n    try {\n      await storage.deleteWebsiteProject(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to delete website project\" });\n    }\n  });\n\n  // Project feedback routes\n  app.get(\"/api/website-projects/:projectId/feedback\", isAuthenticated, async (req: Request, res: Response) => {\n    try {\n      const feedback = await storage.getProjectFeedback(req.params.projectId);\n      res.json(feedback);\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to fetch project feedback\" });\n    }\n  });\n\n  app.post(\"/api/website-projects/:projectId/feedback\", isAuthenticated, async (req: Request, res: Response) => {\n    try {\n      const userId = (req as any).userId;\n      const validatedData = insertProjectFeedbackSchema.parse({\n        ...req.body,\n        projectId: req.params.projectId,\n        userId,\n      });\n      const feedback = await storage.createProjectFeedback(validatedData);\n      res.status(201).json(feedback);\n    } catch (error) {\n      handleValidationError(error, res);\n    }\n  });\n\n  app.patch(\"/api/project-feedback/:id\", isAuthenticated, requirePermission(\"canManageClients\"), async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertProjectFeedbackSchema.partial().parse(req.body);\n      const feedback = await storage.updateProjectFeedback(req.params.id, validatedData);\n      res.json(feedback);\n    } catch (error) {\n      if (error instanceof Error && error.message === \"Project feedback not found\") {\n        return res.status(404).json({ message: error.message });\n      }\n      handleValidationError(error, res);\n    }\n  });\n\n  app.delete(\"/api/project-feedback/:id\", isAuthenticated, requirePermission(\"canManageClients\"), async (req: Request, res: Response) => {\n    try {\n      await storage.deleteProjectFeedback(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to delete project feedback\" });\n    }\n  });\n\n  // Analytics metrics routes\n  app.get(\"/api/analytics/metrics\", isAuthenticated, async (req: Request, res: Response) => {\n    try {\n      const clientId = req.query.clientId as string | undefined;\n      const metrics = await storage.getAnalyticsMetrics(clientId);\n      res.json(metrics);\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to fetch analytics metrics\" });\n    }\n  });\n\n  app.post(\"/api/analytics/metrics\", isAuthenticated, requirePermission(\"canManageClients\"), async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertAnalyticsMetricSchema.parse(req.body);\n      const metric = await storage.createAnalyticsMetric(validatedData);\n      res.status(201).json(metric);\n    } catch (error) {\n      handleValidationError(error, res);\n    }\n  });\n\n  app.delete(\"/api/analytics/metrics/:id\", isAuthenticated, requirePermission(\"canManageClients\"), async (req: Request, res: Response) => {\n    try {\n      await storage.deleteAnalyticsMetric(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to delete analytics metric\" });\n    }\n  });\n\n  // Lead activity routes\n  app.get(\"/api/leads/:leadId/activities\", isAuthenticated, async (req: Request, res: Response) => {\n    try {\n      const activities = await storage.getLeadActivities(req.params.leadId);\n      res.json(activities);\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to fetch lead activities\" });\n    }\n  });\n\n  app.post(\"/api/leads/:leadId/activities\", isAuthenticated, async (req: Request, res: Response) => {\n    try {\n      const userId = (req as any).userId;\n      const validatedData = insertLeadActivitySchema.parse({\n        ...req.body,\n        leadId: req.params.leadId,\n        userId,\n      });\n      const activity = await storage.createLeadActivity(validatedData);\n      res.status(201).json(activity);\n    } catch (error) {\n      handleValidationError(error, res);\n    }\n  });\n\n  // Lead automation routes\n  app.get(\"/api/leads/:leadId/automations\", isAuthenticated, async (req: Request, res: Response) => {\n    try {\n      const automations = await storage.getLeadAutomations(req.params.leadId);\n      res.json(automations);\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to fetch lead automations\" });\n    }\n  });\n\n  app.post(\"/api/leads/:leadId/automations\", isAuthenticated, requirePermission(\"canManageLeads\"), async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertLeadAutomationSchema.parse({\n        ...req.body,\n        leadId: req.params.leadId,\n      });\n      const automation = await storage.createLeadAutomation(validatedData);\n      res.status(201).json(automation);\n    } catch (error) {\n      handleValidationError(error, res);\n    }\n  });\n\n  app.patch(\"/api/lead-automations/:id\", isAuthenticated, requirePermission(\"canManageLeads\"), async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertLeadAutomationSchema.partial().parse(req.body);\n      const automation = await storage.updateLeadAutomation(req.params.id, validatedData);\n      res.json(automation);\n    } catch (error) {\n      handleValidationError(error, res);\n    }\n  });\n\n  app.delete(\"/api/lead-automations/:id\", isAuthenticated, requirePermission(\"canManageLeads\"), async (req: Request, res: Response) => {\n    try {\n      await storage.deleteLeadAutomation(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to delete lead automation\" });\n    }\n  });\n\n  // Object storage routes\n  app.get(\"/api/upload-url\", isAuthenticated, async (_req: Request, res: Response) => {\n    try {\n      const uploadUrl = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadUrl });\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Failed to generate upload URL\" });\n    }\n  });\n\n  app.get(\"/objects/*\", async (req: Request, res: Response) => {\n    try {\n      const objectPath = `/${req.params[0]}`;\n      const objectFile = await objectStorageService.getObjectEntityFile(objectPath);\n      \n      const user = req.user as any;\n      const userId = user?.claims?.sub;\n\n      const canAccess = await objectStorageService.canAccessObjectEntity({\n        userId,\n        objectFile,\n      });\n\n      if (!canAccess) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      await objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(error);\n      res.status(404).json({ message: \"Object not found\" });\n    }\n  });\n}\n","size_bytes":49080},"client/src/pages/messages.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Send } from \"lucide-react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { Message, Client, Campaign } from \"@shared/schema\";\n\nexport default function Messages() {\n  const [selectedClient, setSelectedClient] = useState<string>(\"\");\n  const [messageText, setMessageText] = useState(\"\");\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const { data: messages, isLoading: messagesLoading } = useQuery<Message[]>({\n    queryKey: [\"/api/messages\", selectedClient],\n    enabled: !!selectedClient,\n  });\n\n  const { data: clients } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\"],\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/messages\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/messages\"] });\n      setMessageText(\"\");\n      toast({ title: \"Message sent\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to send message\", variant: \"destructive\" });\n    },\n  });\n\n  const handleSendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!messageText.trim() || !selectedClient) return;\n\n    sendMessageMutation.mutate({\n      clientId: selectedClient,\n      content: messageText,\n      isInternal: true,\n    });\n  };\n\n  return (\n    <div className=\"min-h-full gradient-mesh h-[calc(100vh-4rem)]\">\n      <div className=\"h-full flex flex-col p-6 lg:p-8 xl:p-12\">\n        <div className=\"mb-6 space-y-2\">\n          <h1 className=\"text-4xl font-bold tracking-tight text-gradient-purple\" data-testid=\"text-page-title\">Team Messages</h1>\n          <p className=\"text-lg text-muted-foreground\">Internal communication for projects and clients</p>\n        </div>\n\n        <Card className=\"flex-1 flex flex-col min-h-0 border-0 shadow-2xl\">\n          <div className=\"p-4 border-b\">\n            <Select value={selectedClient} onValueChange={setSelectedClient}>\n              <SelectTrigger data-testid=\"select-client\">\n                <SelectValue placeholder=\"Select a client to view messages\" />\n              </SelectTrigger>\n              <SelectContent>\n                {clients?.map((client) => (\n                  <SelectItem key={client.id} value={client.id}>\n                    {client.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <CardContent className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n            {!selectedClient ? (\n              <div className=\"flex items-center justify-center h-full\">\n                <p className=\"text-muted-foreground\">Select a client to view messages</p>\n              </div>\n            ) : messagesLoading ? (\n              <div className=\"space-y-4\">\n                {[...Array(3)].map((_, i) => (\n                  <div key={i} className=\"flex gap-3\">\n                    <div className=\"w-8 h-8 bg-muted rounded-full animate-pulse\"></div>\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"h-4 bg-muted rounded w-24 animate-pulse\"></div>\n                      <div className=\"h-16 bg-muted rounded animate-pulse\"></div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : messages && messages.length > 0 ? (\n              <div className=\"space-y-4\">\n                {messages.map((message) => (\n                  <div key={message.id} className=\"flex gap-3\" data-testid={`message-${message.id}`}>\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarImage src={user?.profileImageUrl || \"\"} />\n                      <AvatarFallback className=\"bg-primary/10 text-primary text-xs\">\n                        {user?.firstName?.[0] || \"U\"}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <span className=\"text-sm font-medium\">\n                          {user?.firstName && user?.lastName\n                            ? `${user.firstName} ${user.lastName}`\n                            : user?.email || \"User\"}\n                        </span>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {new Date(message.createdAt).toLocaleString()}\n                        </span>\n                      </div>\n                      <div className=\"bg-muted rounded-lg p-3\">\n                        <p className=\"text-sm\">{message.content}</p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"flex items-center justify-center h-full\">\n                <p className=\"text-muted-foreground\">No messages yet. Start the conversation!</p>\n              </div>\n            )}\n          </CardContent>\n\n          {selectedClient && (\n            <div className=\"p-4 border-t\">\n              <form onSubmit={handleSendMessage} className=\"flex gap-2\">\n                <Input\n                  value={messageText}\n                  onChange={(e) => setMessageText(e.target.value)}\n                  placeholder=\"Type your message...\"\n                  disabled={sendMessageMutation.isPending}\n                  data-testid=\"input-message\"\n                />\n                <Button\n                  type=\"submit\"\n                  disabled={!messageText.trim() || sendMessageMutation.isPending}\n                  data-testid=\"button-send-message\"\n                >\n                  <Send className=\"w-4 h-4\" />\n                </Button>\n              </form>\n            </div>\n          )}\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6340},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { getQueryFn } from \"@/lib/queryClient\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":350},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/pages/onboarding.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { CheckCircle2, Circle, Users, Plus } from \"lucide-react\";\nimport type { Client, OnboardingTask } from \"@shared/schema\";\n\nexport default function Onboarding() {\n  const { data: clients, isLoading: clientsLoading } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\"],\n  });\n\n  const { data: onboardingTasks, isLoading: tasksLoading } = useQuery<OnboardingTask[]>({\n    queryKey: [\"/api/onboarding-tasks\"],\n  });\n\n  const onboardingClients = clients?.filter(client => client.status === \"onboarding\") || [];\n\n  const getClientTasks = (clientId: string) => {\n    return onboardingTasks?.filter(task => task.clientId === clientId) || [];\n  };\n\n  const getProgress = (clientId: string) => {\n    const tasks = getClientTasks(clientId);\n    if (tasks.length === 0) return 0;\n    const completed = tasks.filter(task => task.completed).length;\n    return Math.round((completed / tasks.length) * 100);\n  };\n\n  if (clientsLoading || tasksLoading) {\n    return (\n      <div className=\"min-h-full gradient-mesh\">\n        <div className=\"max-w-7xl mx-auto p-6 lg:p-8 xl:p-12\">\n          <div className=\"space-y-6\">\n            {[...Array(3)].map((_, i) => (\n              <Card key={i} className=\"border-0 shadow-lg\">\n                <CardHeader>\n                  <div className=\"h-6 bg-muted/50 rounded w-48 shimmer\"></div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"h-4 bg-muted/50 rounded shimmer\"></div>\n                    <div className=\"h-4 bg-muted/50 rounded w-3/4 shimmer\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-full gradient-mesh\">\n      <div className=\"max-w-7xl mx-auto p-6 lg:p-8 xl:p-12 space-y-8\">\n        <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n          <div className=\"space-y-2\">\n            <h1 className=\"text-4xl font-bold tracking-tight text-gradient-purple\" data-testid=\"text-page-title\">Client Onboarding</h1>\n            <p className=\"text-lg text-muted-foreground\">Track 30-day onboarding progress for new clients</p>\n          </div>\n        </div>\n\n        {onboardingClients.length === 0 ? (\n          <Card className=\"border-dashed border-2 glass-strong\">\n            <CardContent className=\"flex flex-col items-center justify-center py-16 px-6 text-center\">\n              <div className=\"w-20 h-20 rounded-full bg-gradient-to-br from-primary/20 to-purple-500/20 flex items-center justify-center mb-6 shadow-lg\">\n                <Users className=\"w-10 h-10 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">No Active Onboarding</h3>\n              <p className=\"text-muted-foreground max-w-md mb-6\">\n                When clients are in their 30-day onboarding period, they'll appear here with their progress and tasks.\n              </p>\n              <div className=\"flex gap-3\">\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-view-clients\">\n                  View All Clients\n                </Button>\n                <Button size=\"sm\" data-testid=\"button-add-client\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Client\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n        <div className=\"space-y-6\">\n          {onboardingClients.map((client) => {\n            const tasks = getClientTasks(client.id);\n            const progress = getProgress(client.id);\n\n            return (\n              <Card key={client.id} data-testid={`card-onboarding-${client.id}`} className=\"border-0 shadow-lg hover:shadow-2xl transition-all duration-300 card-hover-lift gradient-border\">\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-start justify-between gap-4\">\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"w-10 h-10 rounded-full bg-gradient-to-br from-primary to-orange-500 flex items-center justify-center text-white font-semibold text-sm\">\n                        {client.name.substring(0, 2).toUpperCase()}\n                      </div>\n                      <div>\n                        <CardTitle className=\"text-xl mb-1\">{client.name}</CardTitle>\n                        {client.company && (\n                          <p className=\"text-sm text-muted-foreground\">{client.company}</p>\n                        )}\n                      </div>\n                    </div>\n                    <Badge variant=\"secondary\" className=\"bg-primary/10 text-primary border-primary/20\">\n                      Day {tasks[0]?.dueDay || 1} of 30\n                    </Badge>\n                  </div>\n                  <div className=\"space-y-2 pt-4\">\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Onboarding Progress</span>\n                      <span className=\"font-semibold text-primary\">{progress}%</span>\n                    </div>\n                    <Progress value={progress} className=\"h-2.5\" />\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {tasks.map((task) => (\n                    <div\n                      key={task.id}\n                      className=\"flex items-start gap-3 p-3 rounded-lg hover-elevate transition-colors\"\n                      data-testid={`task-${task.id}`}\n                    >\n                      {task.completed ? (\n                        <CheckCircle2 className=\"w-5 h-5 text-chart-3 flex-shrink-0 mt-0.5\" />\n                      ) : (\n                        <Circle className=\"w-5 h-5 text-muted-foreground flex-shrink-0 mt-0.5\" />\n                      )}\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${task.completed ? \"text-muted-foreground line-through\" : \"\"}`}>\n                          {task.title}\n                        </p>\n                        {task.description && (\n                          <p className=\"text-xs text-muted-foreground mt-1\">{task.description}</p>\n                        )}\n                        <p className=\"text-xs text-muted-foreground mt-1\">Day {task.dueDay}</p>\n                      </div>\n                    </div>\n                  ))}\n\n                  {tasks.length === 0 && (\n                    <p className=\"text-sm text-muted-foreground text-center py-4\">\n                      No onboarding tasks configured for this client\n                    </p>\n                  )}\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":7171},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"server/storage.ts":{"content":"import {\n  users,\n  clients,\n  campaigns,\n  tasks,\n  taskComments,\n  leads,\n  leadActivities,\n  leadAutomations,\n  contentPosts,\n  invoices,\n  tickets,\n  messages,\n  onboardingTasks,\n  clientDocuments,\n  websiteProjects,\n  projectFeedback,\n  analyticsMetrics,\n  type User,\n  type UpsertUser,\n  type InsertUser,\n  type Client,\n  type InsertClient,\n  type Campaign,\n  type InsertCampaign,\n  type Task,\n  type InsertTask,\n  type TaskComment,\n  type InsertTaskComment,\n  type Lead,\n  type InsertLead,\n  type LeadActivity,\n  type InsertLeadActivity,\n  type LeadAutomation,\n  type InsertLeadAutomation,\n  type ContentPost,\n  type InsertContentPost,\n  type Invoice,\n  type InsertInvoice,\n  type Ticket,\n  type InsertTicket,\n  type Message,\n  type InsertMessage,\n  type OnboardingTask,\n  type InsertOnboardingTask,\n  type ClientDocument,\n  type InsertClientDocument,\n  type WebsiteProject,\n  type InsertWebsiteProject,\n  type ProjectFeedback,\n  type InsertProjectFeedback,\n  type AnalyticsMetric,\n  type InsertAnalyticsMetric,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getAllUsers(): Promise<User[]>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUserRole(userId: string, role: string): Promise<User>;\n\n  // Client operations\n  getClients(): Promise<Client[]>;\n  getClient(id: string): Promise<Client | undefined>;\n  createClient(client: InsertClient): Promise<Client>;\n  updateClient(id: string, data: Partial<InsertClient>): Promise<Client>;\n  deleteClient(id: string): Promise<void>;\n\n  // Campaign operations\n  getCampaigns(): Promise<Campaign[]>;\n  getCampaign(id: string): Promise<Campaign | undefined>;\n  createCampaign(campaign: InsertCampaign): Promise<Campaign>;\n  updateCampaign(id: string, data: Partial<InsertCampaign>): Promise<Campaign>;\n  deleteCampaign(id: string): Promise<void>;\n\n  // Task operations\n  getTasks(): Promise<Task[]>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: string, data: Partial<InsertTask>): Promise<Task>;\n  deleteTask(id: string): Promise<void>;\n  \n  // Task comment operations\n  getTaskComments(taskId: string): Promise<TaskComment[]>;\n  createTaskComment(comment: InsertTaskComment): Promise<TaskComment>;\n\n  // Lead operations\n  getLeads(): Promise<Lead[]>;\n  createLead(lead: InsertLead): Promise<Lead>;\n  updateLead(id: string, data: Partial<InsertLead>): Promise<Lead>;\n  deleteLead(id: string): Promise<void>;\n\n  // Lead activity operations\n  getLeadActivities(leadId: string): Promise<LeadActivity[]>;\n  createLeadActivity(activity: InsertLeadActivity): Promise<LeadActivity>;\n\n  // Lead automation operations\n  getLeadAutomations(leadId: string): Promise<LeadAutomation[]>;\n  createLeadAutomation(automation: InsertLeadAutomation): Promise<LeadAutomation>;\n  updateLeadAutomation(id: string, data: Partial<InsertLeadAutomation>): Promise<LeadAutomation>;\n  deleteLeadAutomation(id: string): Promise<void>;\n\n  // Content post operations\n  getContentPosts(): Promise<ContentPost[]>;\n  createContentPost(post: InsertContentPost): Promise<ContentPost>;\n  updateContentPost(id: string, data: Partial<InsertContentPost>): Promise<ContentPost>;\n  deleteContentPost(id: string): Promise<void>;\n\n  // Invoice operations\n  getInvoices(): Promise<Invoice[]>;\n  createInvoice(invoice: InsertInvoice): Promise<Invoice>;\n  updateInvoice(id: string, data: Partial<InsertInvoice>): Promise<Invoice>;\n  deleteInvoice(id: string): Promise<void>;\n\n  // Ticket operations\n  getTickets(): Promise<Ticket[]>;\n  createTicket(ticket: InsertTicket): Promise<Ticket>;\n  updateTicket(id: string, data: Partial<InsertTicket>): Promise<Ticket>;\n  deleteTicket(id: string): Promise<void>;\n\n  // Message operations\n  getMessages(clientId?: string): Promise<Message[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n  updateMessage(id: string, data: Partial<InsertMessage>): Promise<Message>;\n  deleteMessage(id: string): Promise<void>;\n\n  // Onboarding task operations\n  getOnboardingTasks(): Promise<OnboardingTask[]>;\n\n  // Client document operations\n  getClientDocuments(clientId: string): Promise<ClientDocument[]>;\n  createClientDocument(document: InsertClientDocument): Promise<ClientDocument>;\n  deleteClientDocument(id: string): Promise<void>;\n\n  // Website project operations\n  getWebsiteProjects(): Promise<WebsiteProject[]>;\n  getWebsiteProject(id: string): Promise<WebsiteProject | undefined>;\n  createWebsiteProject(project: InsertWebsiteProject): Promise<WebsiteProject>;\n  updateWebsiteProject(id: string, data: Partial<InsertWebsiteProject>): Promise<WebsiteProject>;\n  deleteWebsiteProject(id: string): Promise<void>;\n\n  // Project feedback operations\n  getProjectFeedback(projectId: string): Promise<ProjectFeedback[]>;\n  createProjectFeedback(feedback: InsertProjectFeedback): Promise<ProjectFeedback>;\n  updateProjectFeedback(id: string, data: Partial<InsertProjectFeedback>): Promise<ProjectFeedback>;\n  deleteProjectFeedback(id: string): Promise<void>;\n\n  // Analytics metrics operations\n  getAnalyticsMetrics(clientId?: string): Promise<AnalyticsMetric[]>;\n  createAnalyticsMetric(metric: InsertAnalyticsMetric): Promise<AnalyticsMetric>;\n  deleteAnalyticsMetric(id: string): Promise<void>;\n\n  // Global search\n  globalSearch(query: string): Promise<{\n    clients: Client[];\n    campaigns: Campaign[];\n    leads: Lead[];\n    contentPosts: ContentPost[];\n    invoices: Invoice[];\n    tickets: Ticket[];\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserRole(userId: string, role: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ role, updatedAt: new Date() })\n      .where(eq(users.id, userId))\n      .returning();\n    if (!user) {\n      throw new Error(\"User not found\");\n    }\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .returning();\n    return user;\n  }\n\n  // Client operations\n  async getClients(): Promise<Client[]> {\n    return await db.select().from(clients).orderBy(desc(clients.createdAt));\n  }\n\n  async getClient(id: string): Promise<Client | undefined> {\n    const [client] = await db.select().from(clients).where(eq(clients.id, id));\n    return client;\n  }\n\n  async createClient(clientData: InsertClient): Promise<Client> {\n    const [client] = await db.insert(clients).values(clientData).returning();\n    return client;\n  }\n\n  async updateClient(id: string, data: Partial<InsertClient>): Promise<Client> {\n    const [client] = await db\n      .update(clients)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(clients.id, id))\n      .returning();\n    if (!client) {\n      throw new Error(\"Client not found\");\n    }\n    return client;\n  }\n\n  async deleteClient(id: string): Promise<void> {\n    await db.delete(clients).where(eq(clients.id, id));\n  }\n\n  // Campaign operations\n  async getCampaigns(): Promise<Campaign[]> {\n    return await db.select().from(campaigns).orderBy(desc(campaigns.createdAt));\n  }\n\n  async getCampaign(id: string): Promise<Campaign | undefined> {\n    const [campaign] = await db.select().from(campaigns).where(eq(campaigns.id, id));\n    return campaign;\n  }\n\n  async createCampaign(campaignData: InsertCampaign): Promise<Campaign> {\n    const [campaign] = await db.insert(campaigns).values(campaignData).returning();\n    return campaign;\n  }\n\n  async updateCampaign(id: string, data: Partial<InsertCampaign>): Promise<Campaign> {\n    const [campaign] = await db\n      .update(campaigns)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(campaigns.id, id))\n      .returning();\n    if (!campaign) {\n      throw new Error(\"Campaign not found\");\n    }\n    return campaign;\n  }\n\n  async deleteCampaign(id: string): Promise<void> {\n    await db.delete(campaigns).where(eq(campaigns.id, id));\n  }\n\n  // Task operations\n  async getTasks(): Promise<Task[]> {\n    return await db.select().from(tasks).orderBy(desc(tasks.createdAt));\n  }\n\n  async createTask(taskData: InsertTask): Promise<Task> {\n    const [task] = await db.insert(tasks).values(taskData).returning();\n    return task;\n  }\n\n  async updateTask(id: string, data: Partial<InsertTask>): Promise<Task> {\n    const [task] = await db\n      .update(tasks)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(tasks.id, id))\n      .returning();\n    if (!task) {\n      throw new Error(\"Task not found\");\n    }\n    return task;\n  }\n\n  async deleteTask(id: string): Promise<void> {\n    await db.delete(tasks).where(eq(tasks.id, id));\n  }\n\n  // Task comment operations\n  async getTaskComments(taskId: string): Promise<TaskComment[]> {\n    return await db\n      .select()\n      .from(taskComments)\n      .where(eq(taskComments.taskId, taskId))\n      .orderBy(desc(taskComments.createdAt));\n  }\n\n  async createTaskComment(commentData: InsertTaskComment): Promise<TaskComment> {\n    const [comment] = await db.insert(taskComments).values(commentData).returning();\n    return comment;\n  }\n\n  // Lead operations\n  async getLeads(): Promise<Lead[]> {\n    return await db.select().from(leads).orderBy(desc(leads.createdAt));\n  }\n\n  async createLead(leadData: InsertLead): Promise<Lead> {\n    const [lead] = await db.insert(leads).values(leadData).returning();\n    return lead;\n  }\n\n  async updateLead(id: string, data: Partial<InsertLead>): Promise<Lead> {\n    const [lead] = await db\n      .update(leads)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(leads.id, id))\n      .returning();\n    if (!lead) {\n      throw new Error(\"Lead not found\");\n    }\n    return lead;\n  }\n\n  async deleteLead(id: string): Promise<void> {\n    await db.delete(leads).where(eq(leads.id, id));\n  }\n\n  // Lead activity operations\n  async getLeadActivities(leadId: string): Promise<LeadActivity[]> {\n    return await db\n      .select()\n      .from(leadActivities)\n      .where(eq(leadActivities.leadId, leadId))\n      .orderBy(desc(leadActivities.createdAt));\n  }\n\n  async createLeadActivity(activityData: InsertLeadActivity): Promise<LeadActivity> {\n    const [activity] = await db.insert(leadActivities).values(activityData).returning();\n    return activity;\n  }\n\n  // Lead automation operations\n  async getLeadAutomations(leadId: string): Promise<LeadAutomation[]> {\n    return await db\n      .select()\n      .from(leadAutomations)\n      .where(eq(leadAutomations.leadId, leadId))\n      .orderBy(desc(leadAutomations.createdAt));\n  }\n\n  async createLeadAutomation(automationData: InsertLeadAutomation): Promise<LeadAutomation> {\n    const [automation] = await db.insert(leadAutomations).values(automationData).returning();\n    return automation;\n  }\n\n  async updateLeadAutomation(id: string, data: Partial<InsertLeadAutomation>): Promise<LeadAutomation> {\n    const [automation] = await db\n      .update(leadAutomations)\n      .set(data)\n      .where(eq(leadAutomations.id, id))\n      .returning();\n    if (!automation) {\n      throw new Error(\"Lead automation not found\");\n    }\n    return automation;\n  }\n\n  async deleteLeadAutomation(id: string): Promise<void> {\n    await db.delete(leadAutomations).where(eq(leadAutomations.id, id));\n  }\n\n  // Content post operations\n  async getContentPosts(): Promise<ContentPost[]> {\n    return await db.select().from(contentPosts).orderBy(desc(contentPosts.createdAt));\n  }\n\n  async createContentPost(postData: InsertContentPost): Promise<ContentPost> {\n    const [post] = await db.insert(contentPosts).values(postData).returning();\n    return post;\n  }\n\n  async updateContentPost(id: string, data: Partial<InsertContentPost>): Promise<ContentPost> {\n    const [post] = await db\n      .update(contentPosts)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(contentPosts.id, id))\n      .returning();\n    if (!post) {\n      throw new Error(\"Content post not found\");\n    }\n    return post;\n  }\n\n  async deleteContentPost(id: string): Promise<void> {\n    await db.delete(contentPosts).where(eq(contentPosts.id, id));\n  }\n\n  // Invoice operations\n  async getInvoices(): Promise<Invoice[]> {\n    return await db.select().from(invoices).orderBy(desc(invoices.createdAt));\n  }\n\n  async createInvoice(invoiceData: InsertInvoice): Promise<Invoice> {\n    const [invoice] = await db.insert(invoices).values(invoiceData).returning();\n    return invoice;\n  }\n\n  async updateInvoice(id: string, data: Partial<InsertInvoice>): Promise<Invoice> {\n    const [invoice] = await db\n      .update(invoices)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(invoices.id, id))\n      .returning();\n    if (!invoice) {\n      throw new Error(\"Invoice not found\");\n    }\n    return invoice;\n  }\n\n  async deleteInvoice(id: string): Promise<void> {\n    await db.delete(invoices).where(eq(invoices.id, id));\n  }\n\n  // Ticket operations\n  async getTickets(): Promise<Ticket[]> {\n    return await db.select().from(tickets).orderBy(desc(tickets.createdAt));\n  }\n\n  async createTicket(ticketData: InsertTicket): Promise<Ticket> {\n    const [ticket] = await db.insert(tickets).values(ticketData).returning();\n    return ticket;\n  }\n\n  async updateTicket(id: string, data: Partial<InsertTicket>): Promise<Ticket> {\n    const [ticket] = await db\n      .update(tickets)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(tickets.id, id))\n      .returning();\n    if (!ticket) {\n      throw new Error(\"Ticket not found\");\n    }\n    return ticket;\n  }\n\n  async deleteTicket(id: string): Promise<void> {\n    await db.delete(tickets).where(eq(tickets.id, id));\n  }\n\n  // Message operations\n  async getMessages(clientId?: string): Promise<Message[]> {\n    if (clientId) {\n      return await db.select().from(messages).where(eq(messages.clientId, clientId)).orderBy(messages.createdAt);\n    }\n    return await db.select().from(messages).orderBy(messages.createdAt);\n  }\n\n  async createMessage(messageData: InsertMessage): Promise<Message> {\n    const [message] = await db.insert(messages).values(messageData).returning();\n    return message;\n  }\n\n  async updateMessage(id: string, data: Partial<InsertMessage>): Promise<Message> {\n    const [message] = await db\n      .update(messages)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(messages.id, id))\n      .returning();\n    if (!message) {\n      throw new Error(\"Message not found\");\n    }\n    return message;\n  }\n\n  async deleteMessage(id: string): Promise<void> {\n    await db.delete(messages).where(eq(messages.id, id));\n  }\n\n  // Onboarding task operations\n  async getOnboardingTasks(): Promise<OnboardingTask[]> {\n    return await db.select().from(onboardingTasks).orderBy(onboardingTasks.dueDay);\n  }\n\n  // Client document operations\n  async getClientDocuments(clientId: string): Promise<ClientDocument[]> {\n    return await db.select().from(clientDocuments).where(eq(clientDocuments.clientId, clientId)).orderBy(desc(clientDocuments.createdAt));\n  }\n\n  async createClientDocument(document: InsertClientDocument): Promise<ClientDocument> {\n    const [doc] = await db.insert(clientDocuments).values(document).returning();\n    return doc;\n  }\n\n  async deleteClientDocument(id: string): Promise<void> {\n    await db.delete(clientDocuments).where(eq(clientDocuments.id, id));\n  }\n\n  // Website project operations\n  async getWebsiteProjects(): Promise<WebsiteProject[]> {\n    return await db.select().from(websiteProjects).orderBy(desc(websiteProjects.createdAt));\n  }\n\n  async getWebsiteProject(id: string): Promise<WebsiteProject | undefined> {\n    const [project] = await db.select().from(websiteProjects).where(eq(websiteProjects.id, id));\n    return project;\n  }\n\n  async createWebsiteProject(projectData: InsertWebsiteProject): Promise<WebsiteProject> {\n    const [project] = await db.insert(websiteProjects).values(projectData).returning();\n    return project;\n  }\n\n  async updateWebsiteProject(id: string, data: Partial<InsertWebsiteProject>): Promise<WebsiteProject> {\n    const [project] = await db\n      .update(websiteProjects)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(websiteProjects.id, id))\n      .returning();\n    if (!project) {\n      throw new Error(\"Website project not found\");\n    }\n    return project;\n  }\n\n  async deleteWebsiteProject(id: string): Promise<void> {\n    await db.delete(websiteProjects).where(eq(websiteProjects.id, id));\n  }\n\n  // Project feedback operations\n  async getProjectFeedback(projectId: string): Promise<ProjectFeedback[]> {\n    return await db.select().from(projectFeedback).where(eq(projectFeedback.projectId, projectId)).orderBy(desc(projectFeedback.createdAt));\n  }\n\n  async createProjectFeedback(feedbackData: InsertProjectFeedback): Promise<ProjectFeedback> {\n    const [feedback] = await db.insert(projectFeedback).values(feedbackData).returning();\n    return feedback;\n  }\n\n  async updateProjectFeedback(id: string, data: Partial<InsertProjectFeedback>): Promise<ProjectFeedback> {\n    const [feedback] = await db\n      .update(projectFeedback)\n      .set(data)\n      .where(eq(projectFeedback.id, id))\n      .returning();\n    if (!feedback) {\n      throw new Error(\"Project feedback not found\");\n    }\n    return feedback;\n  }\n\n  async deleteProjectFeedback(id: string): Promise<void> {\n    await db.delete(projectFeedback).where(eq(projectFeedback.id, id));\n  }\n\n  // Analytics metrics operations\n  async getAnalyticsMetrics(clientId?: string): Promise<AnalyticsMetric[]> {\n    if (clientId) {\n      return await db.select().from(analyticsMetrics).where(eq(analyticsMetrics.clientId, clientId)).orderBy(desc(analyticsMetrics.date));\n    }\n    return await db.select().from(analyticsMetrics).orderBy(desc(analyticsMetrics.date));\n  }\n\n  async createAnalyticsMetric(metricData: InsertAnalyticsMetric): Promise<AnalyticsMetric> {\n    const [metric] = await db.insert(analyticsMetrics).values(metricData).returning();\n    return metric;\n  }\n\n  async deleteAnalyticsMetric(id: string): Promise<void> {\n    await db.delete(analyticsMetrics).where(eq(analyticsMetrics.id, id));\n  }\n\n  // Global search\n  async globalSearch(query: string) {\n    const searchTerm = `%${query.toLowerCase()}%`;\n\n    const [clientResults, campaignResults, leadResults, contentResults, invoiceResults, ticketResults] = await Promise.all([\n      db.select().from(clients).where(\n        sql`LOWER(${clients.name}) LIKE ${searchTerm} OR LOWER(${clients.email}) LIKE ${searchTerm} OR LOWER(${clients.company}) LIKE ${searchTerm}`\n      ).limit(5),\n      db.select().from(campaigns).where(\n        sql`LOWER(${campaigns.name}) LIKE ${searchTerm} OR LOWER(${campaigns.description}) LIKE ${searchTerm}`\n      ).limit(5),\n      db.select().from(leads).where(\n        sql`LOWER(${leads.name}) LIKE ${searchTerm} OR LOWER(${leads.email}) LIKE ${searchTerm} OR LOWER(${leads.company}) LIKE ${searchTerm}`\n      ).limit(5),\n      db.select().from(contentPosts).where(\n        sql`LOWER(${contentPosts.title}) LIKE ${searchTerm}`\n      ).limit(5),\n      db.select().from(invoices).where(\n        sql`LOWER(${invoices.invoiceNumber}) LIKE ${searchTerm}`\n      ).limit(5),\n      db.select().from(tickets).where(\n        sql`LOWER(${tickets.subject}) LIKE ${searchTerm} OR LOWER(${tickets.description}) LIKE ${searchTerm}`\n      ).limit(5)\n    ]);\n\n    return {\n      clients: clientResults,\n      campaigns: campaignResults,\n      leads: leadResults,\n      contentPosts: contentResults,\n      invoices: invoiceResults,\n      tickets: ticketResults,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":20468},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useEffect, useState } from \"react\";\n\nexport function ThemeToggle() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"light\");\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n    const initialTheme = savedTheme || (prefersDark ? \"dark\" : \"light\");\n    \n    setTheme(initialTheme);\n    document.documentElement.classList.toggle(\"dark\", initialTheme === \"dark\");\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    localStorage.setItem(\"theme\", newTheme);\n    document.documentElement.classList.toggle(\"dark\", newTheme === \"dark\");\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n    </Button>\n  );\n}\n","size_bytes":1137},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/pages/clients.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Plus, Search, Mail, Phone, Globe, Building2 } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Client } from \"@shared/schema\";\n\nexport default function Clients() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: clients, isLoading } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\"],\n  });\n\n  const createClientMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/clients\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      setDialogOpen(false);\n      toast({ title: \"Client created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create client\", variant: \"destructive\" });\n    },\n  });\n\n  const handleCreateClient = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const serviceTags = (formData.get(\"serviceTags\") as string)\n      .split(\",\")\n      .map(tag => tag.trim())\n      .filter(Boolean);\n\n    createClientMutation.mutate({\n      name: formData.get(\"name\"),\n      email: formData.get(\"email\"),\n      phone: formData.get(\"phone\"),\n      company: formData.get(\"company\"),\n      website: formData.get(\"website\"),\n      serviceTags,\n      notes: formData.get(\"notes\"),\n    });\n  };\n\n  const filteredClients = clients?.filter((client) =>\n    client.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    client.company?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    client.email?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-full gradient-mesh\">\n        <div className=\"max-w-7xl mx-auto p-6 lg:p-8 xl:p-12\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <Card key={i} className=\"glass p-6\">\n                <div className=\"h-16 bg-muted/50 rounded-lg shimmer mb-4\"></div>\n                <div className=\"h-4 bg-muted/50 rounded w-3/4 shimmer\"></div>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-full gradient-mesh\">\n      <div className=\"max-w-7xl mx-auto p-6 lg:p-8 xl:p-12 space-y-8\">\n        {/* Premium Header Section */}\n        <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n          <div className=\"space-y-2\">\n            <h1 className=\"text-4xl font-bold tracking-tight text-gradient\" data-testid=\"text-page-title\">Clients</h1>\n            <p className=\"text-lg text-muted-foreground\">Manage your client relationships</p>\n          </div>\n          <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n            <DialogTrigger asChild>\n              <Button size=\"lg\" className=\"shadow-lg hover:shadow-xl transition-all\" data-testid=\"button-add-client\">\n                <Plus className=\"w-5 h-5 mr-2\" />\n                Add Client\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl glass-strong\">\n              <DialogHeader>\n                <DialogTitle className=\"text-2xl\">Create New Client</DialogTitle>\n                <DialogDescription>Add a new client to your CRM system</DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleCreateClient} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\">Client Name *</Label>\n                    <Input id=\"name\" name=\"name\" required data-testid=\"input-client-name\" className=\"glass\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"company\">Company</Label>\n                    <Input id=\"company\" name=\"company\" data-testid=\"input-company\" className=\"glass\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input id=\"email\" name=\"email\" type=\"email\" data-testid=\"input-email\" className=\"glass\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">Phone</Label>\n                    <Input id=\"phone\" name=\"phone\" data-testid=\"input-phone\" className=\"glass\" />\n                  </div>\n                  <div className=\"space-y-2 col-span-2\">\n                    <Label htmlFor=\"website\">Website</Label>\n                    <Input id=\"website\" name=\"website\" placeholder=\"https://\" data-testid=\"input-website\" className=\"glass\" />\n                  </div>\n                  <div className=\"space-y-2 col-span-2\">\n                    <Label htmlFor=\"serviceTags\">Service Tags (comma-separated)</Label>\n                    <Input id=\"serviceTags\" name=\"serviceTags\" placeholder=\"social media, lead gen, design\" data-testid=\"input-service-tags\" className=\"glass\" />\n                  </div>\n                  <div className=\"space-y-2 col-span-2\">\n                    <Label htmlFor=\"notes\">Notes</Label>\n                    <Textarea id=\"notes\" name=\"notes\" rows={3} data-testid=\"input-notes\" className=\"glass\" />\n                  </div>\n                </div>\n                <div className=\"flex justify-end gap-2 pt-4\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setDialogOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createClientMutation.isPending} data-testid=\"button-submit-client\" className=\"shadow-md\">\n                    {createClientMutation.isPending ? \"Creating...\" : \"Create Client\"}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Search Bar */}\n        <div className=\"relative max-w-md\">\n          <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground\" />\n          <Input\n            type=\"search\"\n            placeholder=\"Search clients...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10 glass shadow-sm\"\n            data-testid=\"input-search-clients\"\n          />\n        </div>\n\n        {/* Premium Client Cards with Stagger Animation */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 stagger-fade-in\">\n          {filteredClients?.map((client) => (\n            <Card \n              key={client.id} \n              className=\"group relative overflow-hidden border-0 shadow-lg hover:shadow-2xl transition-all duration-300 card-hover-lift gradient-border\"\n              data-testid={`card-client-${client.id}`}\n            >\n              {/* Gradient Overlay on Hover */}\n              <div className=\"absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-orange-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n              \n              <CardContent className=\"relative p-6\">\n                <div className=\"flex items-start gap-4 mb-4\">\n                  <div className=\"relative\">\n                    <Avatar className=\"h-14 w-14 border-2 border-primary/20 shadow-md\">\n                      <AvatarImage src={client.logoUrl || \"\"} />\n                      <AvatarFallback className=\"bg-gradient-to-br from-primary/20 to-purple-500/20 text-primary text-lg font-bold\">\n                        {client.name.substring(0, 2).toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"absolute -bottom-1 -right-1 w-4 h-4 rounded-full bg-emerald-500 border-2 border-background shadow-sm\"></div>\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <h3 className=\"font-semibold text-lg truncate mb-1 group-hover:text-primary transition-colors\">\n                      {client.name}\n                    </h3>\n                    {client.company && (\n                      <div className=\"flex items-center gap-1.5 text-sm text-muted-foreground\">\n                        <Building2 className=\"w-3.5 h-3.5\" />\n                        <span className=\"truncate\">{client.company}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"space-y-2.5\">\n                  {client.email && (\n                    <div className=\"flex items-center gap-2 text-sm p-2 rounded-lg hover-elevate transition-all\">\n                      <div className=\"w-8 h-8 rounded-lg bg-blue-500/10 flex items-center justify-center flex-shrink-0\">\n                        <Mail className=\"w-4 h-4 text-blue-600 dark:text-blue-400\" />\n                      </div>\n                      <span className=\"truncate text-muted-foreground\">{client.email}</span>\n                    </div>\n                  )}\n                  {client.phone && (\n                    <div className=\"flex items-center gap-2 text-sm p-2 rounded-lg hover-elevate transition-all\">\n                      <div className=\"w-8 h-8 rounded-lg bg-emerald-500/10 flex items-center justify-center flex-shrink-0\">\n                        <Phone className=\"w-4 h-4 text-emerald-600 dark:text-emerald-400\" />\n                      </div>\n                      <span className=\"truncate text-muted-foreground\">{client.phone}</span>\n                    </div>\n                  )}\n                  {client.website && (\n                    <div className=\"flex items-center gap-2 text-sm p-2 rounded-lg hover-elevate transition-all\">\n                      <div className=\"w-8 h-8 rounded-lg bg-purple-500/10 flex items-center justify-center flex-shrink-0\">\n                        <Globe className=\"w-4 h-4 text-purple-600 dark:text-purple-400\" />\n                      </div>\n                      <span className=\"truncate text-muted-foreground\">{client.website}</span>\n                    </div>\n                  )}\n                </div>\n\n                {client.serviceTags && client.serviceTags.length > 0 && (\n                  <div className=\"flex flex-wrap gap-1.5 mt-4 pt-4 border-t border-border/50\">\n                    {client.serviceTags.map((tag, idx) => (\n                      <Badge \n                        key={idx} \n                        variant=\"secondary\" \n                        className=\"text-xs font-medium bg-gradient-to-r from-primary/10 to-purple-500/10 hover:from-primary/20 hover:to-purple-500/20 transition-all\"\n                      >\n                        {tag}\n                      </Badge>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Premium Empty State */}\n        {filteredClients?.length === 0 && (\n          <Card className=\"border-dashed border-2 glass-strong\">\n            <CardContent className=\"flex flex-col items-center justify-center py-16 px-6 text-center\">\n              <div className=\"w-20 h-20 rounded-full bg-gradient-to-br from-primary/20 to-purple-500/20 flex items-center justify-center mb-6 shadow-lg\">\n                <Search className=\"w-10 h-10 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">No Clients Found</h3>\n              <p className=\"text-muted-foreground max-w-md mb-6\">\n                {searchTerm ? \"Try adjusting your search terms\" : \"Get started by adding your first client\"}\n              </p>\n              {!searchTerm && (\n                <Button onClick={() => setDialogOpen(true)} size=\"lg\" className=\"shadow-lg\">\n                  <Plus className=\"w-5 h-5 mr-2\" />\n                  Add Your First Client\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":12722},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"design_guidelines.md":{"content":"# Marketing Team App CRM - Premium Design System\n\n## Design Philosophy: Modern Premium SaaS\n\n**Approach**: Sophisticated, Modern Dashboard with Glass Morphism & Depth  \n**Inspiration**: Linear, Stripe Dashboard, Vercel, Modern Banking Apps\n\n**Core Principles**:\n- **Depth & Dimension**: Multi-layer visual hierarchy using shadows, blur, and gradients\n- **Premium Aesthetics**: Glass morphism, subtle animations, sophisticated color usage\n- **Data Clarity**: Information-first design with enhanced visual appeal\n- **Professional Trust**: Clean, modern UI that conveys enterprise-grade quality\n\n---\n\n## Visual Design System\n\n### A. Enhanced Color Palette\n\n**Primary Brand Colors**:\n- **Primary Blue**: `217 91% 60%` - Main actions, gradients, primary CTAs\n- **Primary Orange**: `25 95% 53%` - Accent highlights, urgency, important items\n- **Deep Purple**: `250 70% 60%` - Secondary accent for variety\n\n**Gradient Combinations**:\n- **Hero Gradient**: Blue â†’ Purple (`from-primary via-purple-500 to-primary`)\n- **Accent Gradient**: Orange â†’ Pink (`from-orange to-pink-500`)\n- **Success Gradient**: Green â†’ Emerald (`from-green-500 to-emerald-600`)\n- **Card Overlay**: Subtle radial gradients for depth\n\n**Functional Colors** (Enhanced):\n- Success: `142 71% 45%` with gradient to `142 71% 55%`\n- Warning: `38 92% 50%` with gradient to `38 92% 60%`\n- Error: `0 84% 60%` with gradient to `0 84% 70%`\n- Info: `199 89% 48%` with gradient to `199 89% 58%`\n\n**Background Layers**:\n- **Base**: Subtle gradient or texture\n- **Cards**: Glass effect with `backdrop-blur-xl` and semi-transparent backgrounds\n- **Elevated**: Multiple shadow layers for depth\n\n### B. Advanced Typography\n\n**Font System**: Inter (primary) + SF Mono (code/numbers)\n\n**Scale with Visual Weight**:\n- **Hero Headers**: `text-4xl md:text-5xl font-bold tracking-tight` with gradient text\n- **Page Headers**: `text-3xl font-bold tracking-tight` \n- **Section Headers**: `text-xl font-semibold`\n- **Card Titles**: `text-lg font-semibold`\n- **Body**: `text-sm` with `leading-relaxed`\n- **Captions**: `text-xs font-medium text-muted-foreground`\n\n**Text Treatments**:\n- Gradient text on headers: `bg-gradient-to-r from-primary to-purple-600 bg-clip-text text-transparent`\n- Number displays: Tabular numbers `font-mono` for alignment\n- Status text: Font weight variations for hierarchy\n\n### C. Premium Layout System\n\n**Spacing Philosophy**: Generous whitespace with purposeful density\n\n**Container Strategy**:\n- **Max Width**: `max-w-7xl` for optimal reading\n- **Page Padding**: `p-6 lg:p-8 xl:p-12` - more generous on larger screens\n- **Card Padding**: `p-6 lg:p-8` for breathing room\n- **Gaps**: `gap-6 lg:gap-8` between major sections\n\n**Grid Enhancements**:\n- Dashboard metrics: `grid-cols-1 md:grid-cols-2 lg:grid-cols-4` with stagger animation\n- Content cards: `grid-cols-1 lg:grid-cols-2 xl:grid-cols-3` \n- Responsive breakpoints with smooth transitions\n\n### D. Premium Component Designs\n\n#### **Dashboard Metric Cards**:\n```\n- Glass morphism background with blur\n- Gradient icon backgrounds (circular, radial gradient)\n- Large numbers with tabular font\n- Subtle shadow layers (sm, md, lg stacked)\n- Trend indicators with micro-animations\n- Hover: Lift effect with enhanced shadow\n```\n\n#### **Data Cards (Clients, Campaigns, etc.)**:\n```\n- Semi-transparent backgrounds\n- Border with gradient on hover\n- Inner glow effects on interaction\n- Avatar/icons with gradient backgrounds or rings\n- Organized information hierarchy\n- Action buttons appear on hover with slide-in animation\n```\n\n#### **Kanban Pipeline**:\n```\n- Column headers with gradient backgrounds\n- Cards with glass effect and subtle shadows\n- Drag indicators with smooth transforms\n- Count badges with gradient backgrounds\n- Status bars with animated gradients\n```\n\n#### **Forms & Inputs**:\n```\n- Subtle background tint\n- Focus: Ring with gradient glow\n- Floating labels with smooth transitions\n- Inline validation with icons\n- Glass effect on dropdowns/selects\n```\n\n#### **Navigation**:\n```\n- Sidebar: Dark mode with subtle gradient overlay\n- Active items: Gradient background + glow effect\n- Hover: Smooth color transitions\n- Icons: Gradient fills on active states\n```\n\n### E. Visual Effects & Depth\n\n**Shadow System** (Multiple Layers):\n- **Subtle**: `shadow-sm` for resting state\n- **Medium**: `shadow-md` for cards\n- **Elevated**: `shadow-lg shadow-primary/10` for active/hover\n- **Floating**: `shadow-xl shadow-primary/20` for modals\n\n**Glass Morphism**:\n```css\nbackground: rgba(255, 255, 255, 0.1);\nbackdrop-filter: blur(12px);\nborder: 1px solid rgba(255, 255, 255, 0.2);\n```\n\n**Gradient Overlays**:\n- Radial gradients for depth: `bg-gradient-radial from-primary/5 via-transparent to-transparent`\n- Mesh gradients for hero sections\n- Animated gradients for loading states\n\n**Border Treatments**:\n- Gradient borders on hover: `before:bg-gradient-to-r before:from-primary before:to-orange`\n- Glow effects: `ring-2 ring-primary/20`\n\n### F. Micro-Interactions & Animation\n\n**Purposeful Motion**:\n- **Hover States**: \n  - Cards: `transform hover:scale-[1.02] transition-all duration-300`\n  - Shadows: Animate from sm to lg\n  - Colors: Gradient shifts\n  \n- **Loading States**:\n  - Skeleton: Gradient shimmer animation\n  - Spinners: Gradient border with rotation\n  \n- **Transitions**:\n  - Smooth all: `transition-all duration-200 ease-out`\n  - Stagger children: Animate-in with delays\n  \n- **Scroll Effects**:\n  - Sticky headers with blur backdrop\n  - Fade-in on scroll (subtle)\n\n**Button Interactions**:\n```\n- Rest: Gradient background\n- Hover: Brightness increase + shadow grow\n- Active: Slight scale down (0.98)\n- Disabled: Reduced opacity with grayscale\n```\n\n### G. Advanced Status & Data Viz\n\n**Status Badges** (Enhanced):\n- Gradient backgrounds based on status\n- Glow effect for active states\n- Animated pulse for urgent items\n- Icon + text with proper spacing\n\n**Progress Indicators**:\n- Gradient progress bars\n- Multi-color segments for stages\n- Percentage with backdrop blur\n- Animated fill on load\n\n**Charts & Metrics**:\n- Gradient area fills\n- Smooth line animations\n- Interactive tooltips with glass effect\n- Color-coded by data importance\n\n### H. Empty States & Placeholders\n\n**Premium Empty States**:\n- Gradient icon backgrounds (large, circular)\n- Descriptive text with hierarchy\n- Primary CTA with gradient\n- Subtle animations (float/pulse)\n\n**Loading Skeletons**:\n- Gradient shimmer effect\n- Proper spacing matching actual content\n- Smooth fade-in when loaded\n\n---\n\n## Implementation Guidelines\n\n### Color Usage Rules:\n1. **Primary Blue**: Main actions, links, active states\n2. **Orange**: Urgency, highlights, secondary CTAs\n3. **Gradients**: Headers, icons, special elements (don't overuse)\n4. **Glass**: Cards, modals, overlays for depth\n5. **Shadows**: Layer multiple shadows for realistic depth\n\n### Accessibility:\n- Maintain WCAG AA contrast (4.5:1) even with gradients\n- Focus states with clear rings\n- Reduced motion support: `prefers-reduced-motion`\n- Semantic HTML with ARIA labels\n\n### Responsive Design:\n- Mobile: Simplified gradients, reduced blur for performance\n- Tablet: Moderate effects\n- Desktop: Full premium experience with all effects\n\n### Performance:\n- Use `will-change` sparingly for animations\n- Optimize backdrop-filter usage\n- Lazy load heavy visual effects\n- CSS transitions over JS animations\n\n---\n\n## Page-Specific Treatments\n\n### Dashboard:\n- Hero metrics with gradient backgrounds\n- Activity feed with glass cards\n- Charts with animated gradients\n- Quick actions with hover glow\n\n### Client/Campaign Pages:\n- Grid cards with hover lift\n- Avatar gradients matching brand\n- Status badges with glow\n- Smooth filtering transitions\n\n### Pipeline (Kanban):\n- Column gradient headers\n- Glass effect cards\n- Smooth drag animations\n- Achievement celebrations\n\n### Calendar:\n- Grid with subtle borders\n- Event cards with gradients\n- Today highlight with glow\n- Smooth month transitions\n\nThis premium design system balances **visual sophistication** with **functional clarity** - creating a dashboard that feels modern and professional while maintaining excellent usability.\n","size_bytes":8137},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { GlobalSearch } from \"@/components/GlobalSearch\";\nimport { useAuth, AuthProvider } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"@/lib/protected-route\";\n\nimport AuthPage from \"@/pages/auth-page\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Clients from \"@/pages/clients\";\nimport Campaigns from \"@/pages/campaigns\";\nimport Tasks from \"@/pages/tasks\";\nimport Pipeline from \"@/pages/pipeline\";\nimport Content from \"@/pages/content\";\nimport Invoices from \"@/pages/invoices\";\nimport Tickets from \"@/pages/tickets\";\nimport Onboarding from \"@/pages/onboarding\";\nimport Messages from \"@/pages/messages\";\nimport WebsiteProjects from \"@/pages/website-projects\";\nimport Analytics from \"@/pages/analytics\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { user } = useAuth();\n\n  return (\n    <Switch>\n      <Route path=\"/login\" component={AuthPage} />\n      <Route path=\"/auth\" component={AuthPage} />\n      {!user && <Route path=\"/\" component={Landing} />}\n      <ProtectedRoute path=\"/\" component={Dashboard} />\n      <ProtectedRoute path=\"/clients\" component={Clients} />\n      <ProtectedRoute path=\"/campaigns\" component={Campaigns} />\n      <ProtectedRoute path=\"/tasks\" component={Tasks} />\n      <ProtectedRoute path=\"/pipeline\" component={Pipeline} />\n      <ProtectedRoute path=\"/content\" component={Content} />\n      <ProtectedRoute path=\"/invoices\" component={Invoices} />\n      <ProtectedRoute path=\"/tickets\" component={Tickets} />\n      <ProtectedRoute path=\"/onboarding\" component={Onboarding} />\n      <ProtectedRoute path=\"/messages\" component={Messages} />\n      <ProtectedRoute path=\"/website-projects\" component={WebsiteProjects} />\n      <ProtectedRoute path=\"/analytics\" component={Analytics} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction AppContent() {\n  const { user, isLoading } = useAuth();\n\n  const sidebarStyle = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin w-12 h-12 border-4 border-primary border-t-transparent rounded-full\" data-testid=\"loading-spinner\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    );\n  }\n\n  return (\n    <TooltipProvider>\n      <SidebarProvider style={sidebarStyle as React.CSSProperties}>\n        <div className=\"flex h-screen w-full\">\n          <AppSidebar />\n          <div className=\"flex flex-col flex-1 overflow-hidden\">\n            <header className=\"flex items-center justify-between gap-4 px-4 py-3 border-b bg-background\">\n              <div className=\"flex items-center gap-2 flex-1\">\n                <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n                <GlobalSearch />\n              </div>\n              <ThemeToggle />\n            </header>\n            <main className=\"flex-1 overflow-auto\">\n              <Router />\n            </main>\n          </div>\n        </div>\n      </SidebarProvider>\n      <Toaster />\n    </TooltipProvider>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <AppContent />\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3856},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\nexport class ObjectStorageService {\n  constructor() {}\n\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n    return null;\n  }\n\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      const [metadata] = await file.getMetadata();\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(rawPath: string): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n\n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n\n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}\n","size_bytes":7412},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/usePermissions.ts":{"content":"import { useAuth } from \"./useAuth\";\n\nexport interface RolePermissions {\n  canManageUsers: boolean;\n  canManageClients: boolean;\n  canManageCampaigns: boolean;\n  canManageLeads: boolean;\n  canManageContent: boolean;\n  canManageInvoices: boolean;\n  canManageTickets: boolean;\n  canViewReports: boolean;\n  canManageSettings: boolean;\n}\n\nexport function usePermissions() {\n  const { user } = useAuth();\n\n  const role = (user as any)?.role || \"staff\";\n  const isAdmin = role === \"admin\";\n  const isStaff = role === \"staff\" || role === \"admin\"; // Admin has staff permissions\n  const isClient = role === \"client\";\n\n  // Compute permissions based on role\n  const permissions: RolePermissions = {\n    canManageUsers: isAdmin,\n    canManageClients: isAdmin || isStaff,\n    canManageCampaigns: isAdmin || isStaff,\n    canManageLeads: isAdmin || isStaff,\n    canManageContent: isAdmin || isStaff,\n    canManageInvoices: isAdmin || isStaff,\n    canManageTickets: isAdmin || isStaff,\n    canViewReports: isAdmin || isStaff,\n    canManageSettings: isAdmin,\n  };\n\n  return {\n    permissions,\n    role,\n    isAdmin,\n    isStaff,\n    isClient,\n    canAccess: (permission: keyof RolePermissions) => permissions[permission],\n  };\n}\n","size_bytes":1214},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/app-sidebar.tsx":{"content":"import { \n  LayoutDashboard, \n  Users, \n  Megaphone,\n  ListTodo,\n  TrendingUp, \n  Calendar, \n  DollarSign, \n  Ticket, \n  ClipboardCheck,\n  MessageSquare,\n  Globe,\n  BarChart3,\n  LogOut\n} from \"lucide-react\";\nimport mtaLogo from \"@assets/mta-logo.png\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarFooter,\n  SidebarHeader,\n} from \"@/components/ui/sidebar\";\nimport { Link, useLocation } from \"wouter\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { usePermissions } from \"@/hooks/usePermissions\";\n\nconst menuItems = [\n  {\n    title: \"Dashboard\",\n    url: \"/\",\n    icon: LayoutDashboard,\n    permission: null, // Everyone can access dashboard\n  },\n  {\n    title: \"Clients\",\n    url: \"/clients\",\n    icon: Users,\n    permission: \"canManageClients\" as const,\n  },\n  {\n    title: \"Campaigns\",\n    url: \"/campaigns\",\n    icon: Megaphone,\n    permission: \"canManageCampaigns\" as const,\n  },\n  {\n    title: \"Tasks\",\n    url: \"/tasks\",\n    icon: ListTodo,\n    permission: null, // Everyone can access tasks\n  },\n  {\n    title: \"Sales Pipeline\",\n    url: \"/pipeline\",\n    icon: TrendingUp,\n    permission: \"canManageLeads\" as const,\n  },\n  {\n    title: \"Content Calendar\",\n    url: \"/content\",\n    icon: Calendar,\n    permission: \"canManageContent\" as const,\n  },\n  {\n    title: \"Invoices & Billing\",\n    url: \"/invoices\",\n    icon: DollarSign,\n    permission: \"canManageInvoices\" as const,\n  },\n  {\n    title: \"Support Tickets\",\n    url: \"/tickets\",\n    icon: Ticket,\n    permission: \"canManageTickets\" as const,\n  },\n  {\n    title: \"Onboarding\",\n    url: \"/onboarding\",\n    icon: ClipboardCheck,\n    permission: \"canManageClients\" as const,\n  },\n  {\n    title: \"Messages\",\n    url: \"/messages\",\n    icon: MessageSquare,\n    permission: null, // Everyone can access messages\n  },\n  {\n    title: \"Website Projects\",\n    url: \"/website-projects\",\n    icon: Globe,\n    permission: \"canManageClients\" as const,\n  },\n  {\n    title: \"Analytics\",\n    url: \"/analytics\",\n    icon: BarChart3,\n    permission: \"canManageClients\" as const,\n  },\n];\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n  const { canAccess } = usePermissions();\n\n  const getUserInitials = () => {\n    if (user?.firstName && user?.lastName) {\n      return `${user.firstName[0]}${user.lastName[0]}`.toUpperCase();\n    }\n    return user?.email?.[0]?.toUpperCase() || \"U\";\n  };\n\n  const filteredMenuItems = menuItems.filter(item => {\n    if (!item.permission) return true; // No permission required\n    return canAccess(item.permission);\n  });\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"flex items-center justify-center py-3\">\n        <img \n          src={mtaLogo} \n          alt=\"Marketing Team App\" \n          className=\"h-24 w-auto\"\n          data-testid=\"img-logo\"\n        />\n      </SidebarHeader>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {filteredMenuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild isActive={location === item.url} data-testid={`nav-${item.url === '/' ? 'dashboard' : item.url.slice(1)}`}>\n                    <Link href={item.url}>\n                      <item.icon className=\"w-4 h-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n      <SidebarFooter className=\"p-4\">\n        <div className=\"flex items-center gap-3 mb-3\">\n          <Avatar className=\"h-9 w-9\">\n            <AvatarImage src={user?.profileImageUrl || \"\"} />\n            <AvatarFallback className=\"bg-primary text-primary-foreground text-sm\">\n              {getUserInitials()}\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium truncate\" data-testid=\"text-user-name\">\n              {user?.firstName && user?.lastName\n                ? `${user.firstName} ${user.lastName}`\n                : user?.email || \"User\"}\n            </p>\n            <p className=\"text-xs text-muted-foreground capitalize\">{user?.role || \"staff\"}</p>\n          </div>\n        </div>\n        <a\n          href=\"/api/logout\"\n          className=\"flex items-center gap-2 text-sm text-muted-foreground hover-elevate rounded-md px-3 py-2 transition-colors\"\n          data-testid=\"button-logout\"\n        >\n          <LogOut className=\"w-4 h-4\" />\n          <span>Log Out</span>\n        </a>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n","size_bytes":4879},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"replit.md":{"content":"# Marketing Team App CRM\n\n## Overview\n\nMarketing Team App CRM (MTA CRM) is a comprehensive customer relationship management system designed specifically for digital marketing agencies. The application manages the complete client lifecycle including client profiles, campaign tracking, lead pipeline management, content approval workflows, invoicing, ticket support, task management with team collaboration, onboarding processes, team communication, website development tracking with SSL/hosting monitoring, and comprehensive analytics dashboards.\n\nThe system is built as a modern full-stack web application with a React-based frontend and Express.js backend, featuring real-time data synchronization, role-based access control, and a premium glass morphism design system.\n\n**Recent Updates (October 2025):**\n- **Authentication Migration:** Migrated from Replit Auth (OIDC) to username/password authentication using Passport Local Strategy for universal deployment compatibility (works on Render, AWS, Azure, etc.)\n- **Task Progress Dashboard:** Added comprehensive task tracking with visual progress bar showing completion percentage and breakdown by status (Completed, In Progress, In Review, Pending)\n- Enhanced landing page with clear role-based access information for Admins, Staff, and Clients\n- Website development tracker with automated SSL certificate and hosting expiry alerts\n- Comprehensive analytics dashboard with platform filtering and client-specific metrics\n- Domain and hosting monitoring with visual expiration warnings\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & Build System:**\n- **React 18** with TypeScript for type-safe component development\n- **Vite** as the build tool and development server with hot module replacement\n- **Wouter** for lightweight client-side routing\n- **TanStack Query (React Query)** for server state management, caching, and data synchronization\n\n**UI Component System:**\n- **Shadcn/ui** component library built on Radix UI primitives for accessible, unstyled components\n- **Tailwind CSS** for utility-first styling with custom design tokens\n- **Design Philosophy:** Premium SaaS aesthetic with glass morphism, depth layers, gradients, and sophisticated animations inspired by Linear, Stripe Dashboard, and Vercel\n\n**State Management Strategy:**\n- Server state managed via React Query with aggressive caching (`staleTime: Infinity`)\n- Local UI state managed with React hooks\n- Authentication state synchronized through React Query with special 401 handling\n- Form state managed with React Hook Form and Zod validation\n\n**Key Design Patterns:**\n- Component composition using Radix UI Slot pattern for flexible, reusable components\n- Custom hooks for cross-cutting concerns (useAuth, usePermissions, useToast)\n- Centralized API client with credential inclusion for authenticated requests\n- Path aliases (@/, @shared/, @assets/) for clean imports\n\n### Backend Architecture\n\n**Server Framework:**\n- **Express.js** with TypeScript running on Node.js\n- **HTTP server** created separately to support future WebSocket/real-time features\n- Middleware pipeline for logging, JSON parsing, and error handling\n\n**Authentication & Authorization:**\n- **Replit Auth (OpenID Connect)** for user authentication via OAuth flow\n- **Passport.js** with OpenID Client strategy for session management\n- **Express Session** with PostgreSQL-backed session store for persistence\n- **Role-Based Access Control (RBAC)** with three roles: Admin, Staff, Client\n- Granular permissions system controlling access to specific features\n\n**API Design:**\n- RESTful endpoints organized by resource (clients, campaigns, leads, etc.)\n- Consistent error handling with structured validation errors\n- Request/response logging with timing metrics\n- Zod schema validation on all input data\n\n**Database Layer:**\n- **Drizzle ORM** for type-safe database operations and migrations\n- **Neon Serverless PostgreSQL** with WebSocket support for serverless deployments\n- Connection pooling via @neondatabase/serverless\n- Schema-first design with TypeScript types auto-generated from Drizzle schemas\n\n### Data Storage Solutions\n\n**Primary Database (PostgreSQL):**\n- **Schema Design:** Normalized relational model with foreign key relationships\n- **Key Tables:** users, clients (with Stripe integration), campaigns, tasks, taskComments, leads, leadActivities, leadAutomations, contentPosts, invoices, tickets, messages, onboardingTasks, clientDocuments, websiteProjects, projectFeedback, analyticsMetrics, sessions\n- **Relationships:** One-to-many (clientâ†’campaigns, clientâ†’leads, taskâ†’taskComments) and many-to-many via junction patterns\n- **Timestamps:** Automatic created_at/updated_at tracking on all entities\n- **Data Types:** Extensive use of JSONB for flexible metadata and arrays for tags/categories\n- **Stripe Integration:** Client records link to Stripe customers and subscriptions for billing automation\n- **Lead Management:** Enhanced pipeline with stages (Prospectâ†’Qualifiedâ†’Proposalâ†’Closed), source tracking, activities log, and automation workflows\n- **Website Projects:** Development tracker with stages (Designâ†’Devâ†’QAâ†’Launch), SSL/DNS monitoring, and client feedback system\n- **Analytics:** Comprehensive metrics storage for social media, ads, and website analytics across multiple platforms\n\n**File Storage (Google Cloud Storage):**\n- **Object Storage Service** abstraction layer for file uploads\n- **Replit Sidecar** integration for credential management\n- **ACL System:** Custom object-level access control with owner/visibility/permissions model\n- **Uppy Integration:** Client-side file uploader with AWS S3-compatible uploads\n\n**Session Storage:**\n- PostgreSQL table for persistent sessions (connect-pg-simple)\n- 7-day session TTL with HTTP-only secure cookies\n\n### Authentication and Authorization\n\n**Authentication Flow:**\n- OpenID Connect discovery with Replit as identity provider\n- Authorization code flow with PKCE\n- Session-based authentication with encrypted cookies\n- Automatic token refresh and session updates\n\n**Authorization Model:**\n- **Role Hierarchy:** Admin > Staff > Client\n- **Permission Mapping:** Each role mapped to specific capabilities (canManageUsers, canManageClients, etc.)\n- **Middleware Guards:** requireRole() and requirePermission() decorators for route protection\n- **Client-Side Enforcement:** usePermissions() hook for conditional UI rendering\n\n**Security Measures:**\n- CSRF protection via session middleware\n- HTTP-only, secure cookies in production\n- Credential inclusion on all authenticated requests\n- 401 handling with special returnNull option for public routes\n\n### External Dependencies\n\n**Cloud Services:**\n- **Google Cloud Storage:** Object/file storage with Replit-managed credentials\n- **Neon Database:** Serverless PostgreSQL with WebSocket support for connection pooling\n- **Replit Infrastructure:** OIDC authentication provider, sidecar service for secrets management\n\n**Payment Processing:**\n- **Stripe:** Full subscription tracking integration\n  - Secure API endpoints for subscription data retrieval\n  - Monthly Recurring Revenue (MRR) calculation with proper handling of quantities and billing intervals\n  - Customer data sanitization to prevent PII leakage\n  - Subscription status tracking linked to client records via stripeCustomerId and stripeSubscriptionId fields\n  - Dashboard metrics showing active subscriptions count and total MRR\n  - Invoices page displays active subscriptions with client name matching\n\n**Third-Party Libraries:**\n- **Radix UI:** Accessible component primitives (accordion, dialog, dropdown, popover, etc.)\n- **Uppy:** File upload library with dashboard UI and S3 compatibility\n- **Memoizee:** Function memoization for OIDC config caching\n- **Zod:** Runtime type validation and schema parsing\n- **Drizzle Kit:** Database migration management\n\n**Development Tools:**\n- **Replit Vite Plugins:** Runtime error modal, cartographer (dev tools), dev banner\n- **TSX:** TypeScript execution for development server\n- **ESBuild:** Production bundling for server code","size_bytes":8169},"client/src/pages/tasks.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Calendar, User, ListTodo, KanbanSquare, Filter } from \"lucide-react\";\nimport type { Task, InsertTask, Client, User as UserType } from \"@shared/schema\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\nconst taskFormSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().optional(),\n  status: z.enum([\"todo\", \"in_progress\", \"review\", \"completed\"]),\n  priority: z.enum([\"low\", \"normal\", \"high\", \"urgent\"]),\n  dueDate: z.string().optional(),\n  campaignId: z.string().optional(),\n  clientId: z.string().optional(),\n  assignedToId: z.string().optional(),\n});\n\ntype TaskFormData = z.infer<typeof taskFormSchema>;\n\nexport default function TasksPage() {\n  const { toast } = useToast();\n  const [viewMode, setViewMode] = useState<\"list\" | \"kanban\">(\"kanban\");\n  const [filterStatus, setFilterStatus] = useState<string>(\"all\");\n  const [filterPriority, setFilterPriority] = useState<string>(\"all\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n\n  const { data: tasks = [], isLoading } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\"],\n  });\n\n  const { data: clients = [] } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\"],\n    retry: false,\n    meta: { returnNull: true }, // Don't throw error if forbidden\n  });\n\n  const { data: users = [] } = useQuery<UserType[]>({\n    queryKey: [\"/api/users\"],\n    retry: false,\n  });\n\n  const form = useForm<TaskFormData>({\n    resolver: zodResolver(taskFormSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      status: \"todo\",\n      priority: \"normal\",\n      dueDate: \"\",\n      campaignId: \"\",\n      clientId: \"\",\n      assignedToId: \"\",\n    },\n  });\n\n  const createTaskMutation = useMutation({\n    mutationFn: async (data: TaskFormData) => {\n      const taskData: Partial<InsertTask> = {\n        ...data,\n        dueDate: data.dueDate ? new Date(data.dueDate) : undefined,\n        campaignId: data.campaignId || undefined,\n        clientId: data.clientId || undefined,\n        assignedToId: data.assignedToId || undefined,\n      };\n      return apiRequest(\"/api/tasks\", \"POST\", taskData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      toast({ title: \"Task created successfully\" });\n      setIsCreateDialogOpen(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({ title: \"Failed to create task\", variant: \"destructive\" });\n    },\n  });\n\n  const updateTaskStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      return apiRequest(`/api/tasks/${id}`, \"PATCH\", { \n        status,\n        completedAt: status === \"completed\" ? new Date() : null,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n    },\n  });\n\n  const filteredTasks = tasks.filter((task) => {\n    if (filterStatus !== \"all\" && task.status !== filterStatus) return false;\n    if (filterPriority !== \"all\" && task.priority !== filterPriority) return false;\n    return true;\n  });\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"urgent\": return \"bg-gradient-to-r from-red-500 to-red-600 text-white\";\n      case \"high\": return \"bg-gradient-to-r from-orange-500 to-orange-600 text-white\";\n      case \"normal\": return \"bg-gradient-to-r from-blue-500 to-blue-600 text-white\";\n      case \"low\": return \"bg-gradient-to-r from-gray-500 to-gray-600 text-white\";\n      default: return \"bg-gradient-to-r from-gray-500 to-gray-600 text-white\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\": return \"bg-gradient-to-r from-green-500 to-emerald-600 text-white\";\n      case \"in_progress\": return \"bg-gradient-to-r from-blue-500 to-blue-600 text-white\";\n      case \"review\": return \"bg-gradient-to-r from-purple-500 to-purple-600 text-white\";\n      case \"todo\": return \"bg-gradient-to-r from-gray-500 to-gray-600 text-white\";\n      default: return \"bg-gradient-to-r from-gray-500 to-gray-600 text-white\";\n    }\n  };\n\n  const renderKanbanView = () => {\n    const columns = [\n      { id: \"todo\", title: \"To Do\", icon: \"ðŸ“‹\" },\n      { id: \"in_progress\", title: \"In Progress\", icon: \"âš¡\" },\n      { id: \"review\", title: \"Review\", icon: \"ðŸ‘€\" },\n      { id: \"completed\", title: \"Completed\", icon: \"âœ…\" },\n    ];\n\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {columns.map((column) => {\n          const columnTasks = filteredTasks.filter((task) => task.status === column.id);\n          \n          return (\n            <div key={column.id} className=\"flex flex-col\">\n              <div className=\"mb-4\">\n                <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                  <span>{column.icon}</span>\n                  {column.title}\n                  <Badge variant=\"secondary\" className=\"ml-auto\">\n                    {columnTasks.length}\n                  </Badge>\n                </h3>\n              </div>\n              <div className=\"space-y-3 flex-1\">\n                {columnTasks.map((task) => (\n                  <Card \n                    key={task.id} \n                    className=\"hover-elevate active-elevate-2 cursor-pointer transition-all\"\n                    data-testid={`task-card-${task.id}`}\n                  >\n                    <CardHeader className=\"p-4 space-y-2\">\n                      <div className=\"flex items-start justify-between gap-2\">\n                        <h4 className=\"font-semibold text-sm line-clamp-2\">{task.title}</h4>\n                        <Badge className={getPriorityColor(task.priority)} variant=\"secondary\">\n                          {task.priority}\n                        </Badge>\n                      </div>\n                      {task.description && (\n                        <p className=\"text-xs text-muted-foreground line-clamp-2\">{task.description}</p>\n                      )}\n                      <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                        {task.dueDate && (\n                          <div className=\"flex items-center gap-1\">\n                            <Calendar className=\"w-3 h-3\" />\n                            {new Date(task.dueDate).toLocaleDateString()}\n                          </div>\n                        )}\n                        {task.assignedToId && (\n                          <div className=\"flex items-center gap-1\">\n                            <User className=\"w-3 h-3\" />\n                            <span>Assigned</span>\n                          </div>\n                        )}\n                      </div>\n                    </CardHeader>\n                  </Card>\n                ))}\n                {columnTasks.length === 0 && (\n                  <div className=\"text-center py-8 text-muted-foreground text-sm\">\n                    No tasks\n                  </div>\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  const renderListView = () => {\n    return (\n      <div className=\"space-y-3\">\n        {filteredTasks.map((task) => (\n          <Card key={task.id} className=\"hover-elevate active-elevate-2\" data-testid={`task-card-${task.id}`}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-start justify-between gap-4\">\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center gap-3 mb-2\">\n                    <h3 className=\"font-semibold\">{task.title}</h3>\n                    <Badge className={getStatusColor(task.status)} variant=\"secondary\">\n                      {task.status.replace(\"_\", \" \")}\n                    </Badge>\n                    <Badge className={getPriorityColor(task.priority)} variant=\"secondary\">\n                      {task.priority}\n                    </Badge>\n                  </div>\n                  {task.description && (\n                    <p className=\"text-sm text-muted-foreground mb-3\">{task.description}</p>\n                  )}\n                  <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                    {task.dueDate && (\n                      <div className=\"flex items-center gap-1\">\n                        <Calendar className=\"w-4 h-4\" />\n                        Due: {new Date(task.dueDate).toLocaleDateString()}\n                      </div>\n                    )}\n                    {task.assignedToId && (\n                      <div className=\"flex items-center gap-1\">\n                        <User className=\"w-4 h-4\" />\n                        Assigned\n                      </div>\n                    )}\n                  </div>\n                </div>\n                <Select\n                  value={task.status}\n                  onValueChange={(status) => updateTaskStatusMutation.mutate({ id: task.id, status })}\n                >\n                  <SelectTrigger className=\"w-40\" data-testid={`select-status-${task.id}`}>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"todo\">To Do</SelectItem>\n                    <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                    <SelectItem value=\"review\">Review</SelectItem>\n                    <SelectItem value=\"completed\">Completed</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n        {filteredTasks.length === 0 && (\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground\">No tasks match the current filters</p>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <p className=\"text-muted-foreground\">Loading tasks...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col h-full p-6 space-y-6\">\n      <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-primary to-primary/70 bg-clip-text text-transparent\">\n            Task Management\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">Organize and track your team's tasks</p>\n        </div>\n        \n        <div className=\"flex flex-wrap items-center gap-3\">\n          <div className=\"flex items-center gap-2 rounded-lg border bg-card p-1\">\n            <Button\n              variant={viewMode === \"list\" ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setViewMode(\"list\")}\n              data-testid=\"button-view-list\"\n            >\n              <ListTodo className=\"w-4 h-4 mr-2\" />\n              List\n            </Button>\n            <Button\n              variant={viewMode === \"kanban\" ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setViewMode(\"kanban\")}\n              data-testid=\"button-view-kanban\"\n            >\n              <KanbanSquare className=\"w-4 h-4 mr-2\" />\n              Kanban\n            </Button>\n          </div>\n\n          <Select value={filterStatus} onValueChange={setFilterStatus}>\n            <SelectTrigger className=\"w-40\" data-testid=\"select-filter-status\">\n              <Filter className=\"w-4 h-4 mr-2\" />\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Status</SelectItem>\n              <SelectItem value=\"todo\">To Do</SelectItem>\n              <SelectItem value=\"in_progress\">In Progress</SelectItem>\n              <SelectItem value=\"review\">Review</SelectItem>\n              <SelectItem value=\"completed\">Completed</SelectItem>\n            </SelectContent>\n          </Select>\n\n          <Select value={filterPriority} onValueChange={setFilterPriority}>\n            <SelectTrigger className=\"w-40\" data-testid=\"select-filter-priority\">\n              <Filter className=\"w-4 h-4 mr-2\" />\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Priority</SelectItem>\n              <SelectItem value=\"low\">Low</SelectItem>\n              <SelectItem value=\"normal\">Normal</SelectItem>\n              <SelectItem value=\"high\">High</SelectItem>\n              <SelectItem value=\"urgent\">Urgent</SelectItem>\n            </SelectContent>\n          </Select>\n\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-create-task\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                New Task\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl glass-strong\">\n              <DialogHeader>\n                <DialogTitle>Create New Task</DialogTitle>\n                <DialogDescription>Add a new task to your workflow</DialogDescription>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit((data) => createTaskMutation.mutate(data))} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Title *</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"Task title\" data-testid=\"input-task-title\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description</FormLabel>\n                        <FormControl>\n                          <Textarea {...field} placeholder=\"Task description\" rows={3} data-testid=\"input-task-description\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"status\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Status *</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-task-status\">\n                                <SelectValue />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"todo\">To Do</SelectItem>\n                              <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                              <SelectItem value=\"review\">Review</SelectItem>\n                              <SelectItem value=\"completed\">Completed</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"priority\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Priority *</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-task-priority\">\n                                <SelectValue />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"low\">Low</SelectItem>\n                              <SelectItem value=\"normal\">Normal</SelectItem>\n                              <SelectItem value=\"high\">High</SelectItem>\n                              <SelectItem value=\"urgent\">Urgent</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"dueDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Due Date</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} data-testid=\"input-task-due-date\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"assignedToId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Assign To</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-task-assignee\">\n                              <SelectValue placeholder=\"Select team member\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {users.map((user) => (\n                              <SelectItem key={user.id} value={user.id}>\n                                {user.firstName && user.lastName\n                                  ? `${user.firstName} ${user.lastName}`\n                                  : user.email}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"clientId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Related Client</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-task-client\">\n                              <SelectValue placeholder=\"Select client (optional)\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {clients.map((client) => (\n                              <SelectItem key={client.id} value={client.id}>\n                                {client.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex justify-end gap-3 pt-4\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setIsCreateDialogOpen(false)}\n                      data-testid=\"button-cancel-task\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" disabled={createTaskMutation.isPending} data-testid=\"button-submit-task\">\n                      {createTaskMutation.isPending ? \"Creating...\" : \"Create Task\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      <div className=\"flex-1 overflow-auto\">\n        {viewMode === \"kanban\" ? renderKanbanView() : renderListView()}\n      </div>\n    </div>\n  );\n}\n","size_bytes":21458},"client/src/pages/analytics.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardHeader, CardTitle, CardContent, CardDescription } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  TrendingUp,\n  TrendingDown,\n  Users,\n  Eye,\n  MousePointer,\n  DollarSign,\n  Target,\n  BarChart3,\n  LineChart,\n  Clock,\n} from \"lucide-react\";\nimport type { Client, AnalyticsMetric } from \"@shared/schema\";\nimport { format } from \"date-fns\";\n\nexport default function Analytics() {\n  const [selectedClient, setSelectedClient] = useState<string>(\"all\");\n  const [selectedPlatform, setSelectedPlatform] = useState<string>(\"all\");\n\n  const { data: clients } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\"],\n  });\n\n  const metricsUrl = selectedClient !== \"all\" \n    ? `/api/analytics/metrics?clientId=${selectedClient}` \n    : \"/api/analytics/metrics\";\n\n  const { data: metrics, isLoading } = useQuery<AnalyticsMetric[]>({\n    queryKey: [metricsUrl],\n  });\n\n  const getFilteredMetrics = () => {\n    if (!metrics) return [];\n    if (selectedPlatform === \"all\") return metrics;\n    return metrics.filter((m) => m.platform === selectedPlatform);\n  };\n\n  const filteredMetrics = getFilteredMetrics();\n\n  const getSocialMetrics = () => {\n    const socialData = filteredMetrics.filter((m) => m.metricType === \"social\");\n    if (socialData.length === 0) return null;\n\n    const latestMetric = socialData[0];\n    const metrics = latestMetric?.metrics as any;\n\n    return {\n      followers: metrics?.followers || 0,\n      engagementRate: metrics?.engagement_rate || 0,\n      reach: metrics?.reach || 0,\n      clicks: metrics?.clicks || 0,\n      ctr: metrics?.ctr || 0,\n    };\n  };\n\n  const getAdMetrics = () => {\n    const adData = filteredMetrics.filter((m) => m.metricType === \"ads\");\n    if (adData.length === 0) return null;\n\n    const totalSpend = adData.reduce((sum, m) => {\n      const metrics = m.metrics as any;\n      return sum + (metrics?.spend || 0);\n    }, 0);\n\n    const totalRevenue = adData.reduce((sum, m) => {\n      const metrics = m.metrics as any;\n      return sum + (metrics?.revenue || 0);\n    }, 0);\n\n    const totalConversions = adData.reduce((sum, m) => {\n      const metrics = m.metrics as any;\n      return sum + (metrics?.conversions || 0);\n    }, 0);\n\n    const avgCTR = adData.length > 0\n      ? adData.reduce((sum, m) => {\n          const metrics = m.metrics as any;\n          return sum + (metrics?.ctr || 0);\n        }, 0) / adData.length\n      : 0;\n\n    const roas = totalSpend > 0 ? totalRevenue / totalSpend : 0;\n\n    return {\n      spend: totalSpend,\n      revenue: totalRevenue,\n      roas,\n      conversions: totalConversions,\n      ctr: avgCTR,\n    };\n  };\n\n  const getWebsiteMetrics = () => {\n    const websiteData = filteredMetrics.filter((m) => m.metricType === \"website\");\n    if (websiteData.length === 0) return null;\n\n    const latestMetric = websiteData[0];\n    const metrics = latestMetric?.metrics as any;\n\n    return {\n      pageViews: metrics?.page_views || 0,\n      bounceRate: metrics?.bounce_rate || 0,\n      avgSessionDuration: metrics?.avg_session_duration || 0,\n      conversionRate: metrics?.conversion_rate || 0,\n    };\n  };\n\n  const socialMetrics = getSocialMetrics();\n  const adMetrics = getAdMetrics();\n  const websiteMetrics = getWebsiteMetrics();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-full gradient-mesh\">\n        <div className=\"p-6 lg:p-8\">\n          <div className=\"space-y-4\">\n            {[...Array(6)].map((_, i) => (\n              <Card key={i} className=\"border-0 shadow-lg\">\n                <CardHeader>\n                  <div className=\"h-6 bg-muted/50 rounded w-48 shimmer\"></div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-20 bg-muted/50 rounded shimmer\"></div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-full gradient-mesh\">\n      <div className=\"p-6 lg:p-8 xl:p-12 space-y-8\">\n        <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n          <div className=\"space-y-2\">\n            <h1 className=\"text-4xl font-bold tracking-tight text-gradient-purple\" data-testid=\"text-page-title\">\n              Analytics & Reports\n            </h1>\n            <p className=\"text-lg text-muted-foreground\">Track performance across all channels</p>\n          </div>\n          <div className=\"flex gap-3\">\n            <Select value={selectedClient} onValueChange={setSelectedClient}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-client\">\n                <SelectValue placeholder=\"All Clients\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Clients</SelectItem>\n                {clients?.map((client) => (\n                  <SelectItem key={client.id} value={client.id}>\n                    {client.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Select value={selectedPlatform} onValueChange={setSelectedPlatform}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-platform\">\n                <SelectValue placeholder=\"All Platforms\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Platforms</SelectItem>\n                <SelectItem value=\"facebook\">Facebook</SelectItem>\n                <SelectItem value=\"instagram\">Instagram</SelectItem>\n                <SelectItem value=\"google_ads\">Google Ads</SelectItem>\n                <SelectItem value=\"google_analytics\">Google Analytics</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        <Tabs defaultValue=\"social\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full max-w-md grid-cols-3\">\n            <TabsTrigger value=\"social\" data-testid=\"tab-social\">Social Media</TabsTrigger>\n            <TabsTrigger value=\"ads\" data-testid=\"tab-ads\">Advertising</TabsTrigger>\n            <TabsTrigger value=\"website\" data-testid=\"tab-website\">Website</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"social\" className=\"space-y-6\">\n            {!socialMetrics ? (\n              <Card className=\"border-0 shadow-lg\">\n                <CardContent className=\"p-12 text-center text-muted-foreground\">\n                  <BarChart3 className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                  <p>No social media metrics available</p>\n                  <p className=\"text-sm mt-2\">Import data from your social media platforms to see insights</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n                <Card className=\"border-0 shadow-lg\" data-testid=\"card-followers\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Followers</CardTitle>\n                    <Users className=\"w-4 h-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-3xl font-bold\" data-testid=\"text-followers\">\n                      {socialMetrics.followers.toLocaleString()}\n                    </div>\n                    <div className=\"flex items-center gap-1 mt-2 text-sm text-emerald-600\">\n                      <TrendingUp className=\"w-3 h-3\" />\n                      <span>Growth tracking</span>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-0 shadow-lg\" data-testid=\"card-engagement\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Engagement Rate</CardTitle>\n                    <Target className=\"w-4 h-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-3xl font-bold\" data-testid=\"text-engagement-rate\">\n                      {socialMetrics.engagementRate.toFixed(2)}%\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mt-2\">Avg. across all platforms</p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-0 shadow-lg\" data-testid=\"card-reach\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Reach</CardTitle>\n                    <Eye className=\"w-4 h-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-3xl font-bold\" data-testid=\"text-reach\">\n                      {socialMetrics.reach.toLocaleString()}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mt-2\">Total impressions</p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-0 shadow-lg\" data-testid=\"card-clicks\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Clicks</CardTitle>\n                    <MousePointer className=\"w-4 h-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-3xl font-bold\" data-testid=\"text-clicks\">\n                      {socialMetrics.clicks.toLocaleString()}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mt-2\">Link clicks</p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-0 shadow-lg\" data-testid=\"card-ctr\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Click-Through Rate</CardTitle>\n                    <LineChart className=\"w-4 h-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-3xl font-bold\" data-testid=\"text-ctr\">\n                      {socialMetrics.ctr.toFixed(2)}%\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mt-2\">From impressions to clicks</p>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"ads\" className=\"space-y-6\">\n            {!adMetrics ? (\n              <Card className=\"border-0 shadow-lg\">\n                <CardContent className=\"p-12 text-center text-muted-foreground\">\n                  <DollarSign className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                  <p>No advertising metrics available</p>\n                  <p className=\"text-sm mt-2\">Connect your ad platforms to track ROAS and performance</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n                <Card className=\"border-0 shadow-lg\" data-testid=\"card-spend\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Spend</CardTitle>\n                    <DollarSign className=\"w-4 h-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-3xl font-bold\" data-testid=\"text-spend\">\n                      ${adMetrics.spend.toLocaleString()}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mt-2\">All platforms</p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-0 shadow-lg\" data-testid=\"card-roas\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">ROAS</CardTitle>\n                    <TrendingUp className=\"w-4 h-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-3xl font-bold\" data-testid=\"text-roas\">\n                      {adMetrics.roas.toFixed(2)}x\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mt-2\">Return on ad spend</p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-0 shadow-lg\" data-testid=\"card-conversions\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Conversions</CardTitle>\n                    <Target className=\"w-4 h-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-3xl font-bold\" data-testid=\"text-conversions\">\n                      {adMetrics.conversions.toLocaleString()}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mt-2\">Total conversions</p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-0 shadow-lg\" data-testid=\"card-ad-ctr\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Ad CTR</CardTitle>\n                    <LineChart className=\"w-4 h-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-3xl font-bold\" data-testid=\"text-ad-ctr\">\n                      {adMetrics.ctr.toFixed(2)}%\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mt-2\">Click-through rate</p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-0 shadow-lg\" data-testid=\"card-revenue\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Revenue</CardTitle>\n                    <DollarSign className=\"w-4 h-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-3xl font-bold\" data-testid=\"text-revenue\">\n                      ${adMetrics.revenue.toLocaleString()}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mt-2\">Total revenue generated</p>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"website\" className=\"space-y-6\">\n            {!websiteMetrics ? (\n              <Card className=\"border-0 shadow-lg\">\n                <CardContent className=\"p-12 text-center text-muted-foreground\">\n                  <BarChart3 className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                  <p>No website analytics available</p>\n                  <p className=\"text-sm mt-2\">Connect Google Analytics to track website performance</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n                <Card className=\"border-0 shadow-lg\" data-testid=\"card-page-views\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Page Views</CardTitle>\n                    <Eye className=\"w-4 h-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-3xl font-bold\" data-testid=\"text-page-views\">\n                      {websiteMetrics.pageViews.toLocaleString()}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mt-2\">Total visits</p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-0 shadow-lg\" data-testid=\"card-bounce-rate\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Bounce Rate</CardTitle>\n                    <TrendingDown className=\"w-4 h-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-3xl font-bold\" data-testid=\"text-bounce-rate\">\n                      {websiteMetrics.bounceRate.toFixed(1)}%\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mt-2\">Single-page sessions</p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-0 shadow-lg\" data-testid=\"card-session-duration\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Avg. Session</CardTitle>\n                    <Clock className=\"w-4 h-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-3xl font-bold\" data-testid=\"text-session-duration\">\n                      {Math.floor(websiteMetrics.avgSessionDuration / 60)}m\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mt-2\">\n                      {websiteMetrics.avgSessionDuration % 60}s per visit\n                    </p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-0 shadow-lg\" data-testid=\"card-conversion-rate\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Conversion Rate</CardTitle>\n                    <Target className=\"w-4 h-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-3xl font-bold\" data-testid=\"text-conversion-rate\">\n                      {websiteMetrics.conversionRate.toFixed(2)}%\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mt-2\">Visitors to conversions</p>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n\n        {filteredMetrics.length > 0 && (\n          <Card className=\"border-0 shadow-lg\">\n            <CardHeader>\n              <CardTitle>Recent Data Points</CardTitle>\n              <CardDescription>Latest metrics from all platforms</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {filteredMetrics.slice(0, 5).map((metric) => (\n                  <div\n                    key={metric.id}\n                    className=\"flex items-center justify-between p-4 rounded-lg bg-muted/50 hover-elevate\"\n                    data-testid={`metric-${metric.id}`}\n                  >\n                    <div className=\"flex items-center gap-4\">\n                      <Badge variant=\"outline\" className=\"capitalize\">\n                        {metric.metricType}\n                      </Badge>\n                      <div>\n                        <p className=\"font-medium capitalize\">{metric.platform?.replace(\"_\", \" \")}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {format(new Date(metric.date), \"MMM d, yyyy\")}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":20317},"client/src/pages/website-projects.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardHeader, CardTitle, CardContent, CardDescription, CardFooter } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Globe, Calendar, AlertTriangle, CheckCircle2, Clock, Shield, Server } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { WebsiteProject, InsertWebsiteProject, Client } from \"@shared/schema\";\nimport { insertWebsiteProjectSchema } from \"@shared/schema\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { format } from \"date-fns\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\nconst STAGES = [\n  { id: \"design\", label: \"Design\", color: \"bg-blue-500\" },\n  { id: \"dev\", label: \"Development\", color: \"bg-purple-500\" },\n  { id: \"qa\", label: \"QA Testing\", color: \"bg-amber-500\" },\n  { id: \"launch\", label: \"Launched\", color: \"bg-emerald-500\" },\n];\n\nconst formSchema = insertWebsiteProjectSchema\n  .omit({\n    sslStatus: true,\n    dnsStatus: true,\n    dnsLastChecked: true,\n  })\n  .extend({\n    hostingExpiry: z.string().optional(),\n    sslExpiry: z.string().optional(),\n    launchDate: z.string().optional(),\n  });\n\ntype FormValues = z.infer<typeof formSchema>;\n\nexport default function WebsiteProjects() {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingProject, setEditingProject] = useState<WebsiteProject | null>(null);\n  const { toast } = useToast();\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      clientId: \"\",\n      name: \"\",\n      stage: \"design\",\n      url: \"\",\n      domain: \"\",\n      hostingProvider: \"\",\n      progress: 0,\n    },\n  });\n\n  const { data: projects, isLoading: projectsLoading } = useQuery<WebsiteProject[]>({\n    queryKey: [\"/api/website-projects\"],\n  });\n\n  const { data: clients } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\"],\n  });\n\n  const createProjectMutation = useMutation({\n    mutationFn: async (data: InsertWebsiteProject) => {\n      return await apiRequest(\"POST\", \"/api/website-projects\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/website-projects\"] });\n      setDialogOpen(false);\n      form.reset();\n      toast({ title: \"Website project created successfully\" });\n    },\n    onError: (error: any) => {\n      const errorMessage = error?.message || \"Failed to create website project\";\n      toast({ title: errorMessage, variant: \"destructive\" });\n    },\n  });\n\n  const updateProjectMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertWebsiteProject> }) => {\n      return await apiRequest(\"PATCH\", `/api/website-projects/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/website-projects\"] });\n      setEditingProject(null);\n      setDialogOpen(false);\n      form.reset();\n      toast({ title: \"Website project updated successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ title: error?.message || \"Failed to update project\", variant: \"destructive\" });\n    },\n  });\n\n  const handleSubmit = (values: FormValues) => {\n    const projectData: InsertWebsiteProject = {\n      clientId: values.clientId,\n      name: values.name,\n      stage: values.stage,\n      url: values.url || null,\n      domain: values.domain || null,\n      hostingProvider: values.hostingProvider || null,\n      hostingExpiry: values.hostingExpiry ? new Date(values.hostingExpiry) : null,\n      sslExpiry: values.sslExpiry ? new Date(values.sslExpiry) : null,\n      progress: values.progress || 0,\n      launchDate: values.launchDate ? new Date(values.launchDate) : null,\n    };\n\n    if (editingProject) {\n      updateProjectMutation.mutate({ id: editingProject.id, data: projectData });\n    } else {\n      createProjectMutation.mutate(projectData);\n    }\n  };\n\n  const openEditDialog = (project: WebsiteProject) => {\n    setEditingProject(project);\n    form.reset({\n      clientId: project.clientId,\n      name: project.name,\n      stage: project.stage,\n      url: project.url ?? \"\",\n      domain: project.domain ?? \"\",\n      hostingProvider: project.hostingProvider ?? \"\",\n      hostingExpiry: project.hostingExpiry ? format(new Date(project.hostingExpiry), \"yyyy-MM-dd\") : \"\",\n      sslExpiry: project.sslExpiry ? format(new Date(project.sslExpiry), \"yyyy-MM-dd\") : \"\",\n      progress: project.progress ?? 0,\n      launchDate: project.launchDate ? format(new Date(project.launchDate), \"yyyy-MM-dd\") : \"\",\n    });\n    setDialogOpen(true);\n  };\n\n  const getStageColor = (stage: string) => {\n    return STAGES.find(s => s.id === stage)?.color || \"bg-slate-500\";\n  };\n\n  const getClientName = (clientId: string) => {\n    return clients?.find(c => c.id === clientId)?.name || \"Unknown Client\";\n  };\n\n  const getSSLStatusIcon = (status: string | null) => {\n    switch (status) {\n      case \"active\":\n        return <CheckCircle2 className=\"w-4 h-4 text-emerald-500\" />;\n      case \"expiring_soon\":\n        return <AlertTriangle className=\"w-4 h-4 text-amber-500\" />;\n      case \"expired\":\n        return <AlertTriangle className=\"w-4 h-4 text-red-500\" />;\n      default:\n        return <Clock className=\"w-4 h-4 text-muted-foreground\" />;\n    }\n  };\n\n  const isExpiringSoon = (expiryDate: Date | string | null, days: number = 30) => {\n    if (!expiryDate) return false;\n    const expiry = new Date(expiryDate);\n    const now = new Date();\n    const daysUntilExpiry = Math.floor((expiry.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n    return daysUntilExpiry >= 0 && daysUntilExpiry <= days;\n  };\n\n  const isExpired = (expiryDate: Date | string | null) => {\n    if (!expiryDate) return false;\n    const expiry = new Date(expiryDate);\n    const now = new Date();\n    return expiry < now;\n  };\n\n  const getDaysUntilExpiry = (expiryDate: Date | string | null) => {\n    if (!expiryDate) return null;\n    const expiry = new Date(expiryDate);\n    const now = new Date();\n    return Math.floor((expiry.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n  };\n\n  if (projectsLoading) {\n    return (\n      <div className=\"min-h-full gradient-mesh\">\n        <div className=\"p-6 lg:p-8\">\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <Card key={i} className=\"border-0 shadow-lg\">\n                <CardHeader>\n                  <div className=\"h-6 bg-muted/50 rounded w-48 shimmer\"></div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-20 bg-muted/50 rounded shimmer\"></div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const projectsByStage = STAGES.map(stage => ({\n    ...stage,\n    projects: projects?.filter(p => p.stage === stage.id) || [],\n  }));\n\n  return (\n    <div className=\"min-h-full gradient-mesh\">\n      <div className=\"p-6 lg:p-8 xl:p-12 space-y-8\">\n        <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n          <div className=\"space-y-2\">\n            <h1 className=\"text-4xl font-bold tracking-tight text-gradient-purple\" data-testid=\"text-page-title\">\n              Website Projects\n            </h1>\n            <p className=\"text-lg text-muted-foreground\">Track website development from design to launch</p>\n          </div>\n          <Dialog\n            open={dialogOpen}\n            onOpenChange={(open) => {\n              setDialogOpen(open);\n              if (!open) {\n                form.reset();\n                setEditingProject(null);\n              }\n            }}\n          >\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-project\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                New Project\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl glass-strong\">\n              <DialogHeader>\n                <DialogTitle className=\"text-2xl\">\n                  {editingProject ? \"Edit Website Project\" : \"Create New Website Project\"}\n                </DialogTitle>\n                <DialogDescription>\n                  {editingProject ? \"Update the project details\" : \"Add a new website development project\"}\n                </DialogDescription>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n                  <div className=\"grid gap-6 md:grid-cols-2\">\n                    <FormField\n                      control={form.control}\n                      name=\"clientId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Client</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value ?? \"\"}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-client\">\n                                <SelectValue placeholder=\"Select client\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {clients?.map((client) => (\n                                <SelectItem key={client.id} value={client.id}>\n                                  {client.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Project Name</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"Corporate Website Redesign\" data-testid=\"input-name\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid gap-6 md:grid-cols-2\">\n                    <FormField\n                      control={form.control}\n                      name=\"stage\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Stage</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value ?? \"\"}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-stage\">\n                                <SelectValue placeholder=\"Select stage\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {STAGES.map((stage) => (\n                                <SelectItem key={stage.id} value={stage.id}>\n                                  {stage.label}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"progress\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Progress (%)</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              min=\"0\"\n                              max=\"100\"\n                              {...field}\n                              onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              value={field.value ?? \"\"}\n                              data-testid=\"input-progress\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid gap-6 md:grid-cols-2\">\n                    <FormField\n                      control={form.control}\n                      name=\"domain\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Domain</FormLabel>\n                          <FormControl>\n                            <Input {...field} value={field.value ?? \"\"} placeholder=\"example.com\" data-testid=\"input-domain\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"url\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Live URL</FormLabel>\n                          <FormControl>\n                            <Input {...field} value={field.value ?? \"\"} placeholder=\"https://example.com\" data-testid=\"input-url\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid gap-6 md:grid-cols-2\">\n                    <FormField\n                      control={form.control}\n                      name=\"hostingProvider\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Hosting Provider</FormLabel>\n                          <FormControl>\n                            <Input {...field} value={field.value ?? \"\"} placeholder=\"Vercel, AWS, etc.\" data-testid=\"input-hosting\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"hostingExpiry\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Hosting Expiry Date</FormLabel>\n                          <FormControl>\n                            <Input type=\"date\" {...field} value={field.value ?? \"\"} data-testid=\"input-hosting-expiry\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid gap-6 md:grid-cols-2\">\n                    <FormField\n                      control={form.control}\n                      name=\"sslExpiry\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>SSL Certificate Expiry</FormLabel>\n                          <FormControl>\n                            <Input type=\"date\" {...field} value={field.value ?? \"\"} data-testid=\"input-ssl-expiry\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"launchDate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Launch Date</FormLabel>\n                          <FormControl>\n                            <Input type=\"date\" {...field} value={field.value ?? \"\"} data-testid=\"input-launch-date\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"flex gap-3 justify-end pt-4\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        setDialogOpen(false);\n                        form.reset();\n                        setEditingProject(null);\n                      }}\n                      data-testid=\"button-cancel\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={createProjectMutation.isPending || updateProjectMutation.isPending}\n                      data-testid=\"button-submit-project\"\n                    >\n                      {editingProject ? \"Update Project\" : \"Create Project\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        <div className=\"space-y-8\">\n          {projectsByStage.map((stage) => (\n            <div key={stage.id} className=\"space-y-4\">\n              <div className=\"flex items-center gap-3\">\n                <Badge className={`${stage.color} text-white`}>{stage.label}</Badge>\n                <span className=\"text-sm text-muted-foreground\">\n                  {stage.projects.length} {stage.projects.length === 1 ? \"project\" : \"projects\"}\n                </span>\n              </div>\n\n              {stage.projects.length === 0 ? (\n                <Card className=\"border-0 shadow-lg\">\n                  <CardContent className=\"p-8 text-center text-muted-foreground\">\n                    No projects in {stage.label} stage\n                  </CardContent>\n                </Card>\n              ) : (\n                <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n                  {stage.projects.map((project) => (\n                    <Card\n                      key={project.id}\n                      className=\"border-0 shadow-lg hover-elevate cursor-pointer\"\n                      onClick={() => openEditDialog(project)}\n                      data-testid={`card-project-${project.id}`}\n                    >\n                      <CardHeader>\n                        <div className=\"flex items-start justify-between gap-2\">\n                          <div className=\"space-y-1 flex-1 min-w-0\">\n                            <div className=\"flex items-center gap-2\">\n                              <CardTitle className=\"text-lg truncate\" data-testid={`text-project-name-${project.id}`}>\n                                {project.name}\n                              </CardTitle>\n                              {(isExpired(project.sslExpiry) || isExpired(project.hostingExpiry)) && (\n                                <Badge variant=\"destructive\" className=\"text-xs\">\n                                  <AlertTriangle className=\"w-3 h-3 mr-1\" />\n                                  Expired\n                                </Badge>\n                              )}\n                              {(isExpiringSoon(project.sslExpiry) || isExpiringSoon(project.hostingExpiry)) && \n                               !(isExpired(project.sslExpiry) || isExpired(project.hostingExpiry)) && (\n                                <Badge variant=\"outline\" className=\"text-xs border-amber-500 text-amber-600 dark:text-amber-400\">\n                                  <Clock className=\"w-3 h-3 mr-1\" />\n                                  Expiring Soon\n                                </Badge>\n                              )}\n                            </div>\n                            <CardDescription className=\"truncate\">\n                              {getClientName(project.clientId)}\n                            </CardDescription>\n                          </div>\n                          <Globe className=\"w-5 h-5 text-muted-foreground flex-shrink-0\" />\n                        </div>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div className=\"space-y-2\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-muted-foreground\">Progress</span>\n                            <span className=\"font-medium\">{project.progress}%</span>\n                          </div>\n                          <Progress value={project.progress ?? 0} className=\"h-2\" />\n                        </div>\n\n                        {project.domain && (\n                          <div className=\"flex items-center justify-between text-sm\">\n                            <span className=\"text-muted-foreground\">Domain</span>\n                            <span className=\"font-mono truncate ml-2\">{project.domain}</span>\n                          </div>\n                        )}\n\n                        {project.sslExpiry && (\n                          <div className=\"flex items-center justify-between text-sm\">\n                            <span className=\"text-muted-foreground\">SSL Certificate</span>\n                            <div className=\"flex items-center gap-1\">\n                              <Shield className=\"w-3 h-3\" />\n                              <span className={\n                                isExpired(project.sslExpiry) \n                                  ? \"text-red-600 dark:text-red-400\" \n                                  : isExpiringSoon(project.sslExpiry) \n                                    ? \"text-amber-600 dark:text-amber-400\" \n                                    : \"\"\n                              }>\n                                {isExpired(project.sslExpiry) && \"Expired \"}\n                                {format(new Date(project.sslExpiry), \"MMM d, yyyy\")}\n                              </span>\n                            </div>\n                          </div>\n                        )}\n\n                        {project.hostingExpiry && (\n                          <div className=\"flex items-center justify-between text-sm\">\n                            <span className=\"text-muted-foreground\">Hosting Expires</span>\n                            <div className=\"flex items-center gap-1\">\n                              <Server className=\"w-3 h-3\" />\n                              <span className={\n                                isExpired(project.hostingExpiry) \n                                  ? \"text-red-600 dark:text-red-400\" \n                                  : isExpiringSoon(project.hostingExpiry) \n                                    ? \"text-amber-600 dark:text-amber-400\" \n                                    : \"\"\n                              }>\n                                {isExpired(project.hostingExpiry) && \"Expired \"}\n                                {format(new Date(project.hostingExpiry), \"MMM d, yyyy\")}\n                              </span>\n                            </div>\n                          </div>\n                        )}\n                      </CardContent>\n                      {project.launchDate && (\n                        <CardFooter className=\"text-sm text-muted-foreground\">\n                          <Calendar className=\"w-4 h-4 mr-2\" />\n                          Launched {format(new Date(project.launchDate), \"MMM d, yyyy\")}\n                        </CardFooter>\n                      )}\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":24385},"server/auth.ts":{"content":"// Username/Password Authentication (works on Render and any deployment platform)\nimport passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser, insertUserSchema } from \"@shared/schema\";\nimport { UserRole, rolePermissions } from \"./rbac\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      maxAge: sessionTtl,\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        const user = await storage.getUserByUsername(username);\n        if (!user || !(await comparePasswords(password, user.password))) {\n          return done(null, false, { message: \"Invalid username or password\" });\n        }\n        return done(null, user);\n      } catch (error) {\n        return done(error);\n      }\n    })\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const validatedData = insertUserSchema.parse(req.body);\n      \n      const existingUser = await storage.getUserByUsername(validatedData.username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n\n      // Security: Force all self-registrations to \"staff\" role to prevent privilege escalation\n      const user = await storage.createUser({\n        ...validatedData,\n        password: await hashPassword(validatedData.password),\n        role: \"staff\", // Always assign \"staff\" role, admins must be created by existing admins\n      });\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json({\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          profileImageUrl: user.profileImageUrl,\n          role: user.role,\n          createdAt: user.createdAt,\n          updatedAt: user.updatedAt,\n        });\n      });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Registration failed\" });\n    }\n  });\n\n  app.post(\"/api/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: SelectUser | false, info: any) => {\n      if (err) return next(err);\n      if (!user) {\n        return res.status(401).json({ message: info?.message || \"Invalid credentials\" });\n      }\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(200).json({\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          profileImageUrl: user.profileImageUrl,\n          role: user.role,\n          createdAt: user.createdAt,\n          updatedAt: user.updatedAt,\n        });\n      });\n    })(req, res, next);\n  });\n\n  // Support both GET and POST for logout\n  const handleLogout = (req: any, res: any, next: any) => {\n    req.logout((err: any) => {\n      if (err) return next(err);\n      req.session.destroy((err: any) => {\n        if (err) return next(err);\n        res.clearCookie('connect.sid');\n        // Redirect for GET, return status for POST\n        if (req.method === 'GET') {\n          res.redirect('/');\n        } else {\n          res.sendStatus(200);\n        }\n      });\n    });\n  };\n\n  app.get(\"/api/logout\", handleLogout);\n  app.post(\"/api/logout\", handleLogout);\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    const user = req.user as SelectUser;\n    const permissions = rolePermissions[user.role as UserRole] || rolePermissions[UserRole.STAFF];\n    res.json({\n      id: user.id,\n      username: user.username,\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      profileImageUrl: user.profileImageUrl,\n      role: user.role,\n      createdAt: user.createdAt,\n      updatedAt: user.updatedAt,\n      permissions,\n    });\n  });\n}\n\nexport function isAuthenticated(req: any, res: any, next: any) {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ message: \"Unauthorized\" });\n}\n","size_bytes":5843},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Redirect } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { LayoutDashboard, Users, TrendingUp, Calendar } from \"lucide-react\";\n\nexport default function AuthPage() {\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [loginData, setLoginData] = useState({ username: \"\", password: \"\" });\n  const [registerData, setRegisterData] = useState({\n    username: \"\",\n    password: \"\",\n    email: \"\",\n    firstName: \"\",\n    lastName: \"\",\n  });\n\n  if (user) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutation.mutate(loginData);\n  };\n\n  const handleRegister = (e: React.FormEvent) => {\n    e.preventDefault();\n    registerMutation.mutate(registerData);\n  };\n\n  return (\n    <div className=\"min-h-screen flex\">\n      <div className=\"flex-1 flex items-center justify-center p-8 bg-background\">\n        <div className=\"w-full max-w-md\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-4xl font-bold mb-2 bg-gradient-to-r from-primary to-orange bg-clip-text text-transparent\">\n              MTA CRM\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Marketing Team App - Client Relationship Management\n            </p>\n          </div>\n\n          <Tabs defaultValue=\"login\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"login\" data-testid=\"tab-login\">Login</TabsTrigger>\n              <TabsTrigger value=\"register\" data-testid=\"tab-register\">Register</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"login\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Login</CardTitle>\n                  <CardDescription>\n                    Enter your credentials to access your account\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleLogin} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"login-username\">Username</Label>\n                      <Input\n                        id=\"login-username\"\n                        data-testid=\"input-login-username\"\n                        type=\"text\"\n                        value={loginData.username}\n                        onChange={(e) => setLoginData({ ...loginData, username: e.target.value })}\n                        required\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"login-password\">Password</Label>\n                      <Input\n                        id=\"login-password\"\n                        data-testid=\"input-login-password\"\n                        type=\"password\"\n                        value={loginData.password}\n                        onChange={(e) => setLoginData({ ...loginData, password: e.target.value })}\n                        required\n                      />\n                    </div>\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={loginMutation.isPending}\n                      data-testid=\"button-login-submit\"\n                    >\n                      {loginMutation.isPending ? \"Logging in...\" : \"Login\"}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"register\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Register</CardTitle>\n                  <CardDescription>\n                    Create a new account to get started\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleRegister} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-username\">Username</Label>\n                      <Input\n                        id=\"register-username\"\n                        data-testid=\"input-register-username\"\n                        type=\"text\"\n                        value={registerData.username}\n                        onChange={(e) => setRegisterData({ ...registerData, username: e.target.value })}\n                        required\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-email\">Email</Label>\n                      <Input\n                        id=\"register-email\"\n                        data-testid=\"input-register-email\"\n                        type=\"email\"\n                        value={registerData.email || \"\"}\n                        onChange={(e) => setRegisterData({ ...registerData, email: e.target.value })}\n                      />\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"register-firstName\">First Name</Label>\n                        <Input\n                          id=\"register-firstName\"\n                          data-testid=\"input-register-firstname\"\n                          type=\"text\"\n                          value={registerData.firstName || \"\"}\n                          onChange={(e) => setRegisterData({ ...registerData, firstName: e.target.value })}\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"register-lastName\">Last Name</Label>\n                        <Input\n                          id=\"register-lastName\"\n                          data-testid=\"input-register-lastname\"\n                          type=\"text\"\n                          value={registerData.lastName || \"\"}\n                          onChange={(e) => setRegisterData({ ...registerData, lastName: e.target.value })}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-password\">Password</Label>\n                      <Input\n                        id=\"register-password\"\n                        data-testid=\"input-register-password\"\n                        type=\"password\"\n                        value={registerData.password}\n                        onChange={(e) => setRegisterData({ ...registerData, password: e.target.value })}\n                        required\n                        minLength={6}\n                      />\n                      <p className=\"text-xs text-muted-foreground\">\n                        Minimum 6 characters\n                      </p>\n                    </div>\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={registerMutation.isPending}\n                      data-testid=\"button-register-submit\"\n                    >\n                      {registerMutation.isPending ? \"Registering...\" : \"Register\"}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      <div className=\"hidden lg:flex flex-1 bg-primary/5 items-center justify-center p-8\">\n        <div className=\"max-w-md space-y-8\">\n          <div>\n            <h2 className=\"text-3xl font-bold mb-4\">\n              Complete CRM for Marketing Agencies\n            </h2>\n            <p className=\"text-muted-foreground\">\n              Manage clients, campaigns, leads, and analytics all in one place\n            </p>\n          </div>\n\n          <div className=\"grid gap-4\">\n            <div className=\"flex gap-3\">\n              <LayoutDashboard className=\"w-6 h-6 text-primary shrink-0\" />\n              <div>\n                <h3 className=\"font-semibold\">Unified Dashboard</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Monitor all your metrics in one place\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex gap-3\">\n              <Users className=\"w-6 h-6 text-primary shrink-0\" />\n              <div>\n                <h3 className=\"font-semibold\">Client Management</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Track client information and communication\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex gap-3\">\n              <TrendingUp className=\"w-6 h-6 text-primary shrink-0\" />\n              <div>\n                <h3 className=\"font-semibold\">Sales Pipeline</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Manage leads from prospect to close\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex gap-3\">\n              <Calendar className=\"w-6 h-6 text-primary shrink-0\" />\n              <div>\n                <h3 className=\"font-semibold\">Content Calendar</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Schedule and manage client approvals\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9785},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n};\n\ntype LoginData = {\n  username: string;\n  password: string;\n};\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  \n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Login successful\",\n        description: `Welcome back, ${user.firstName || user.username}!`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Registration successful\",\n        description: `Welcome, ${user.firstName || user.username}!`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      queryClient.clear();\n      toast({\n        title: \"Logged out\",\n        description: \"You have been successfully logged out.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3249},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" data-testid=\"loading-spinner\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Route path={path} component={Component} />;\n}\n","size_bytes":736}},"version":2}